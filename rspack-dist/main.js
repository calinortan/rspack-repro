var __webpack_modules__ = {
"./node_modules/.pnpm/@aws-crypto+crc32@3.0.0/node_modules/@aws-crypto/crc32/build/aws_crc32.js": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.AwsCrc32 = void 0;
var tslib_1 = __webpack_require__(/*! tslib */"./node_modules/.pnpm/tslib@1.14.1/node_modules/tslib/tslib.es6.js");
var util_1 = __webpack_require__(/*! @aws-crypto/util */"./node_modules/.pnpm/@aws-crypto+util@3.0.0/node_modules/@aws-crypto/util/build/index.js");
var index_1 = __webpack_require__(/*! ./index */"./node_modules/.pnpm/@aws-crypto+crc32@3.0.0/node_modules/@aws-crypto/crc32/build/index.js");
var AwsCrc32 = function() {
    function AwsCrc32() {
        this.crc32 = new index_1.Crc32();
    }
    AwsCrc32.prototype.update = function(toHash) {
        if ((0, util_1.isEmptyData)(toHash)) return;
        this.crc32.update((0, util_1.convertToBuffer)(toHash));
    };
    AwsCrc32.prototype.digest = function() {
        return tslib_1.__awaiter(this, void 0, void 0, function() {
            return tslib_1.__generator(this, function(_a) {
                return [
                    2 /*return*/ ,
                    (0, util_1.numToUint8)(this.crc32.digest())
                ];
            });
        });
    };
    AwsCrc32.prototype.reset = function() {
        this.crc32 = new index_1.Crc32();
    };
    return AwsCrc32;
}();
exports.AwsCrc32 = AwsCrc32; //# sourceMappingURL=aws_crc32.js.map
}),
"./node_modules/.pnpm/@aws-crypto+crc32@3.0.0/node_modules/@aws-crypto/crc32/build/index.js": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.AwsCrc32 = exports.Crc32 = exports.crc32 = void 0;
var tslib_1 = __webpack_require__(/*! tslib */"./node_modules/.pnpm/tslib@1.14.1/node_modules/tslib/tslib.es6.js");
var util_1 = __webpack_require__(/*! @aws-crypto/util */"./node_modules/.pnpm/@aws-crypto+util@3.0.0/node_modules/@aws-crypto/util/build/index.js");
function crc32(data) {
    return new Crc32().update(data).digest();
}
exports.crc32 = crc32;
var Crc32 = function() {
    function Crc32() {
        this.checksum = 0xffffffff;
    }
    Crc32.prototype.update = function(data) {
        var e_1, _a;
        try {
            for(var data_1 = tslib_1.__values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()){
                var byte = data_1_1.value;
                this.checksum = this.checksum >>> 8 ^ lookupTable[(this.checksum ^ byte) & 0xff];
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
        return this;
    };
    Crc32.prototype.digest = function() {
        return (this.checksum ^ 0xffffffff) >>> 0;
    };
    return Crc32;
}();
exports.Crc32 = Crc32;
// prettier-ignore
var a_lookUpTable = [
    0x00000000,
    0x77073096,
    0xEE0E612C,
    0x990951BA,
    0x076DC419,
    0x706AF48F,
    0xE963A535,
    0x9E6495A3,
    0x0EDB8832,
    0x79DCB8A4,
    0xE0D5E91E,
    0x97D2D988,
    0x09B64C2B,
    0x7EB17CBD,
    0xE7B82D07,
    0x90BF1D91,
    0x1DB71064,
    0x6AB020F2,
    0xF3B97148,
    0x84BE41DE,
    0x1ADAD47D,
    0x6DDDE4EB,
    0xF4D4B551,
    0x83D385C7,
    0x136C9856,
    0x646BA8C0,
    0xFD62F97A,
    0x8A65C9EC,
    0x14015C4F,
    0x63066CD9,
    0xFA0F3D63,
    0x8D080DF5,
    0x3B6E20C8,
    0x4C69105E,
    0xD56041E4,
    0xA2677172,
    0x3C03E4D1,
    0x4B04D447,
    0xD20D85FD,
    0xA50AB56B,
    0x35B5A8FA,
    0x42B2986C,
    0xDBBBC9D6,
    0xACBCF940,
    0x32D86CE3,
    0x45DF5C75,
    0xDCD60DCF,
    0xABD13D59,
    0x26D930AC,
    0x51DE003A,
    0xC8D75180,
    0xBFD06116,
    0x21B4F4B5,
    0x56B3C423,
    0xCFBA9599,
    0xB8BDA50F,
    0x2802B89E,
    0x5F058808,
    0xC60CD9B2,
    0xB10BE924,
    0x2F6F7C87,
    0x58684C11,
    0xC1611DAB,
    0xB6662D3D,
    0x76DC4190,
    0x01DB7106,
    0x98D220BC,
    0xEFD5102A,
    0x71B18589,
    0x06B6B51F,
    0x9FBFE4A5,
    0xE8B8D433,
    0x7807C9A2,
    0x0F00F934,
    0x9609A88E,
    0xE10E9818,
    0x7F6A0DBB,
    0x086D3D2D,
    0x91646C97,
    0xE6635C01,
    0x6B6B51F4,
    0x1C6C6162,
    0x856530D8,
    0xF262004E,
    0x6C0695ED,
    0x1B01A57B,
    0x8208F4C1,
    0xF50FC457,
    0x65B0D9C6,
    0x12B7E950,
    0x8BBEB8EA,
    0xFCB9887C,
    0x62DD1DDF,
    0x15DA2D49,
    0x8CD37CF3,
    0xFBD44C65,
    0x4DB26158,
    0x3AB551CE,
    0xA3BC0074,
    0xD4BB30E2,
    0x4ADFA541,
    0x3DD895D7,
    0xA4D1C46D,
    0xD3D6F4FB,
    0x4369E96A,
    0x346ED9FC,
    0xAD678846,
    0xDA60B8D0,
    0x44042D73,
    0x33031DE5,
    0xAA0A4C5F,
    0xDD0D7CC9,
    0x5005713C,
    0x270241AA,
    0xBE0B1010,
    0xC90C2086,
    0x5768B525,
    0x206F85B3,
    0xB966D409,
    0xCE61E49F,
    0x5EDEF90E,
    0x29D9C998,
    0xB0D09822,
    0xC7D7A8B4,
    0x59B33D17,
    0x2EB40D81,
    0xB7BD5C3B,
    0xC0BA6CAD,
    0xEDB88320,
    0x9ABFB3B6,
    0x03B6E20C,
    0x74B1D29A,
    0xEAD54739,
    0x9DD277AF,
    0x04DB2615,
    0x73DC1683,
    0xE3630B12,
    0x94643B84,
    0x0D6D6A3E,
    0x7A6A5AA8,
    0xE40ECF0B,
    0x9309FF9D,
    0x0A00AE27,
    0x7D079EB1,
    0xF00F9344,
    0x8708A3D2,
    0x1E01F268,
    0x6906C2FE,
    0xF762575D,
    0x806567CB,
    0x196C3671,
    0x6E6B06E7,
    0xFED41B76,
    0x89D32BE0,
    0x10DA7A5A,
    0x67DD4ACC,
    0xF9B9DF6F,
    0x8EBEEFF9,
    0x17B7BE43,
    0x60B08ED5,
    0xD6D6A3E8,
    0xA1D1937E,
    0x38D8C2C4,
    0x4FDFF252,
    0xD1BB67F1,
    0xA6BC5767,
    0x3FB506DD,
    0x48B2364B,
    0xD80D2BDA,
    0xAF0A1B4C,
    0x36034AF6,
    0x41047A60,
    0xDF60EFC3,
    0xA867DF55,
    0x316E8EEF,
    0x4669BE79,
    0xCB61B38C,
    0xBC66831A,
    0x256FD2A0,
    0x5268E236,
    0xCC0C7795,
    0xBB0B4703,
    0x220216B9,
    0x5505262F,
    0xC5BA3BBE,
    0xB2BD0B28,
    0x2BB45A92,
    0x5CB36A04,
    0xC2D7FFA7,
    0xB5D0CF31,
    0x2CD99E8B,
    0x5BDEAE1D,
    0x9B64C2B0,
    0xEC63F226,
    0x756AA39C,
    0x026D930A,
    0x9C0906A9,
    0xEB0E363F,
    0x72076785,
    0x05005713,
    0x95BF4A82,
    0xE2B87A14,
    0x7BB12BAE,
    0x0CB61B38,
    0x92D28E9B,
    0xE5D5BE0D,
    0x7CDCEFB7,
    0x0BDBDF21,
    0x86D3D2D4,
    0xF1D4E242,
    0x68DDB3F8,
    0x1FDA836E,
    0x81BE16CD,
    0xF6B9265B,
    0x6FB077E1,
    0x18B74777,
    0x88085AE6,
    0xFF0F6A70,
    0x66063BCA,
    0x11010B5C,
    0x8F659EFF,
    0xF862AE69,
    0x616BFFD3,
    0x166CCF45,
    0xA00AE278,
    0xD70DD2EE,
    0x4E048354,
    0x3903B3C2,
    0xA7672661,
    0xD06016F7,
    0x4969474D,
    0x3E6E77DB,
    0xAED16A4A,
    0xD9D65ADC,
    0x40DF0B66,
    0x37D83BF0,
    0xA9BCAE53,
    0xDEBB9EC5,
    0x47B2CF7F,
    0x30B5FFE9,
    0xBDBDF21C,
    0xCABAC28A,
    0x53B39330,
    0x24B4A3A6,
    0xBAD03605,
    0xCDD70693,
    0x54DE5729,
    0x23D967BF,
    0xB3667A2E,
    0xC4614AB8,
    0x5D681B02,
    0x2A6F2B94,
    0xB40BBE37,
    0xC30C8EA1,
    0x5A05DF1B,
    0x2D02EF8D
];
var lookupTable = (0, util_1.uint32ArrayFrom)(a_lookUpTable);
var aws_crc32_1 = __webpack_require__(/*! ./aws_crc32 */"./node_modules/.pnpm/@aws-crypto+crc32@3.0.0/node_modules/@aws-crypto/crc32/build/aws_crc32.js");
Object.defineProperty(exports, "AwsCrc32", ({
    enumerable: true,
    get: function() {
        return aws_crc32_1.AwsCrc32;
    }
})); //# sourceMappingURL=index.js.map
}),
"./node_modules/.pnpm/@aws-crypto+util@3.0.0/node_modules/@aws-crypto/util/build/convertToBuffer.js": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.convertToBuffer = void 0;
var util_utf8_browser_1 = __webpack_require__(/*! @aws-sdk/util-utf8-browser */"./node_modules/.pnpm/@aws-sdk+util-utf8-browser@3.259.0/node_modules/@aws-sdk/util-utf8-browser/dist-es/index.js");
// Quick polyfill
var fromUtf8 = typeof Buffer !== "undefined" && Buffer.from ? function(input) {
    return Buffer.from(input, "utf8");
} : util_utf8_browser_1.fromUtf8;
function convertToBuffer(data) {
    // Already a Uint8, do nothing
    if (data instanceof Uint8Array) return data;
    if (typeof data === "string") return fromUtf8(data);
    if (ArrayBuffer.isView(data)) return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    return new Uint8Array(data);
}
exports.convertToBuffer = convertToBuffer; //# sourceMappingURL=convertToBuffer.js.map
}),
"./node_modules/.pnpm/@aws-crypto+util@3.0.0/node_modules/@aws-crypto/util/build/index.js": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.uint32ArrayFrom = exports.numToUint8 = exports.isEmptyData = exports.convertToBuffer = void 0;
var convertToBuffer_1 = __webpack_require__(/*! ./convertToBuffer */"./node_modules/.pnpm/@aws-crypto+util@3.0.0/node_modules/@aws-crypto/util/build/convertToBuffer.js");
Object.defineProperty(exports, "convertToBuffer", ({
    enumerable: true,
    get: function() {
        return convertToBuffer_1.convertToBuffer;
    }
}));
var isEmptyData_1 = __webpack_require__(/*! ./isEmptyData */"./node_modules/.pnpm/@aws-crypto+util@3.0.0/node_modules/@aws-crypto/util/build/isEmptyData.js");
Object.defineProperty(exports, "isEmptyData", ({
    enumerable: true,
    get: function() {
        return isEmptyData_1.isEmptyData;
    }
}));
var numToUint8_1 = __webpack_require__(/*! ./numToUint8 */"./node_modules/.pnpm/@aws-crypto+util@3.0.0/node_modules/@aws-crypto/util/build/numToUint8.js");
Object.defineProperty(exports, "numToUint8", ({
    enumerable: true,
    get: function() {
        return numToUint8_1.numToUint8;
    }
}));
var uint32ArrayFrom_1 = __webpack_require__(/*! ./uint32ArrayFrom */"./node_modules/.pnpm/@aws-crypto+util@3.0.0/node_modules/@aws-crypto/util/build/uint32ArrayFrom.js");
Object.defineProperty(exports, "uint32ArrayFrom", ({
    enumerable: true,
    get: function() {
        return uint32ArrayFrom_1.uint32ArrayFrom;
    }
})); //# sourceMappingURL=index.js.map
}),
"./node_modules/.pnpm/@aws-crypto+util@3.0.0/node_modules/@aws-crypto/util/build/isEmptyData.js": (function (__unused_webpack_module, exports) {
"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.isEmptyData = void 0;
function isEmptyData(data) {
    if (typeof data === "string") return data.length === 0;
    return data.byteLength === 0;
}
exports.isEmptyData = isEmptyData; //# sourceMappingURL=isEmptyData.js.map
}),
"./node_modules/.pnpm/@aws-crypto+util@3.0.0/node_modules/@aws-crypto/util/build/numToUint8.js": (function (__unused_webpack_module, exports) {
"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.numToUint8 = void 0;
function numToUint8(num) {
    return new Uint8Array([
        (num & 0xff000000) >> 24,
        (num & 0x00ff0000) >> 16,
        (num & 0x0000ff00) >> 8,
        num & 0x000000ff
    ]);
}
exports.numToUint8 = numToUint8; //# sourceMappingURL=numToUint8.js.map
}),
"./node_modules/.pnpm/@aws-crypto+util@3.0.0/node_modules/@aws-crypto/util/build/uint32ArrayFrom.js": (function (__unused_webpack_module, exports) {
"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.uint32ArrayFrom = void 0;
// IE 11 does not support Array.from, so we do it manually
function uint32ArrayFrom(a_lookUpTable) {
    if (!Uint32Array.from) {
        var return_array = new Uint32Array(a_lookUpTable.length);
        var a_index = 0;
        while(a_index < a_lookUpTable.length){
            return_array[a_index] = a_lookUpTable[a_index];
            a_index += 1;
        }
        return return_array;
    }
    return Uint32Array.from(a_lookUpTable);
}
exports.uint32ArrayFrom = uint32ArrayFrom; //# sourceMappingURL=uint32ArrayFrom.js.map
}),
"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/CloudWatchClient.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  CloudWatchClient: function() { return CloudWatchClient; }
});
/* harmony import */var _aws_sdk_middleware_host_header__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-host-header */"./node_modules/.pnpm/@aws-sdk+middleware-host-header@3.489.0/node_modules/@aws-sdk/middleware-host-header/dist-es/index.js");
/* harmony import */var _aws_sdk_middleware_logger__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @aws-sdk/middleware-logger */"./node_modules/.pnpm/@aws-sdk+middleware-logger@3.489.0/node_modules/@aws-sdk/middleware-logger/dist-es/loggerMiddleware.js");
/* harmony import */var _aws_sdk_middleware_recursion_detection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-recursion-detection */"./node_modules/.pnpm/@aws-sdk+middleware-recursion-detection@3.489.0/node_modules/@aws-sdk/middleware-recursion-detection/dist-es/index.js");
/* harmony import */var _aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-signing */"./node_modules/.pnpm/@aws-sdk+middleware-signing@3.489.0/node_modules/@aws-sdk/middleware-signing/dist-es/index.js");
/* harmony import */var _aws_sdk_middleware_user_agent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/middleware-user-agent */"./node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.489.0/node_modules/@aws-sdk/middleware-user-agent/dist-es/index.js");
/* harmony import */var _smithy_config_resolver__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @smithy/config-resolver */"./node_modules/.pnpm/@smithy+config-resolver@2.1.1/node_modules/@smithy/config-resolver/dist-es/index.js");
/* harmony import */var _smithy_middleware_content_length__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @smithy/middleware-content-length */"./node_modules/.pnpm/@smithy+middleware-content-length@2.1.1/node_modules/@smithy/middleware-content-length/dist-es/index.js");
/* harmony import */var _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @smithy/middleware-endpoint */"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/index.js");
/* harmony import */var _smithy_middleware_retry__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @smithy/middleware-retry */"./node_modules/.pnpm/@smithy+middleware-retry@2.1.1/node_modules/@smithy/middleware-retry/dist-es/index.js");
/* harmony import */var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @smithy/smithy-client */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/index.js");
/* harmony import */var _endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./endpoint/EndpointParameters */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/endpoint/EndpointParameters.js");
/* harmony import */var _runtimeConfig__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./runtimeConfig */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/runtimeConfig.js");
/* harmony import */var _runtimeExtensions__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./runtimeExtensions */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/runtimeExtensions.js");














class CloudWatchClient extends _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_8__.Client {
    constructor(...[configuration]){
        const _config_0 = (0, _runtimeConfig__WEBPACK_IMPORTED_MODULE_9__.getRuntimeConfig)(configuration || {});
        const _config_1 = (0, _endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_10__.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, _smithy_config_resolver__WEBPACK_IMPORTED_MODULE_4__.resolveRegionConfig)(_config_1);
        const _config_3 = (0, _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_6__.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, _smithy_middleware_retry__WEBPACK_IMPORTED_MODULE_7__.resolveRetryConfig)(_config_3);
        const _config_5 = (0, _aws_sdk_middleware_host_header__WEBPACK_IMPORTED_MODULE_0__.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, _aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__.resolveAwsAuthConfig)(_config_5);
        const _config_7 = (0, _aws_sdk_middleware_user_agent__WEBPACK_IMPORTED_MODULE_3__.resolveUserAgentConfig)(_config_6);
        const _config_8 = (0, _runtimeExtensions__WEBPACK_IMPORTED_MODULE_11__.resolveRuntimeExtensions)(_config_7, configuration?.extensions || []);
        super(_config_8);
        this.config = _config_8;
        this.middlewareStack.use((0, _smithy_middleware_retry__WEBPACK_IMPORTED_MODULE_7__.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, _smithy_middleware_content_length__WEBPACK_IMPORTED_MODULE_5__.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, _aws_sdk_middleware_host_header__WEBPACK_IMPORTED_MODULE_0__.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, _aws_sdk_middleware_logger__WEBPACK_IMPORTED_MODULE_12__.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, _aws_sdk_middleware_recursion_detection__WEBPACK_IMPORTED_MODULE_1__.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, _aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__.getAwsAuthPlugin)(this.config));
        this.middlewareStack.use((0, _aws_sdk_middleware_user_agent__WEBPACK_IMPORTED_MODULE_3__.getUserAgentPlugin)(this.config));
    }
    destroy() {
        super.destroy();
    }
}
}),
"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/commands/DescribeAlarmHistoryCommand.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  DescribeAlarmHistoryCommand: function() { return DescribeAlarmHistoryCommand; }
});
/* harmony import */var _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/middleware-endpoint */"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/index.js");
/* harmony import */var _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @smithy/middleware-serde */"./node_modules/.pnpm/@smithy+middleware-serde@2.1.1/node_modules/@smithy/middleware-serde/dist-es/serdePlugin.js");
/* harmony import */var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/smithy-client */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/index.js");
/* harmony import */var _endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../endpoint/EndpointParameters */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/endpoint/EndpointParameters.js");
/* harmony import */var _protocols_Aws_query__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_query */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/protocols/Aws_query.js");






class DescribeAlarmHistoryCommand extends _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.Command.classBuilder().ep({
    ..._endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_2__.commonParams
}).m(function(Command, cs, config, o) {
    return [
        (0, _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_3__.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
}).s("GraniteServiceVersion20100801", "DescribeAlarmHistory", {}).n("CloudWatchClient", "DescribeAlarmHistoryCommand").f(void 0, void 0).ser(_protocols_Aws_query__WEBPACK_IMPORTED_MODULE_4__.se_DescribeAlarmHistoryCommand).de(_protocols_Aws_query__WEBPACK_IMPORTED_MODULE_4__.de_DescribeAlarmHistoryCommand).build() {
}
}),
"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/commands/DescribeAlarmsCommand.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  DescribeAlarmsCommand: function() { return DescribeAlarmsCommand; }
});
/* harmony import */var _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/middleware-endpoint */"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/index.js");
/* harmony import */var _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @smithy/middleware-serde */"./node_modules/.pnpm/@smithy+middleware-serde@2.1.1/node_modules/@smithy/middleware-serde/dist-es/serdePlugin.js");
/* harmony import */var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/smithy-client */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/index.js");
/* harmony import */var _endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../endpoint/EndpointParameters */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/endpoint/EndpointParameters.js");
/* harmony import */var _protocols_Aws_query__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_query */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/protocols/Aws_query.js");






class DescribeAlarmsCommand extends _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.Command.classBuilder().ep({
    ..._endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_2__.commonParams
}).m(function(Command, cs, config, o) {
    return [
        (0, _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_3__.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
}).s("GraniteServiceVersion20100801", "DescribeAlarms", {}).n("CloudWatchClient", "DescribeAlarmsCommand").f(void 0, void 0).ser(_protocols_Aws_query__WEBPACK_IMPORTED_MODULE_4__.se_DescribeAlarmsCommand).de(_protocols_Aws_query__WEBPACK_IMPORTED_MODULE_4__.de_DescribeAlarmsCommand).build() {
}
}),
"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/commands/DescribeAnomalyDetectorsCommand.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  DescribeAnomalyDetectorsCommand: function() { return DescribeAnomalyDetectorsCommand; }
});
/* harmony import */var _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/middleware-endpoint */"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/index.js");
/* harmony import */var _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @smithy/middleware-serde */"./node_modules/.pnpm/@smithy+middleware-serde@2.1.1/node_modules/@smithy/middleware-serde/dist-es/serdePlugin.js");
/* harmony import */var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/smithy-client */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/index.js");
/* harmony import */var _endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../endpoint/EndpointParameters */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/endpoint/EndpointParameters.js");
/* harmony import */var _protocols_Aws_query__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_query */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/protocols/Aws_query.js");






class DescribeAnomalyDetectorsCommand extends _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.Command.classBuilder().ep({
    ..._endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_2__.commonParams
}).m(function(Command, cs, config, o) {
    return [
        (0, _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_3__.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
}).s("GraniteServiceVersion20100801", "DescribeAnomalyDetectors", {}).n("CloudWatchClient", "DescribeAnomalyDetectorsCommand").f(void 0, void 0).ser(_protocols_Aws_query__WEBPACK_IMPORTED_MODULE_4__.se_DescribeAnomalyDetectorsCommand).de(_protocols_Aws_query__WEBPACK_IMPORTED_MODULE_4__.de_DescribeAnomalyDetectorsCommand).build() {
}
}),
"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/commands/DescribeInsightRulesCommand.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  DescribeInsightRulesCommand: function() { return DescribeInsightRulesCommand; }
});
/* harmony import */var _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/middleware-endpoint */"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/index.js");
/* harmony import */var _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @smithy/middleware-serde */"./node_modules/.pnpm/@smithy+middleware-serde@2.1.1/node_modules/@smithy/middleware-serde/dist-es/serdePlugin.js");
/* harmony import */var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/smithy-client */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/index.js");
/* harmony import */var _endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../endpoint/EndpointParameters */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/endpoint/EndpointParameters.js");
/* harmony import */var _protocols_Aws_query__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_query */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/protocols/Aws_query.js");






class DescribeInsightRulesCommand extends _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.Command.classBuilder().ep({
    ..._endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_2__.commonParams
}).m(function(Command, cs, config, o) {
    return [
        (0, _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_3__.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
}).s("GraniteServiceVersion20100801", "DescribeInsightRules", {}).n("CloudWatchClient", "DescribeInsightRulesCommand").f(void 0, void 0).ser(_protocols_Aws_query__WEBPACK_IMPORTED_MODULE_4__.se_DescribeInsightRulesCommand).de(_protocols_Aws_query__WEBPACK_IMPORTED_MODULE_4__.de_DescribeInsightRulesCommand).build() {
}
}),
"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/commands/GetMetricDataCommand.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  GetMetricDataCommand: function() { return GetMetricDataCommand; }
});
/* harmony import */var _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/middleware-endpoint */"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/index.js");
/* harmony import */var _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @smithy/middleware-serde */"./node_modules/.pnpm/@smithy+middleware-serde@2.1.1/node_modules/@smithy/middleware-serde/dist-es/serdePlugin.js");
/* harmony import */var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/smithy-client */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/index.js");
/* harmony import */var _endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../endpoint/EndpointParameters */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/endpoint/EndpointParameters.js");
/* harmony import */var _protocols_Aws_query__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_query */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/protocols/Aws_query.js");






class GetMetricDataCommand extends _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.Command.classBuilder().ep({
    ..._endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_2__.commonParams
}).m(function(Command, cs, config, o) {
    return [
        (0, _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_3__.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
}).s("GraniteServiceVersion20100801", "GetMetricData", {}).n("CloudWatchClient", "GetMetricDataCommand").f(void 0, void 0).ser(_protocols_Aws_query__WEBPACK_IMPORTED_MODULE_4__.se_GetMetricDataCommand).de(_protocols_Aws_query__WEBPACK_IMPORTED_MODULE_4__.de_GetMetricDataCommand).build() {
}
}),
"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/commands/ListDashboardsCommand.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  ListDashboardsCommand: function() { return ListDashboardsCommand; }
});
/* harmony import */var _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/middleware-endpoint */"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/index.js");
/* harmony import */var _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @smithy/middleware-serde */"./node_modules/.pnpm/@smithy+middleware-serde@2.1.1/node_modules/@smithy/middleware-serde/dist-es/serdePlugin.js");
/* harmony import */var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/smithy-client */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/index.js");
/* harmony import */var _endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../endpoint/EndpointParameters */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/endpoint/EndpointParameters.js");
/* harmony import */var _protocols_Aws_query__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_query */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/protocols/Aws_query.js");






class ListDashboardsCommand extends _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.Command.classBuilder().ep({
    ..._endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_2__.commonParams
}).m(function(Command, cs, config, o) {
    return [
        (0, _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_3__.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
}).s("GraniteServiceVersion20100801", "ListDashboards", {}).n("CloudWatchClient", "ListDashboardsCommand").f(void 0, void 0).ser(_protocols_Aws_query__WEBPACK_IMPORTED_MODULE_4__.se_ListDashboardsCommand).de(_protocols_Aws_query__WEBPACK_IMPORTED_MODULE_4__.de_ListDashboardsCommand).build() {
}
}),
"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/commands/ListManagedInsightRulesCommand.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  ListManagedInsightRulesCommand: function() { return ListManagedInsightRulesCommand; }
});
/* harmony import */var _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/middleware-endpoint */"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/index.js");
/* harmony import */var _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @smithy/middleware-serde */"./node_modules/.pnpm/@smithy+middleware-serde@2.1.1/node_modules/@smithy/middleware-serde/dist-es/serdePlugin.js");
/* harmony import */var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/smithy-client */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/index.js");
/* harmony import */var _endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../endpoint/EndpointParameters */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/endpoint/EndpointParameters.js");
/* harmony import */var _protocols_Aws_query__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_query */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/protocols/Aws_query.js");






class ListManagedInsightRulesCommand extends _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.Command.classBuilder().ep({
    ..._endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_2__.commonParams
}).m(function(Command, cs, config, o) {
    return [
        (0, _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_3__.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
}).s("GraniteServiceVersion20100801", "ListManagedInsightRules", {}).n("CloudWatchClient", "ListManagedInsightRulesCommand").f(void 0, void 0).ser(_protocols_Aws_query__WEBPACK_IMPORTED_MODULE_4__.se_ListManagedInsightRulesCommand).de(_protocols_Aws_query__WEBPACK_IMPORTED_MODULE_4__.de_ListManagedInsightRulesCommand).build() {
}
}),
"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/commands/ListMetricStreamsCommand.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  ListMetricStreamsCommand: function() { return ListMetricStreamsCommand; }
});
/* harmony import */var _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/middleware-endpoint */"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/index.js");
/* harmony import */var _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @smithy/middleware-serde */"./node_modules/.pnpm/@smithy+middleware-serde@2.1.1/node_modules/@smithy/middleware-serde/dist-es/serdePlugin.js");
/* harmony import */var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/smithy-client */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/index.js");
/* harmony import */var _endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../endpoint/EndpointParameters */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/endpoint/EndpointParameters.js");
/* harmony import */var _protocols_Aws_query__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_query */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/protocols/Aws_query.js");






class ListMetricStreamsCommand extends _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.Command.classBuilder().ep({
    ..._endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_2__.commonParams
}).m(function(Command, cs, config, o) {
    return [
        (0, _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_3__.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
}).s("GraniteServiceVersion20100801", "ListMetricStreams", {}).n("CloudWatchClient", "ListMetricStreamsCommand").f(void 0, void 0).ser(_protocols_Aws_query__WEBPACK_IMPORTED_MODULE_4__.se_ListMetricStreamsCommand).de(_protocols_Aws_query__WEBPACK_IMPORTED_MODULE_4__.de_ListMetricStreamsCommand).build() {
}
}),
"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/commands/ListMetricsCommand.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  ListMetricsCommand: function() { return ListMetricsCommand; }
});
/* harmony import */var _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/middleware-endpoint */"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/index.js");
/* harmony import */var _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @smithy/middleware-serde */"./node_modules/.pnpm/@smithy+middleware-serde@2.1.1/node_modules/@smithy/middleware-serde/dist-es/serdePlugin.js");
/* harmony import */var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/smithy-client */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/index.js");
/* harmony import */var _endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../endpoint/EndpointParameters */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/endpoint/EndpointParameters.js");
/* harmony import */var _protocols_Aws_query__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_query */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/protocols/Aws_query.js");






class ListMetricsCommand extends _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.Command.classBuilder().ep({
    ..._endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_2__.commonParams
}).m(function(Command, cs, config, o) {
    return [
        (0, _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_3__.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
}).s("GraniteServiceVersion20100801", "ListMetrics", {}).n("CloudWatchClient", "ListMetricsCommand").f(void 0, void 0).ser(_protocols_Aws_query__WEBPACK_IMPORTED_MODULE_4__.se_ListMetricsCommand).de(_protocols_Aws_query__WEBPACK_IMPORTED_MODULE_4__.de_ListMetricsCommand).build() {
}
}),
"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/endpoint/EndpointParameters.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  commonParams: function() { return commonParams; },
  resolveClientEndpointParameters: function() { return resolveClientEndpointParameters; }
});
const resolveClientEndpointParameters = (options)=>{
    return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "monitoring"
    };
};
const commonParams = {
    UseFIPS: {
        type: "builtInParams",
        name: "useFipsEndpoint"
    },
    Endpoint: {
        type: "builtInParams",
        name: "endpoint"
    },
    Region: {
        type: "builtInParams",
        name: "region"
    },
    UseDualStack: {
        type: "builtInParams",
        name: "useDualstackEndpoint"
    }
};
}),
"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/endpoint/endpointResolver.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  defaultEndpointResolver: function() { return defaultEndpointResolver; }
});
/* harmony import */var _smithy_util_endpoints__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/util-endpoints */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/index.js");
/* harmony import */var _ruleset__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ruleset */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/endpoint/ruleset.js");


const defaultEndpointResolver = (endpointParams, context = {})=>{
    return (0, _smithy_util_endpoints__WEBPACK_IMPORTED_MODULE_0__.resolveEndpoint)(_ruleset__WEBPACK_IMPORTED_MODULE_1__.ruleSet, {
        endpointParams: endpointParams,
        logger: context.logger
    });
};
}),
"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/endpoint/ruleset.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  ruleSet: function() { return ruleSet; }
});
const u = "required", v = "fn", w = "argv", x = "ref";
const a = true, b = "isSet", c = "booleanEquals", d = "error", e = "endpoint", f = "tree", g = "PartitionResult", h = "getAttr", i = {
    [u]: false,
    "type": "String"
}, j = {
    [u]: true,
    "default": false,
    "type": "Boolean"
}, k = {
    [x]: "Endpoint"
}, l = {
    [v]: c,
    [w]: [
        {
            [x]: "UseFIPS"
        },
        true
    ]
}, m = {
    [v]: c,
    [w]: [
        {
            [x]: "UseDualStack"
        },
        true
    ]
}, n = {}, o = {
    [v]: h,
    [w]: [
        {
            [x]: g
        },
        "supportsFIPS"
    ]
}, p = {
    [x]: g
}, q = {
    [v]: c,
    [w]: [
        true,
        {
            [v]: h,
            [w]: [
                p,
                "supportsDualStack"
            ]
        }
    ]
}, r = [
    l
], s = [
    m
], t = [
    {
        [x]: "Region"
    }
];
const _data = {
    version: "1.0",
    parameters: {
        Region: i,
        UseDualStack: j,
        UseFIPS: j,
        Endpoint: i
    },
    rules: [
        {
            conditions: [
                {
                    [v]: b,
                    [w]: [
                        k
                    ]
                }
            ],
            rules: [
                {
                    conditions: r,
                    error: "Invalid Configuration: FIPS and custom endpoint are not supported",
                    type: d
                },
                {
                    conditions: s,
                    error: "Invalid Configuration: Dualstack and custom endpoint are not supported",
                    type: d
                },
                {
                    endpoint: {
                        url: k,
                        properties: n,
                        headers: n
                    },
                    type: e
                }
            ],
            type: f
        },
        {
            conditions: [
                {
                    [v]: b,
                    [w]: t
                }
            ],
            rules: [
                {
                    conditions: [
                        {
                            [v]: "aws.partition",
                            [w]: t,
                            assign: g
                        }
                    ],
                    rules: [
                        {
                            conditions: [
                                l,
                                m
                            ],
                            rules: [
                                {
                                    conditions: [
                                        {
                                            [v]: c,
                                            [w]: [
                                                a,
                                                o
                                            ]
                                        },
                                        q
                                    ],
                                    rules: [
                                        {
                                            endpoint: {
                                                url: "https://monitoring-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                                properties: n,
                                                headers: n
                                            },
                                            type: e
                                        }
                                    ],
                                    type: f
                                },
                                {
                                    error: "FIPS and DualStack are enabled, but this partition does not support one or both",
                                    type: d
                                }
                            ],
                            type: f
                        },
                        {
                            conditions: r,
                            rules: [
                                {
                                    conditions: [
                                        {
                                            [v]: c,
                                            [w]: [
                                                o,
                                                a
                                            ]
                                        }
                                    ],
                                    rules: [
                                        {
                                            conditions: [
                                                {
                                                    [v]: "stringEquals",
                                                    [w]: [
                                                        {
                                                            [v]: h,
                                                            [w]: [
                                                                p,
                                                                "name"
                                                            ]
                                                        },
                                                        "aws-us-gov"
                                                    ]
                                                }
                                            ],
                                            endpoint: {
                                                url: "https://monitoring.{Region}.amazonaws.com",
                                                properties: n,
                                                headers: n
                                            },
                                            type: e
                                        },
                                        {
                                            endpoint: {
                                                url: "https://monitoring-fips.{Region}.{PartitionResult#dnsSuffix}",
                                                properties: n,
                                                headers: n
                                            },
                                            type: e
                                        }
                                    ],
                                    type: f
                                },
                                {
                                    error: "FIPS is enabled but this partition does not support FIPS",
                                    type: d
                                }
                            ],
                            type: f
                        },
                        {
                            conditions: s,
                            rules: [
                                {
                                    conditions: [
                                        q
                                    ],
                                    rules: [
                                        {
                                            endpoint: {
                                                url: "https://monitoring.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                                properties: n,
                                                headers: n
                                            },
                                            type: e
                                        }
                                    ],
                                    type: f
                                },
                                {
                                    error: "DualStack is enabled but this partition does not support DualStack",
                                    type: d
                                }
                            ],
                            type: f
                        },
                        {
                            endpoint: {
                                url: "https://monitoring.{Region}.{PartitionResult#dnsSuffix}",
                                properties: n,
                                headers: n
                            },
                            type: e
                        }
                    ],
                    type: f
                }
            ],
            type: f
        },
        {
            error: "Invalid Configuration: Missing Region",
            type: d
        }
    ]
};
const ruleSet = _data;
}),
"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/models/CloudWatchServiceException.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  CloudWatchServiceException: function() { return CloudWatchServiceException; }
});
/* harmony import */var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/smithy-client */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/index.js");


class CloudWatchServiceException extends _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_0__.ServiceException {
    constructor(options){
        super(options);
        Object.setPrototypeOf(this, CloudWatchServiceException.prototype);
    }
}
}),
"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/models/models_0.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  InternalServiceFault: function() { return InternalServiceFault; },
  InvalidNextToken: function() { return InvalidNextToken; },
  InvalidParameterCombinationException: function() { return InvalidParameterCombinationException; },
  InvalidParameterValueException: function() { return InvalidParameterValueException; },
  MissingRequiredParameterException: function() { return MissingRequiredParameterException; }
});
/* harmony import */var _CloudWatchServiceException__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CloudWatchServiceException */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/models/CloudWatchServiceException.js");

const ActionsSuppressedBy = (/* unused pure expression or super */ null && ({
    Alarm: "Alarm",
    ExtensionPeriod: "ExtensionPeriod",
    WaitPeriod: "WaitPeriod"
}));
const AlarmType = (/* unused pure expression or super */ null && ({
    CompositeAlarm: "CompositeAlarm",
    MetricAlarm: "MetricAlarm"
}));
const HistoryItemType = (/* unused pure expression or super */ null && ({
    Action: "Action",
    ConfigurationUpdate: "ConfigurationUpdate",
    StateUpdate: "StateUpdate"
}));
const StandardUnit = (/* unused pure expression or super */ null && ({
    Bits: "Bits",
    Bits_Second: "Bits/Second",
    Bytes: "Bytes",
    Bytes_Second: "Bytes/Second",
    Count: "Count",
    Count_Second: "Count/Second",
    Gigabits: "Gigabits",
    Gigabits_Second: "Gigabits/Second",
    Gigabytes: "Gigabytes",
    Gigabytes_Second: "Gigabytes/Second",
    Kilobits: "Kilobits",
    Kilobits_Second: "Kilobits/Second",
    Kilobytes: "Kilobytes",
    Kilobytes_Second: "Kilobytes/Second",
    Megabits: "Megabits",
    Megabits_Second: "Megabits/Second",
    Megabytes: "Megabytes",
    Megabytes_Second: "Megabytes/Second",
    Microseconds: "Microseconds",
    Milliseconds: "Milliseconds",
    None: "None",
    Percent: "Percent",
    Seconds: "Seconds",
    Terabits: "Terabits",
    Terabits_Second: "Terabits/Second",
    Terabytes: "Terabytes",
    Terabytes_Second: "Terabytes/Second"
}));
const AnomalyDetectorStateValue = (/* unused pure expression or super */ null && ({
    PENDING_TRAINING: "PENDING_TRAINING",
    TRAINED: "TRAINED",
    TRAINED_INSUFFICIENT_DATA: "TRAINED_INSUFFICIENT_DATA"
}));
const AnomalyDetectorType = (/* unused pure expression or super */ null && ({
    METRIC_MATH: "METRIC_MATH",
    SINGLE_METRIC: "SINGLE_METRIC"
}));
const ComparisonOperator = (/* unused pure expression or super */ null && ({
    GreaterThanOrEqualToThreshold: "GreaterThanOrEqualToThreshold",
    GreaterThanThreshold: "GreaterThanThreshold",
    GreaterThanUpperThreshold: "GreaterThanUpperThreshold",
    LessThanLowerOrGreaterThanUpperThreshold: "LessThanLowerOrGreaterThanUpperThreshold",
    LessThanLowerThreshold: "LessThanLowerThreshold",
    LessThanOrEqualToThreshold: "LessThanOrEqualToThreshold",
    LessThanThreshold: "LessThanThreshold"
}));
const StateValue = (/* unused pure expression or super */ null && ({
    ALARM: "ALARM",
    INSUFFICIENT_DATA: "INSUFFICIENT_DATA",
    OK: "OK"
}));
class ConcurrentModificationException extends (/* unused pure expression or super */ null && (__BaseException)) {
    constructor(opts){
        super({
            name: "ConcurrentModificationException",
            $fault: "client",
            ...opts
        });
        this.name = "ConcurrentModificationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConcurrentModificationException.prototype);
        this.Message = opts.Message;
    }
}
class DashboardInvalidInputError extends (/* unused pure expression or super */ null && (__BaseException)) {
    constructor(opts){
        super({
            name: "DashboardInvalidInputError",
            $fault: "client",
            ...opts
        });
        this.name = "DashboardInvalidInputError";
        this.$fault = "client";
        Object.setPrototypeOf(this, DashboardInvalidInputError.prototype);
        this.dashboardValidationMessages = opts.dashboardValidationMessages;
    }
}
class DashboardNotFoundError extends (/* unused pure expression or super */ null && (__BaseException)) {
    constructor(opts){
        super({
            name: "DashboardNotFoundError",
            $fault: "client",
            ...opts
        });
        this.name = "DashboardNotFoundError";
        this.$fault = "client";
        Object.setPrototypeOf(this, DashboardNotFoundError.prototype);
    }
}
class ResourceNotFound extends (/* unused pure expression or super */ null && (__BaseException)) {
    constructor(opts){
        super({
            name: "ResourceNotFound",
            $fault: "client",
            ...opts
        });
        this.name = "ResourceNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFound.prototype);
    }
}
class InternalServiceFault extends _CloudWatchServiceException__WEBPACK_IMPORTED_MODULE_0__.CloudWatchServiceException {
    constructor(opts){
        super({
            name: "InternalServiceFault",
            $fault: "server",
            ...opts
        });
        this.name = "InternalServiceFault";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServiceFault.prototype);
        this.Message = opts.Message;
    }
}
class InvalidParameterCombinationException extends _CloudWatchServiceException__WEBPACK_IMPORTED_MODULE_0__.CloudWatchServiceException {
    constructor(opts){
        super({
            name: "InvalidParameterCombinationException",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidParameterCombinationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameterCombinationException.prototype);
    }
}
class InvalidParameterValueException extends _CloudWatchServiceException__WEBPACK_IMPORTED_MODULE_0__.CloudWatchServiceException {
    constructor(opts){
        super({
            name: "InvalidParameterValueException",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidParameterValueException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameterValueException.prototype);
    }
}
class MissingRequiredParameterException extends _CloudWatchServiceException__WEBPACK_IMPORTED_MODULE_0__.CloudWatchServiceException {
    constructor(opts){
        super({
            name: "MissingRequiredParameterException",
            $fault: "client",
            ...opts
        });
        this.name = "MissingRequiredParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MissingRequiredParameterException.prototype);
    }
}
class ResourceNotFoundException extends (/* unused pure expression or super */ null && (__BaseException)) {
    constructor(opts){
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.ResourceType = opts.ResourceType;
        this.ResourceId = opts.ResourceId;
        this.Message = opts.Message;
    }
}
const ScanBy = (/* unused pure expression or super */ null && ({
    TIMESTAMP_ASCENDING: "TimestampAscending",
    TIMESTAMP_DESCENDING: "TimestampDescending"
}));
class InvalidNextToken extends _CloudWatchServiceException__WEBPACK_IMPORTED_MODULE_0__.CloudWatchServiceException {
    constructor(opts){
        super({
            name: "InvalidNextToken",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidNextToken";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidNextToken.prototype);
    }
}
const EvaluationState = (/* unused pure expression or super */ null && ({
    PARTIAL_DATA: "PARTIAL_DATA"
}));
const Statistic = (/* unused pure expression or super */ null && ({
    Average: "Average",
    Maximum: "Maximum",
    Minimum: "Minimum",
    SampleCount: "SampleCount",
    Sum: "Sum"
}));
class LimitExceededException extends (/* unused pure expression or super */ null && (__BaseException)) {
    constructor(opts){
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
const StatusCode = (/* unused pure expression or super */ null && ({
    COMPLETE: "Complete",
    FORBIDDEN: "Forbidden",
    INTERNAL_ERROR: "InternalError",
    PARTIAL_DATA: "PartialData"
}));
const MetricStreamOutputFormat = (/* unused pure expression or super */ null && ({
    JSON: "json",
    OPEN_TELEMETRY_0_7: "opentelemetry0.7",
    OPEN_TELEMETRY_1_0: "opentelemetry1.0"
}));
const RecentlyActive = (/* unused pure expression or super */ null && ({
    PT3H: "PT3H"
}));
class LimitExceededFault extends (/* unused pure expression or super */ null && (__BaseException)) {
    constructor(opts){
        super({
            name: "LimitExceededFault",
            $fault: "client",
            ...opts
        });
        this.name = "LimitExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededFault.prototype);
    }
}
class InvalidFormatFault extends (/* unused pure expression or super */ null && (__BaseException)) {
    constructor(opts){
        super({
            name: "InvalidFormatFault",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidFormatFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidFormatFault.prototype);
    }
}
}),
"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/pagination/DescribeAlarmHistoryPaginator.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  paginateDescribeAlarmHistory: function() { return paginateDescribeAlarmHistory; }
});
/* harmony import */var _smithy_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/core */"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/index.js");
/* harmony import */var _CloudWatchClient__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../CloudWatchClient */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/CloudWatchClient.js");
/* harmony import */var _commands_DescribeAlarmHistoryCommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../commands/DescribeAlarmHistoryCommand */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/commands/DescribeAlarmHistoryCommand.js");



const paginateDescribeAlarmHistory = (0, _smithy_core__WEBPACK_IMPORTED_MODULE_0__.createPaginator)(_CloudWatchClient__WEBPACK_IMPORTED_MODULE_1__.CloudWatchClient, _commands_DescribeAlarmHistoryCommand__WEBPACK_IMPORTED_MODULE_2__.DescribeAlarmHistoryCommand, "NextToken", "NextToken", "MaxRecords");
}),
"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/pagination/DescribeAlarmsPaginator.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  paginateDescribeAlarms: function() { return paginateDescribeAlarms; }
});
/* harmony import */var _smithy_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/core */"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/index.js");
/* harmony import */var _CloudWatchClient__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../CloudWatchClient */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/CloudWatchClient.js");
/* harmony import */var _commands_DescribeAlarmsCommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../commands/DescribeAlarmsCommand */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/commands/DescribeAlarmsCommand.js");



const paginateDescribeAlarms = (0, _smithy_core__WEBPACK_IMPORTED_MODULE_0__.createPaginator)(_CloudWatchClient__WEBPACK_IMPORTED_MODULE_1__.CloudWatchClient, _commands_DescribeAlarmsCommand__WEBPACK_IMPORTED_MODULE_2__.DescribeAlarmsCommand, "NextToken", "NextToken", "MaxRecords");
}),
"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/pagination/DescribeAnomalyDetectorsPaginator.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  paginateDescribeAnomalyDetectors: function() { return paginateDescribeAnomalyDetectors; }
});
/* harmony import */var _smithy_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/core */"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/index.js");
/* harmony import */var _CloudWatchClient__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../CloudWatchClient */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/CloudWatchClient.js");
/* harmony import */var _commands_DescribeAnomalyDetectorsCommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../commands/DescribeAnomalyDetectorsCommand */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/commands/DescribeAnomalyDetectorsCommand.js");



const paginateDescribeAnomalyDetectors = (0, _smithy_core__WEBPACK_IMPORTED_MODULE_0__.createPaginator)(_CloudWatchClient__WEBPACK_IMPORTED_MODULE_1__.CloudWatchClient, _commands_DescribeAnomalyDetectorsCommand__WEBPACK_IMPORTED_MODULE_2__.DescribeAnomalyDetectorsCommand, "NextToken", "NextToken", "MaxResults");
}),
"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/pagination/DescribeInsightRulesPaginator.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  paginateDescribeInsightRules: function() { return paginateDescribeInsightRules; }
});
/* harmony import */var _smithy_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/core */"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/index.js");
/* harmony import */var _CloudWatchClient__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../CloudWatchClient */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/CloudWatchClient.js");
/* harmony import */var _commands_DescribeInsightRulesCommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../commands/DescribeInsightRulesCommand */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/commands/DescribeInsightRulesCommand.js");



const paginateDescribeInsightRules = (0, _smithy_core__WEBPACK_IMPORTED_MODULE_0__.createPaginator)(_CloudWatchClient__WEBPACK_IMPORTED_MODULE_1__.CloudWatchClient, _commands_DescribeInsightRulesCommand__WEBPACK_IMPORTED_MODULE_2__.DescribeInsightRulesCommand, "NextToken", "NextToken", "MaxResults");
}),
"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/pagination/GetMetricDataPaginator.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  paginateGetMetricData: function() { return paginateGetMetricData; }
});
/* harmony import */var _smithy_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/core */"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/index.js");
/* harmony import */var _CloudWatchClient__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../CloudWatchClient */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/CloudWatchClient.js");
/* harmony import */var _commands_GetMetricDataCommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../commands/GetMetricDataCommand */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/commands/GetMetricDataCommand.js");



const paginateGetMetricData = (0, _smithy_core__WEBPACK_IMPORTED_MODULE_0__.createPaginator)(_CloudWatchClient__WEBPACK_IMPORTED_MODULE_1__.CloudWatchClient, _commands_GetMetricDataCommand__WEBPACK_IMPORTED_MODULE_2__.GetMetricDataCommand, "NextToken", "NextToken", "MaxDatapoints");
}),
"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/pagination/ListDashboardsPaginator.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  paginateListDashboards: function() { return paginateListDashboards; }
});
/* harmony import */var _smithy_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/core */"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/index.js");
/* harmony import */var _CloudWatchClient__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../CloudWatchClient */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/CloudWatchClient.js");
/* harmony import */var _commands_ListDashboardsCommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../commands/ListDashboardsCommand */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/commands/ListDashboardsCommand.js");



const paginateListDashboards = (0, _smithy_core__WEBPACK_IMPORTED_MODULE_0__.createPaginator)(_CloudWatchClient__WEBPACK_IMPORTED_MODULE_1__.CloudWatchClient, _commands_ListDashboardsCommand__WEBPACK_IMPORTED_MODULE_2__.ListDashboardsCommand, "NextToken", "NextToken", "");
}),
"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/pagination/ListManagedInsightRulesPaginator.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  paginateListManagedInsightRules: function() { return paginateListManagedInsightRules; }
});
/* harmony import */var _smithy_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/core */"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/index.js");
/* harmony import */var _CloudWatchClient__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../CloudWatchClient */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/CloudWatchClient.js");
/* harmony import */var _commands_ListManagedInsightRulesCommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../commands/ListManagedInsightRulesCommand */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/commands/ListManagedInsightRulesCommand.js");



const paginateListManagedInsightRules = (0, _smithy_core__WEBPACK_IMPORTED_MODULE_0__.createPaginator)(_CloudWatchClient__WEBPACK_IMPORTED_MODULE_1__.CloudWatchClient, _commands_ListManagedInsightRulesCommand__WEBPACK_IMPORTED_MODULE_2__.ListManagedInsightRulesCommand, "NextToken", "NextToken", "MaxResults");
}),
"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/pagination/ListMetricStreamsPaginator.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  paginateListMetricStreams: function() { return paginateListMetricStreams; }
});
/* harmony import */var _smithy_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/core */"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/index.js");
/* harmony import */var _CloudWatchClient__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../CloudWatchClient */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/CloudWatchClient.js");
/* harmony import */var _commands_ListMetricStreamsCommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../commands/ListMetricStreamsCommand */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/commands/ListMetricStreamsCommand.js");



const paginateListMetricStreams = (0, _smithy_core__WEBPACK_IMPORTED_MODULE_0__.createPaginator)(_CloudWatchClient__WEBPACK_IMPORTED_MODULE_1__.CloudWatchClient, _commands_ListMetricStreamsCommand__WEBPACK_IMPORTED_MODULE_2__.ListMetricStreamsCommand, "NextToken", "NextToken", "MaxResults");
}),
"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/pagination/ListMetricsPaginator.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  paginateListMetrics: function() { return paginateListMetrics; }
});
/* harmony import */var _smithy_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/core */"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/index.js");
/* harmony import */var _CloudWatchClient__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../CloudWatchClient */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/CloudWatchClient.js");
/* harmony import */var _commands_ListMetricsCommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../commands/ListMetricsCommand */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/commands/ListMetricsCommand.js");



const paginateListMetrics = (0, _smithy_core__WEBPACK_IMPORTED_MODULE_0__.createPaginator)(_CloudWatchClient__WEBPACK_IMPORTED_MODULE_1__.CloudWatchClient, _commands_ListMetricsCommand__WEBPACK_IMPORTED_MODULE_2__.ListMetricsCommand, "NextToken", "NextToken", "");
}),
"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/pagination/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  paginateDescribeAlarmHistory: function() { return /* reexport safe */ _DescribeAlarmHistoryPaginator__WEBPACK_IMPORTED_MODULE_0__.paginateDescribeAlarmHistory; },
  paginateDescribeAlarms: function() { return /* reexport safe */ _DescribeAlarmsPaginator__WEBPACK_IMPORTED_MODULE_1__.paginateDescribeAlarms; },
  paginateDescribeAnomalyDetectors: function() { return /* reexport safe */ _DescribeAnomalyDetectorsPaginator__WEBPACK_IMPORTED_MODULE_2__.paginateDescribeAnomalyDetectors; },
  paginateDescribeInsightRules: function() { return /* reexport safe */ _DescribeInsightRulesPaginator__WEBPACK_IMPORTED_MODULE_3__.paginateDescribeInsightRules; },
  paginateGetMetricData: function() { return /* reexport safe */ _GetMetricDataPaginator__WEBPACK_IMPORTED_MODULE_4__.paginateGetMetricData; },
  paginateListDashboards: function() { return /* reexport safe */ _ListDashboardsPaginator__WEBPACK_IMPORTED_MODULE_6__.paginateListDashboards; },
  paginateListManagedInsightRules: function() { return /* reexport safe */ _ListManagedInsightRulesPaginator__WEBPACK_IMPORTED_MODULE_7__.paginateListManagedInsightRules; },
  paginateListMetricStreams: function() { return /* reexport safe */ _ListMetricStreamsPaginator__WEBPACK_IMPORTED_MODULE_8__.paginateListMetricStreams; },
  paginateListMetrics: function() { return /* reexport safe */ _ListMetricsPaginator__WEBPACK_IMPORTED_MODULE_9__.paginateListMetrics; }
});
/* harmony import */var _DescribeAlarmHistoryPaginator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DescribeAlarmHistoryPaginator */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/pagination/DescribeAlarmHistoryPaginator.js");
/* harmony import */var _DescribeAlarmsPaginator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DescribeAlarmsPaginator */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/pagination/DescribeAlarmsPaginator.js");
/* harmony import */var _DescribeAnomalyDetectorsPaginator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DescribeAnomalyDetectorsPaginator */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/pagination/DescribeAnomalyDetectorsPaginator.js");
/* harmony import */var _DescribeInsightRulesPaginator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DescribeInsightRulesPaginator */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/pagination/DescribeInsightRulesPaginator.js");
/* harmony import */var _GetMetricDataPaginator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./GetMetricDataPaginator */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/pagination/GetMetricDataPaginator.js");
/* harmony import */var _ListDashboardsPaginator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ListDashboardsPaginator */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/pagination/ListDashboardsPaginator.js");
/* harmony import */var _ListManagedInsightRulesPaginator__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ListManagedInsightRulesPaginator */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/pagination/ListManagedInsightRulesPaginator.js");
/* harmony import */var _ListMetricStreamsPaginator__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ListMetricStreamsPaginator */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/pagination/ListMetricStreamsPaginator.js");
/* harmony import */var _ListMetricsPaginator__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ListMetricsPaginator */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/pagination/ListMetricsPaginator.js");










}),
"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/protocols/Aws_query.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  de_DescribeAlarmHistoryCommand: function() { return de_DescribeAlarmHistoryCommand; },
  de_DescribeAlarmsCommand: function() { return de_DescribeAlarmsCommand; },
  de_DescribeAnomalyDetectorsCommand: function() { return de_DescribeAnomalyDetectorsCommand; },
  de_DescribeInsightRulesCommand: function() { return de_DescribeInsightRulesCommand; },
  de_GetMetricDataCommand: function() { return de_GetMetricDataCommand; },
  de_ListDashboardsCommand: function() { return de_ListDashboardsCommand; },
  de_ListManagedInsightRulesCommand: function() { return de_ListManagedInsightRulesCommand; },
  de_ListMetricStreamsCommand: function() { return de_ListMetricStreamsCommand; },
  de_ListMetricsCommand: function() { return de_ListMetricsCommand; },
  se_DescribeAlarmHistoryCommand: function() { return se_DescribeAlarmHistoryCommand; },
  se_DescribeAlarmsCommand: function() { return se_DescribeAlarmsCommand; },
  se_DescribeAnomalyDetectorsCommand: function() { return se_DescribeAnomalyDetectorsCommand; },
  se_DescribeInsightRulesCommand: function() { return se_DescribeInsightRulesCommand; },
  se_GetMetricDataCommand: function() { return se_GetMetricDataCommand; },
  se_ListDashboardsCommand: function() { return se_ListDashboardsCommand; },
  se_ListManagedInsightRulesCommand: function() { return se_ListManagedInsightRulesCommand; },
  se_ListMetricStreamsCommand: function() { return se_ListMetricStreamsCommand; },
  se_ListMetricsCommand: function() { return se_ListMetricsCommand; }
});
/* harmony import */var _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/protocol-http */"./node_modules/.pnpm/@smithy+protocol-http@3.1.1/node_modules/@smithy/protocol-http/dist-es/index.js");
/* harmony import */var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/smithy-client */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/index.js");
/* harmony import */var fast_xml_parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fast-xml-parser */"./node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/fxp.js");
/* harmony import */var fast_xml_parser__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(fast_xml_parser__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */var _models_CloudWatchServiceException__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/CloudWatchServiceException */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/models/CloudWatchServiceException.js");
/* harmony import */var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/models/models_0.js");





const se_DeleteAlarmsCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteAlarmsInput(input, context),
        [_A]: _DA,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteAnomalyDetectorCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteAnomalyDetectorInput(input, context),
        [_A]: _DAD,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteDashboardsCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteDashboardsInput(input, context),
        [_A]: _DD,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteInsightRulesCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteInsightRulesInput(input, context),
        [_A]: _DIR,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteMetricStreamCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteMetricStreamInput(input, context),
        [_A]: _DMS,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeAlarmHistoryCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeAlarmHistoryInput(input, context),
        [_A]: _DAH,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeAlarmsCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeAlarmsInput(input, context),
        [_A]: _DAe,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeAlarmsForMetricCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeAlarmsForMetricInput(input, context),
        [_A]: _DAFM,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeAnomalyDetectorsCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeAnomalyDetectorsInput(input, context),
        [_A]: _DADe,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeInsightRulesCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeInsightRulesInput(input, context),
        [_A]: _DIRe,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisableAlarmActionsCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisableAlarmActionsInput(input, context),
        [_A]: _DAA,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisableInsightRulesCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisableInsightRulesInput(input, context),
        [_A]: _DIRi,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_EnableAlarmActionsCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableAlarmActionsInput(input, context),
        [_A]: _EAA,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_EnableInsightRulesCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableInsightRulesInput(input, context),
        [_A]: _EIR,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetDashboardCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetDashboardInput(input, context),
        [_A]: _GD,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetInsightRuleReportCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetInsightRuleReportInput(input, context),
        [_A]: _GIRR,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetMetricDataCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetMetricDataInput(input, context),
        [_A]: _GMD,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetMetricStatisticsCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetMetricStatisticsInput(input, context),
        [_A]: _GMS,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetMetricStreamCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetMetricStreamInput(input, context),
        [_A]: _GMSe,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetMetricWidgetImageCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetMetricWidgetImageInput(input, context),
        [_A]: _GMWI,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListDashboardsCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListDashboardsInput(input, context),
        [_A]: _LD,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListManagedInsightRulesCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListManagedInsightRulesInput(input, context),
        [_A]: _LMIR,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListMetricsCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListMetricsInput(input, context),
        [_A]: _LM,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListMetricStreamsCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListMetricStreamsInput(input, context),
        [_A]: _LMS,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListTagsForResourceCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListTagsForResourceInput(input, context),
        [_A]: _LTFR,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutAnomalyDetectorCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_PutAnomalyDetectorInput(input, context),
        [_A]: _PAD,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutCompositeAlarmCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_PutCompositeAlarmInput(input, context),
        [_A]: _PCA,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutDashboardCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_PutDashboardInput(input, context),
        [_A]: _PD,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutInsightRuleCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_PutInsightRuleInput(input, context),
        [_A]: _PIR,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutManagedInsightRulesCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_PutManagedInsightRulesInput(input, context),
        [_A]: _PMIR,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutMetricAlarmCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_PutMetricAlarmInput(input, context),
        [_A]: _PMA,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutMetricDataCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_PutMetricDataInput(input, context),
        [_A]: _PMD,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutMetricStreamCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_PutMetricStreamInput(input, context),
        [_A]: _PMS,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SetAlarmStateCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_SetAlarmStateInput(input, context),
        [_A]: _SAS,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartMetricStreamsCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_StartMetricStreamsInput(input, context),
        [_A]: _SMS,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StopMetricStreamsCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_StopMetricStreamsInput(input, context),
        [_A]: _SMSt,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_TagResourceCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_TagResourceInput(input, context),
        [_A]: _TR,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UntagResourceCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UntagResourceInput(input, context),
        [_A]: _UR,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const de_DeleteAlarmsCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_DeleteAlarmsCommandError(output, context);
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output)
    };
    return response;
};
const de_DeleteAlarmsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "ResourceNotFound":
        case "com.amazonaws.cloudwatch#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_DeleteAnomalyDetectorCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_DeleteAnomalyDetectorCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteAnomalyDetectorOutput(data.DeleteAnomalyDetectorResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
const de_DeleteAnomalyDetectorCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServiceError":
        case "com.amazonaws.cloudwatch#InternalServiceFault":
            throw await de_InternalServiceFaultRes(parsedOutput, context);
        case "InvalidParameterCombination":
        case "com.amazonaws.cloudwatch#InvalidParameterCombinationException":
            throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.cloudwatch#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "MissingParameter":
        case "com.amazonaws.cloudwatch#MissingRequiredParameterException":
            throw await de_MissingRequiredParameterExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cloudwatch#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_DeleteDashboardsCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_DeleteDashboardsCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteDashboardsOutput(data.DeleteDashboardsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
const de_DeleteDashboardsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServiceError":
        case "com.amazonaws.cloudwatch#InternalServiceFault":
            throw await de_InternalServiceFaultRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.cloudwatch#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.cloudwatch#DashboardNotFoundError":
            throw await de_DashboardNotFoundErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_DeleteInsightRulesCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_DeleteInsightRulesCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteInsightRulesOutput(data.DeleteInsightRulesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
const de_DeleteInsightRulesCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InvalidParameterValue":
        case "com.amazonaws.cloudwatch#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "MissingParameter":
        case "com.amazonaws.cloudwatch#MissingRequiredParameterException":
            throw await de_MissingRequiredParameterExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_DeleteMetricStreamCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_DeleteMetricStreamCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteMetricStreamOutput(data.DeleteMetricStreamResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
const de_DeleteMetricStreamCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServiceError":
        case "com.amazonaws.cloudwatch#InternalServiceFault":
            throw await de_InternalServiceFaultRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.cloudwatch#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "MissingParameter":
        case "com.amazonaws.cloudwatch#MissingRequiredParameterException":
            throw await de_MissingRequiredParameterExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_DescribeAlarmHistoryCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_DescribeAlarmHistoryCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAlarmHistoryOutput(data.DescribeAlarmHistoryResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
const de_DescribeAlarmHistoryCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InvalidNextToken":
        case "com.amazonaws.cloudwatch#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_DescribeAlarmsCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_DescribeAlarmsCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAlarmsOutput(data.DescribeAlarmsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
const de_DescribeAlarmsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InvalidNextToken":
        case "com.amazonaws.cloudwatch#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_DescribeAlarmsForMetricCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_DescribeAlarmsForMetricCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAlarmsForMetricOutput(data.DescribeAlarmsForMetricResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
const de_DescribeAlarmsForMetricCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode
    });
};
const de_DescribeAnomalyDetectorsCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_DescribeAnomalyDetectorsCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAnomalyDetectorsOutput(data.DescribeAnomalyDetectorsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
const de_DescribeAnomalyDetectorsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServiceError":
        case "com.amazonaws.cloudwatch#InternalServiceFault":
            throw await de_InternalServiceFaultRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.cloudwatch#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        case "InvalidParameterCombination":
        case "com.amazonaws.cloudwatch#InvalidParameterCombinationException":
            throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.cloudwatch#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_DescribeInsightRulesCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_DescribeInsightRulesCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeInsightRulesOutput(data.DescribeInsightRulesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
const de_DescribeInsightRulesCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InvalidNextToken":
        case "com.amazonaws.cloudwatch#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_DisableAlarmActionsCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_DisableAlarmActionsCommandError(output, context);
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output)
    };
    return response;
};
const de_DisableAlarmActionsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode
    });
};
const de_DisableInsightRulesCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_DisableInsightRulesCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DisableInsightRulesOutput(data.DisableInsightRulesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
const de_DisableInsightRulesCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InvalidParameterValue":
        case "com.amazonaws.cloudwatch#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "MissingParameter":
        case "com.amazonaws.cloudwatch#MissingRequiredParameterException":
            throw await de_MissingRequiredParameterExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_EnableAlarmActionsCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_EnableAlarmActionsCommandError(output, context);
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output)
    };
    return response;
};
const de_EnableAlarmActionsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode
    });
};
const de_EnableInsightRulesCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_EnableInsightRulesCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_EnableInsightRulesOutput(data.EnableInsightRulesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
const de_EnableInsightRulesCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InvalidParameterValue":
        case "com.amazonaws.cloudwatch#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.cloudwatch#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "MissingParameter":
        case "com.amazonaws.cloudwatch#MissingRequiredParameterException":
            throw await de_MissingRequiredParameterExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_GetDashboardCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_GetDashboardCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDashboardOutput(data.GetDashboardResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
const de_GetDashboardCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServiceError":
        case "com.amazonaws.cloudwatch#InternalServiceFault":
            throw await de_InternalServiceFaultRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.cloudwatch#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.cloudwatch#DashboardNotFoundError":
            throw await de_DashboardNotFoundErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_GetInsightRuleReportCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_GetInsightRuleReportCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetInsightRuleReportOutput(data.GetInsightRuleReportResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
const de_GetInsightRuleReportCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InvalidParameterValue":
        case "com.amazonaws.cloudwatch#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "MissingParameter":
        case "com.amazonaws.cloudwatch#MissingRequiredParameterException":
            throw await de_MissingRequiredParameterExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cloudwatch#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_GetMetricDataCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_GetMetricDataCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetMetricDataOutput(data.GetMetricDataResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
const de_GetMetricDataCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InvalidNextToken":
        case "com.amazonaws.cloudwatch#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_GetMetricStatisticsCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_GetMetricStatisticsCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetMetricStatisticsOutput(data.GetMetricStatisticsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
const de_GetMetricStatisticsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServiceError":
        case "com.amazonaws.cloudwatch#InternalServiceFault":
            throw await de_InternalServiceFaultRes(parsedOutput, context);
        case "InvalidParameterCombination":
        case "com.amazonaws.cloudwatch#InvalidParameterCombinationException":
            throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.cloudwatch#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "MissingParameter":
        case "com.amazonaws.cloudwatch#MissingRequiredParameterException":
            throw await de_MissingRequiredParameterExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_GetMetricStreamCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_GetMetricStreamCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetMetricStreamOutput(data.GetMetricStreamResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
const de_GetMetricStreamCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServiceError":
        case "com.amazonaws.cloudwatch#InternalServiceFault":
            throw await de_InternalServiceFaultRes(parsedOutput, context);
        case "InvalidParameterCombination":
        case "com.amazonaws.cloudwatch#InvalidParameterCombinationException":
            throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.cloudwatch#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "MissingParameter":
        case "com.amazonaws.cloudwatch#MissingRequiredParameterException":
            throw await de_MissingRequiredParameterExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cloudwatch#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_GetMetricWidgetImageCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_GetMetricWidgetImageCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetMetricWidgetImageOutput(data.GetMetricWidgetImageResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
const de_GetMetricWidgetImageCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode
    });
};
const de_ListDashboardsCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_ListDashboardsCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListDashboardsOutput(data.ListDashboardsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
const de_ListDashboardsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServiceError":
        case "com.amazonaws.cloudwatch#InternalServiceFault":
            throw await de_InternalServiceFaultRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.cloudwatch#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_ListManagedInsightRulesCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_ListManagedInsightRulesCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListManagedInsightRulesOutput(data.ListManagedInsightRulesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
const de_ListManagedInsightRulesCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InvalidNextToken":
        case "com.amazonaws.cloudwatch#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.cloudwatch#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "MissingParameter":
        case "com.amazonaws.cloudwatch#MissingRequiredParameterException":
            throw await de_MissingRequiredParameterExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_ListMetricsCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_ListMetricsCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListMetricsOutput(data.ListMetricsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
const de_ListMetricsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServiceError":
        case "com.amazonaws.cloudwatch#InternalServiceFault":
            throw await de_InternalServiceFaultRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.cloudwatch#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_ListMetricStreamsCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_ListMetricStreamsCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListMetricStreamsOutput(data.ListMetricStreamsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
const de_ListMetricStreamsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServiceError":
        case "com.amazonaws.cloudwatch#InternalServiceFault":
            throw await de_InternalServiceFaultRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.cloudwatch#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.cloudwatch#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "MissingParameter":
        case "com.amazonaws.cloudwatch#MissingRequiredParameterException":
            throw await de_MissingRequiredParameterExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_ListTagsForResourceCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_ListTagsForResourceCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListTagsForResourceOutput(data.ListTagsForResourceResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
const de_ListTagsForResourceCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServiceError":
        case "com.amazonaws.cloudwatch#InternalServiceFault":
            throw await de_InternalServiceFaultRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.cloudwatch#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cloudwatch#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_PutAnomalyDetectorCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_PutAnomalyDetectorCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutAnomalyDetectorOutput(data.PutAnomalyDetectorResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
const de_PutAnomalyDetectorCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServiceError":
        case "com.amazonaws.cloudwatch#InternalServiceFault":
            throw await de_InternalServiceFaultRes(parsedOutput, context);
        case "InvalidParameterCombination":
        case "com.amazonaws.cloudwatch#InvalidParameterCombinationException":
            throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.cloudwatch#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.cloudwatch#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "MissingParameter":
        case "com.amazonaws.cloudwatch#MissingRequiredParameterException":
            throw await de_MissingRequiredParameterExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_PutCompositeAlarmCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_PutCompositeAlarmCommandError(output, context);
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output)
    };
    return response;
};
const de_PutCompositeAlarmCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "LimitExceeded":
        case "com.amazonaws.cloudwatch#LimitExceededFault":
            throw await de_LimitExceededFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_PutDashboardCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_PutDashboardCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutDashboardOutput(data.PutDashboardResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
const de_PutDashboardCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServiceError":
        case "com.amazonaws.cloudwatch#InternalServiceFault":
            throw await de_InternalServiceFaultRes(parsedOutput, context);
        case "InvalidParameterInput":
        case "com.amazonaws.cloudwatch#DashboardInvalidInputError":
            throw await de_DashboardInvalidInputErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_PutInsightRuleCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_PutInsightRuleCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutInsightRuleOutput(data.PutInsightRuleResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
const de_PutInsightRuleCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InvalidParameterValue":
        case "com.amazonaws.cloudwatch#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.cloudwatch#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "MissingParameter":
        case "com.amazonaws.cloudwatch#MissingRequiredParameterException":
            throw await de_MissingRequiredParameterExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_PutManagedInsightRulesCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_PutManagedInsightRulesCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutManagedInsightRulesOutput(data.PutManagedInsightRulesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
const de_PutManagedInsightRulesCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InvalidParameterValue":
        case "com.amazonaws.cloudwatch#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "MissingParameter":
        case "com.amazonaws.cloudwatch#MissingRequiredParameterException":
            throw await de_MissingRequiredParameterExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_PutMetricAlarmCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_PutMetricAlarmCommandError(output, context);
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output)
    };
    return response;
};
const de_PutMetricAlarmCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "LimitExceeded":
        case "com.amazonaws.cloudwatch#LimitExceededFault":
            throw await de_LimitExceededFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_PutMetricDataCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_PutMetricDataCommandError(output, context);
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output)
    };
    return response;
};
const de_PutMetricDataCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServiceError":
        case "com.amazonaws.cloudwatch#InternalServiceFault":
            throw await de_InternalServiceFaultRes(parsedOutput, context);
        case "InvalidParameterCombination":
        case "com.amazonaws.cloudwatch#InvalidParameterCombinationException":
            throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.cloudwatch#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "MissingParameter":
        case "com.amazonaws.cloudwatch#MissingRequiredParameterException":
            throw await de_MissingRequiredParameterExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_PutMetricStreamCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_PutMetricStreamCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutMetricStreamOutput(data.PutMetricStreamResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
const de_PutMetricStreamCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "ConcurrentModificationException":
        case "com.amazonaws.cloudwatch#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "InternalServiceError":
        case "com.amazonaws.cloudwatch#InternalServiceFault":
            throw await de_InternalServiceFaultRes(parsedOutput, context);
        case "InvalidParameterCombination":
        case "com.amazonaws.cloudwatch#InvalidParameterCombinationException":
            throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.cloudwatch#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "MissingParameter":
        case "com.amazonaws.cloudwatch#MissingRequiredParameterException":
            throw await de_MissingRequiredParameterExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_SetAlarmStateCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_SetAlarmStateCommandError(output, context);
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output)
    };
    return response;
};
const de_SetAlarmStateCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InvalidFormat":
        case "com.amazonaws.cloudwatch#InvalidFormatFault":
            throw await de_InvalidFormatFaultRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.cloudwatch#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_StartMetricStreamsCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_StartMetricStreamsCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartMetricStreamsOutput(data.StartMetricStreamsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
const de_StartMetricStreamsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServiceError":
        case "com.amazonaws.cloudwatch#InternalServiceFault":
            throw await de_InternalServiceFaultRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.cloudwatch#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "MissingParameter":
        case "com.amazonaws.cloudwatch#MissingRequiredParameterException":
            throw await de_MissingRequiredParameterExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_StopMetricStreamsCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_StopMetricStreamsCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StopMetricStreamsOutput(data.StopMetricStreamsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
const de_StopMetricStreamsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServiceError":
        case "com.amazonaws.cloudwatch#InternalServiceFault":
            throw await de_InternalServiceFaultRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.cloudwatch#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "MissingParameter":
        case "com.amazonaws.cloudwatch#MissingRequiredParameterException":
            throw await de_MissingRequiredParameterExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_TagResourceCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_TagResourceCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_TagResourceOutput(data.TagResourceResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
const de_TagResourceCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "ConcurrentModificationException":
        case "com.amazonaws.cloudwatch#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "InternalServiceError":
        case "com.amazonaws.cloudwatch#InternalServiceFault":
            throw await de_InternalServiceFaultRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.cloudwatch#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cloudwatch#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_UntagResourceCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_UntagResourceCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UntagResourceOutput(data.UntagResourceResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
const de_UntagResourceCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "ConcurrentModificationException":
        case "com.amazonaws.cloudwatch#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "InternalServiceError":
        case "com.amazonaws.cloudwatch#InternalServiceFault":
            throw await de_InternalServiceFaultRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.cloudwatch#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cloudwatch#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_ConcurrentModificationExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = de_ConcurrentModificationException(body.Error, context);
    const exception = new ConcurrentModificationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return __decorateServiceException(exception, body);
};
const de_DashboardInvalidInputErrorRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = de_DashboardInvalidInputError(body.Error, context);
    const exception = new DashboardInvalidInputError({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return __decorateServiceException(exception, body);
};
const de_DashboardNotFoundErrorRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = de_DashboardNotFoundError(body.Error, context);
    const exception = new DashboardNotFoundError({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return __decorateServiceException(exception, body);
};
const de_InternalServiceFaultRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = de_InternalServiceFault(body.Error, context);
    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_3__.InternalServiceFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, body);
};
const de_InvalidFormatFaultRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = de_InvalidFormatFault(body.Error, context);
    const exception = new InvalidFormatFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidNextTokenRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = de_InvalidNextToken(body.Error, context);
    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_3__.InvalidNextToken({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, body);
};
const de_InvalidParameterCombinationExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = de_InvalidParameterCombinationException(body.Error, context);
    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_3__.InvalidParameterCombinationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, body);
};
const de_InvalidParameterValueExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = de_InvalidParameterValueException(body.Error, context);
    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_3__.InvalidParameterValueException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = de_LimitExceededException(body.Error, context);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return __decorateServiceException(exception, body);
};
const de_LimitExceededFaultRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = de_LimitExceededFault(body.Error, context);
    const exception = new LimitExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return __decorateServiceException(exception, body);
};
const de_MissingRequiredParameterExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = de_MissingRequiredParameterException(body.Error, context);
    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_3__.MissingRequiredParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, body);
};
const de_ResourceNotFoundRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = de_ResourceNotFound(body.Error, context);
    const exception = new ResourceNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = de_ResourceNotFoundException(body.Error, context);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return __decorateServiceException(exception, body);
};
const se_AlarmNames = (input, context)=>{
    const entries = {};
    let counter = 1;
    for (const entry of input){
        if (entry === null) continue;
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_AlarmTypes = (input, context)=>{
    const entries = {};
    let counter = 1;
    for (const entry of input){
        if (entry === null) continue;
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_AnomalyDetectorConfiguration = (input, context)=>{
    const entries = {};
    if (input[_ETR] != null) {
        const memberEntries = se_AnomalyDetectorExcludedTimeRanges(input[_ETR], context);
        if (input[_ETR]?.length === 0) entries.ExcludedTimeRanges = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `ExcludedTimeRanges.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_MT] != null) entries[_MT] = input[_MT];
    return entries;
};
const se_AnomalyDetectorExcludedTimeRanges = (input, context)=>{
    const entries = {};
    let counter = 1;
    for (const entry of input){
        if (entry === null) continue;
        const memberEntries = se_Range(entry, context);
        Object.entries(memberEntries).forEach(([key, value])=>{
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_AnomalyDetectorTypes = (input, context)=>{
    const entries = {};
    let counter = 1;
    for (const entry of input){
        if (entry === null) continue;
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_Counts = (input, context)=>{
    const entries = {};
    let counter = 1;
    for (const entry of input){
        if (entry === null) continue;
        entries[`member.${counter}`] = __serializeFloat(entry);
        counter++;
    }
    return entries;
};
const se_DashboardNames = (input, context)=>{
    const entries = {};
    let counter = 1;
    for (const entry of input){
        if (entry === null) continue;
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_DeleteAlarmsInput = (input, context)=>{
    const entries = {};
    if (input[_AN] != null) {
        const memberEntries = se_AlarmNames(input[_AN], context);
        if (input[_AN]?.length === 0) entries.AlarmNames = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `AlarmNames.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DeleteAnomalyDetectorInput = (input, context)=>{
    const entries = {};
    if (input[_N] != null) entries[_N] = input[_N];
    if (input[_MN] != null) entries[_MN] = input[_MN];
    if (input[_D] != null) {
        const memberEntries = se_Dimensions(input[_D], context);
        if (input[_D]?.length === 0) entries.Dimensions = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `Dimensions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_S] != null) entries[_S] = input[_S];
    if (input[_SMAD] != null) {
        const memberEntries = se_SingleMetricAnomalyDetector(input[_SMAD], context);
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `SingleMetricAnomalyDetector.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_MMAD] != null) {
        const memberEntries = se_MetricMathAnomalyDetector(input[_MMAD], context);
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `MetricMathAnomalyDetector.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DeleteDashboardsInput = (input, context)=>{
    const entries = {};
    if (input[_DN] != null) {
        const memberEntries = se_DashboardNames(input[_DN], context);
        if (input[_DN]?.length === 0) entries.DashboardNames = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `DashboardNames.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DeleteInsightRulesInput = (input, context)=>{
    const entries = {};
    if (input[_RN] != null) {
        const memberEntries = se_InsightRuleNames(input[_RN], context);
        if (input[_RN]?.length === 0) entries.RuleNames = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `RuleNames.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DeleteMetricStreamInput = (input, context)=>{
    const entries = {};
    if (input[_Na] != null) entries[_Na] = input[_Na];
    return entries;
};
const se_DescribeAlarmHistoryInput = (input, context)=>{
    const entries = {};
    if (input[_ANl] != null) entries[_ANl] = input[_ANl];
    if (input[_AT] != null) {
        const memberEntries = se_AlarmTypes(input[_AT], context);
        if (input[_AT]?.length === 0) entries.AlarmTypes = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `AlarmTypes.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_HIT] != null) entries[_HIT] = input[_HIT];
    if (input[_SD] != null) entries[_SD] = input[_SD].toISOString().split(".")[0] + "Z";
    if (input[_ED] != null) entries[_ED] = input[_ED].toISOString().split(".")[0] + "Z";
    if (input[_MR] != null) entries[_MR] = input[_MR];
    if (input[_NT] != null) entries[_NT] = input[_NT];
    if (input[_SB] != null) entries[_SB] = input[_SB];
    return entries;
};
const se_DescribeAlarmsForMetricInput = (input, context)=>{
    const entries = {};
    if (input[_MN] != null) entries[_MN] = input[_MN];
    if (input[_N] != null) entries[_N] = input[_N];
    if (input[_St] != null) entries[_St] = input[_St];
    if (input[_ES] != null) entries[_ES] = input[_ES];
    if (input[_D] != null) {
        const memberEntries = se_Dimensions(input[_D], context);
        if (input[_D]?.length === 0) entries.Dimensions = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `Dimensions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_P] != null) entries[_P] = input[_P];
    if (input[_U] != null) entries[_U] = input[_U];
    return entries;
};
const se_DescribeAlarmsInput = (input, context)=>{
    const entries = {};
    if (input[_AN] != null) {
        const memberEntries = se_AlarmNames(input[_AN], context);
        if (input[_AN]?.length === 0) entries.AlarmNames = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `AlarmNames.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_ANP] != null) entries[_ANP] = input[_ANP];
    if (input[_AT] != null) {
        const memberEntries = se_AlarmTypes(input[_AT], context);
        if (input[_AT]?.length === 0) entries.AlarmTypes = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `AlarmTypes.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_COAN] != null) entries[_COAN] = input[_COAN];
    if (input[_POAN] != null) entries[_POAN] = input[_POAN];
    if (input[_SV] != null) entries[_SV] = input[_SV];
    if (input[_AP] != null) entries[_AP] = input[_AP];
    if (input[_MR] != null) entries[_MR] = input[_MR];
    if (input[_NT] != null) entries[_NT] = input[_NT];
    return entries;
};
const se_DescribeAnomalyDetectorsInput = (input, context)=>{
    const entries = {};
    if (input[_NT] != null) entries[_NT] = input[_NT];
    if (input[_MRa] != null) entries[_MRa] = input[_MRa];
    if (input[_N] != null) entries[_N] = input[_N];
    if (input[_MN] != null) entries[_MN] = input[_MN];
    if (input[_D] != null) {
        const memberEntries = se_Dimensions(input[_D], context);
        if (input[_D]?.length === 0) entries.Dimensions = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `Dimensions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_ADT] != null) {
        const memberEntries = se_AnomalyDetectorTypes(input[_ADT], context);
        if (input[_ADT]?.length === 0) entries.AnomalyDetectorTypes = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `AnomalyDetectorTypes.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeInsightRulesInput = (input, context)=>{
    const entries = {};
    if (input[_NT] != null) entries[_NT] = input[_NT];
    if (input[_MRa] != null) entries[_MRa] = input[_MRa];
    return entries;
};
const se_Dimension = (input, context)=>{
    const entries = {};
    if (input[_Na] != null) entries[_Na] = input[_Na];
    if (input[_Va] != null) entries[_Va] = input[_Va];
    return entries;
};
const se_DimensionFilter = (input, context)=>{
    const entries = {};
    if (input[_Na] != null) entries[_Na] = input[_Na];
    if (input[_Va] != null) entries[_Va] = input[_Va];
    return entries;
};
const se_DimensionFilters = (input, context)=>{
    const entries = {};
    let counter = 1;
    for (const entry of input){
        if (entry === null) continue;
        const memberEntries = se_DimensionFilter(entry, context);
        Object.entries(memberEntries).forEach(([key, value])=>{
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_Dimensions = (input, context)=>{
    const entries = {};
    let counter = 1;
    for (const entry of input){
        if (entry === null) continue;
        const memberEntries = se_Dimension(entry, context);
        Object.entries(memberEntries).forEach(([key, value])=>{
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_DisableAlarmActionsInput = (input, context)=>{
    const entries = {};
    if (input[_AN] != null) {
        const memberEntries = se_AlarmNames(input[_AN], context);
        if (input[_AN]?.length === 0) entries.AlarmNames = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `AlarmNames.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DisableInsightRulesInput = (input, context)=>{
    const entries = {};
    if (input[_RN] != null) {
        const memberEntries = se_InsightRuleNames(input[_RN], context);
        if (input[_RN]?.length === 0) entries.RuleNames = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `RuleNames.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_EnableAlarmActionsInput = (input, context)=>{
    const entries = {};
    if (input[_AN] != null) {
        const memberEntries = se_AlarmNames(input[_AN], context);
        if (input[_AN]?.length === 0) entries.AlarmNames = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `AlarmNames.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_EnableInsightRulesInput = (input, context)=>{
    const entries = {};
    if (input[_RN] != null) {
        const memberEntries = se_InsightRuleNames(input[_RN], context);
        if (input[_RN]?.length === 0) entries.RuleNames = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `RuleNames.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ExtendedStatistics = (input, context)=>{
    const entries = {};
    let counter = 1;
    for (const entry of input){
        if (entry === null) continue;
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_GetDashboardInput = (input, context)=>{
    const entries = {};
    if (input[_DNa] != null) entries[_DNa] = input[_DNa];
    return entries;
};
const se_GetInsightRuleReportInput = (input, context)=>{
    const entries = {};
    if (input[_RNu] != null) entries[_RNu] = input[_RNu];
    if (input[_ST] != null) entries[_ST] = input[_ST].toISOString().split(".")[0] + "Z";
    if (input[_ET] != null) entries[_ET] = input[_ET].toISOString().split(".")[0] + "Z";
    if (input[_P] != null) entries[_P] = input[_P];
    if (input[_MCC] != null) entries[_MCC] = input[_MCC];
    if (input[_M] != null) {
        const memberEntries = se_InsightRuleMetricList(input[_M], context);
        if (input[_M]?.length === 0) entries.Metrics = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `Metrics.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_OB] != null) entries[_OB] = input[_OB];
    return entries;
};
const se_GetMetricDataInput = (input, context)=>{
    const entries = {};
    if (input[_MDQ] != null) {
        const memberEntries = se_MetricDataQueries(input[_MDQ], context);
        if (input[_MDQ]?.length === 0) entries.MetricDataQueries = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `MetricDataQueries.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_ST] != null) entries[_ST] = input[_ST].toISOString().split(".")[0] + "Z";
    if (input[_ET] != null) entries[_ET] = input[_ET].toISOString().split(".")[0] + "Z";
    if (input[_NT] != null) entries[_NT] = input[_NT];
    if (input[_SB] != null) entries[_SB] = input[_SB];
    if (input[_MD] != null) entries[_MD] = input[_MD];
    if (input[_LO] != null) {
        const memberEntries = se_LabelOptions(input[_LO], context);
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `LabelOptions.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_GetMetricStatisticsInput = (input, context)=>{
    const entries = {};
    if (input[_N] != null) entries[_N] = input[_N];
    if (input[_MN] != null) entries[_MN] = input[_MN];
    if (input[_D] != null) {
        const memberEntries = se_Dimensions(input[_D], context);
        if (input[_D]?.length === 0) entries.Dimensions = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `Dimensions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_ST] != null) entries[_ST] = input[_ST].toISOString().split(".")[0] + "Z";
    if (input[_ET] != null) entries[_ET] = input[_ET].toISOString().split(".")[0] + "Z";
    if (input[_P] != null) entries[_P] = input[_P];
    if (input[_Sta] != null) {
        const memberEntries = se_Statistics(input[_Sta], context);
        if (input[_Sta]?.length === 0) entries.Statistics = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `Statistics.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_ESx] != null) {
        const memberEntries = se_ExtendedStatistics(input[_ESx], context);
        if (input[_ESx]?.length === 0) entries.ExtendedStatistics = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `ExtendedStatistics.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_U] != null) entries[_U] = input[_U];
    return entries;
};
const se_GetMetricStreamInput = (input, context)=>{
    const entries = {};
    if (input[_Na] != null) entries[_Na] = input[_Na];
    return entries;
};
const se_GetMetricWidgetImageInput = (input, context)=>{
    const entries = {};
    if (input[_MW] != null) entries[_MW] = input[_MW];
    if (input[_OF] != null) entries[_OF] = input[_OF];
    return entries;
};
const se_InsightRuleMetricList = (input, context)=>{
    const entries = {};
    let counter = 1;
    for (const entry of input){
        if (entry === null) continue;
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_InsightRuleNames = (input, context)=>{
    const entries = {};
    let counter = 1;
    for (const entry of input){
        if (entry === null) continue;
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_LabelOptions = (input, context)=>{
    const entries = {};
    if (input[_T] != null) entries[_T] = input[_T];
    return entries;
};
const se_ListDashboardsInput = (input, context)=>{
    const entries = {};
    if (input[_DNP] != null) entries[_DNP] = input[_DNP];
    if (input[_NT] != null) entries[_NT] = input[_NT];
    return entries;
};
const se_ListManagedInsightRulesInput = (input, context)=>{
    const entries = {};
    if (input[_RARN] != null) entries[_RARN] = input[_RARN];
    if (input[_NT] != null) entries[_NT] = input[_NT];
    if (input[_MRa] != null) entries[_MRa] = input[_MRa];
    return entries;
};
const se_ListMetricsInput = (input, context)=>{
    const entries = {};
    if (input[_N] != null) entries[_N] = input[_N];
    if (input[_MN] != null) entries[_MN] = input[_MN];
    if (input[_D] != null) {
        const memberEntries = se_DimensionFilters(input[_D], context);
        if (input[_D]?.length === 0) entries.Dimensions = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `Dimensions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) entries[_NT] = input[_NT];
    if (input[_RA] != null) entries[_RA] = input[_RA];
    if (input[_ILA] != null) entries[_ILA] = input[_ILA];
    if (input[_OA] != null) entries[_OA] = input[_OA];
    return entries;
};
const se_ListMetricStreamsInput = (input, context)=>{
    const entries = {};
    if (input[_NT] != null) entries[_NT] = input[_NT];
    if (input[_MRa] != null) entries[_MRa] = input[_MRa];
    return entries;
};
const se_ListTagsForResourceInput = (input, context)=>{
    const entries = {};
    if (input[_RARN] != null) entries[_RARN] = input[_RARN];
    return entries;
};
const se_ManagedRule = (input, context)=>{
    const entries = {};
    if (input[_TN] != null) entries[_TN] = input[_TN];
    if (input[_RARN] != null) entries[_RARN] = input[_RARN];
    if (input[_Ta] != null) {
        const memberEntries = se_TagList(input[_Ta], context);
        if (input[_Ta]?.length === 0) entries.Tags = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ManagedRules = (input, context)=>{
    const entries = {};
    let counter = 1;
    for (const entry of input){
        if (entry === null) continue;
        const memberEntries = se_ManagedRule(entry, context);
        Object.entries(memberEntries).forEach(([key, value])=>{
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_Metric = (input, context)=>{
    const entries = {};
    if (input[_N] != null) entries[_N] = input[_N];
    if (input[_MN] != null) entries[_MN] = input[_MN];
    if (input[_D] != null) {
        const memberEntries = se_Dimensions(input[_D], context);
        if (input[_D]?.length === 0) entries.Dimensions = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `Dimensions.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_MetricData = (input, context)=>{
    const entries = {};
    let counter = 1;
    for (const entry of input){
        if (entry === null) continue;
        const memberEntries = se_MetricDatum(entry, context);
        Object.entries(memberEntries).forEach(([key, value])=>{
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_MetricDataQueries = (input, context)=>{
    const entries = {};
    let counter = 1;
    for (const entry of input){
        if (entry === null) continue;
        const memberEntries = se_MetricDataQuery(entry, context);
        Object.entries(memberEntries).forEach(([key, value])=>{
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_MetricDataQuery = (input, context)=>{
    const entries = {};
    if (input[_I] != null) entries[_I] = input[_I];
    if (input[_MS] != null) {
        const memberEntries = se_MetricStat(input[_MS], context);
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `MetricStat.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_E] != null) entries[_E] = input[_E];
    if (input[_L] != null) entries[_L] = input[_L];
    if (input[_RD] != null) entries[_RD] = input[_RD];
    if (input[_P] != null) entries[_P] = input[_P];
    if (input[_AI] != null) entries[_AI] = input[_AI];
    return entries;
};
const se_MetricDatum = (input, context)=>{
    const entries = {};
    if (input[_MN] != null) entries[_MN] = input[_MN];
    if (input[_D] != null) {
        const memberEntries = se_Dimensions(input[_D], context);
        if (input[_D]?.length === 0) entries.Dimensions = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `Dimensions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_Ti] != null) entries[_Ti] = input[_Ti].toISOString().split(".")[0] + "Z";
    if (input[_Va] != null) entries[_Va] = __serializeFloat(input[_Va]);
    if (input[_SVt] != null) {
        const memberEntries = se_StatisticSet(input[_SVt], context);
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `StatisticValues.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_Val] != null) {
        const memberEntries = se_Values(input[_Val], context);
        if (input[_Val]?.length === 0) entries.Values = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `Values.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_C] != null) {
        const memberEntries = se_Counts(input[_C], context);
        if (input[_C]?.length === 0) entries.Counts = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `Counts.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_U] != null) entries[_U] = input[_U];
    if (input[_SR] != null) entries[_SR] = input[_SR];
    return entries;
};
const se_MetricMathAnomalyDetector = (input, context)=>{
    const entries = {};
    if (input[_MDQ] != null) {
        const memberEntries = se_MetricDataQueries(input[_MDQ], context);
        if (input[_MDQ]?.length === 0) entries.MetricDataQueries = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `MetricDataQueries.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_MetricStat = (input, context)=>{
    const entries = {};
    if (input[_Me] != null) {
        const memberEntries = se_Metric(input[_Me], context);
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `Metric.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_P] != null) entries[_P] = input[_P];
    if (input[_S] != null) entries[_S] = input[_S];
    if (input[_U] != null) entries[_U] = input[_U];
    return entries;
};
const se_MetricStreamFilter = (input, context)=>{
    const entries = {};
    if (input[_N] != null) entries[_N] = input[_N];
    if (input[_MNe] != null) {
        const memberEntries = se_MetricStreamFilterMetricNames(input[_MNe], context);
        if (input[_MNe]?.length === 0) entries.MetricNames = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `MetricNames.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_MetricStreamFilterMetricNames = (input, context)=>{
    const entries = {};
    let counter = 1;
    for (const entry of input){
        if (entry === null) continue;
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_MetricStreamFilters = (input, context)=>{
    const entries = {};
    let counter = 1;
    for (const entry of input){
        if (entry === null) continue;
        const memberEntries = se_MetricStreamFilter(entry, context);
        Object.entries(memberEntries).forEach(([key, value])=>{
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_MetricStreamNames = (input, context)=>{
    const entries = {};
    let counter = 1;
    for (const entry of input){
        if (entry === null) continue;
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_MetricStreamStatisticsAdditionalStatistics = (input, context)=>{
    const entries = {};
    let counter = 1;
    for (const entry of input){
        if (entry === null) continue;
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_MetricStreamStatisticsConfiguration = (input, context)=>{
    const entries = {};
    if (input[_IM] != null) {
        const memberEntries = se_MetricStreamStatisticsIncludeMetrics(input[_IM], context);
        if (input[_IM]?.length === 0) entries.IncludeMetrics = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `IncludeMetrics.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_AS] != null) {
        const memberEntries = se_MetricStreamStatisticsAdditionalStatistics(input[_AS], context);
        if (input[_AS]?.length === 0) entries.AdditionalStatistics = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `AdditionalStatistics.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_MetricStreamStatisticsConfigurations = (input, context)=>{
    const entries = {};
    let counter = 1;
    for (const entry of input){
        if (entry === null) continue;
        const memberEntries = se_MetricStreamStatisticsConfiguration(entry, context);
        Object.entries(memberEntries).forEach(([key, value])=>{
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_MetricStreamStatisticsIncludeMetrics = (input, context)=>{
    const entries = {};
    let counter = 1;
    for (const entry of input){
        if (entry === null) continue;
        const memberEntries = se_MetricStreamStatisticsMetric(entry, context);
        Object.entries(memberEntries).forEach(([key, value])=>{
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_MetricStreamStatisticsMetric = (input, context)=>{
    const entries = {};
    if (input[_N] != null) entries[_N] = input[_N];
    if (input[_MN] != null) entries[_MN] = input[_MN];
    return entries;
};
const se_PutAnomalyDetectorInput = (input, context)=>{
    const entries = {};
    if (input[_N] != null) entries[_N] = input[_N];
    if (input[_MN] != null) entries[_MN] = input[_MN];
    if (input[_D] != null) {
        const memberEntries = se_Dimensions(input[_D], context);
        if (input[_D]?.length === 0) entries.Dimensions = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `Dimensions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_S] != null) entries[_S] = input[_S];
    if (input[_Co] != null) {
        const memberEntries = se_AnomalyDetectorConfiguration(input[_Co], context);
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `Configuration.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_SMAD] != null) {
        const memberEntries = se_SingleMetricAnomalyDetector(input[_SMAD], context);
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `SingleMetricAnomalyDetector.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_MMAD] != null) {
        const memberEntries = se_MetricMathAnomalyDetector(input[_MMAD], context);
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `MetricMathAnomalyDetector.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_PutCompositeAlarmInput = (input, context)=>{
    const entries = {};
    if (input[_AE] != null) entries[_AE] = input[_AE];
    if (input[_AA] != null) {
        const memberEntries = se_ResourceList(input[_AA], context);
        if (input[_AA]?.length === 0) entries.AlarmActions = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `AlarmActions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_AD] != null) entries[_AD] = input[_AD];
    if (input[_ANl] != null) entries[_ANl] = input[_ANl];
    if (input[_AR] != null) entries[_AR] = input[_AR];
    if (input[_IDA] != null) {
        const memberEntries = se_ResourceList(input[_IDA], context);
        if (input[_IDA]?.length === 0) entries.InsufficientDataActions = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `InsufficientDataActions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_OKA] != null) {
        const memberEntries = se_ResourceList(input[_OKA], context);
        if (input[_OKA]?.length === 0) entries.OKActions = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `OKActions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_Ta] != null) {
        const memberEntries = se_TagList(input[_Ta], context);
        if (input[_Ta]?.length === 0) entries.Tags = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_ASc] != null) entries[_ASc] = input[_ASc];
    if (input[_ASWP] != null) entries[_ASWP] = input[_ASWP];
    if (input[_ASEP] != null) entries[_ASEP] = input[_ASEP];
    return entries;
};
const se_PutDashboardInput = (input, context)=>{
    const entries = {};
    if (input[_DNa] != null) entries[_DNa] = input[_DNa];
    if (input[_DB] != null) entries[_DB] = input[_DB];
    return entries;
};
const se_PutInsightRuleInput = (input, context)=>{
    const entries = {};
    if (input[_RNu] != null) entries[_RNu] = input[_RNu];
    if (input[_RS] != null) entries[_RS] = input[_RS];
    if (input[_RDu] != null) entries[_RDu] = input[_RDu];
    if (input[_Ta] != null) {
        const memberEntries = se_TagList(input[_Ta], context);
        if (input[_Ta]?.length === 0) entries.Tags = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_PutManagedInsightRulesInput = (input, context)=>{
    const entries = {};
    if (input[_MRan] != null) {
        const memberEntries = se_ManagedRules(input[_MRan], context);
        if (input[_MRan]?.length === 0) entries.ManagedRules = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `ManagedRules.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_PutMetricAlarmInput = (input, context)=>{
    const entries = {};
    if (input[_ANl] != null) entries[_ANl] = input[_ANl];
    if (input[_AD] != null) entries[_AD] = input[_AD];
    if (input[_AE] != null) entries[_AE] = input[_AE];
    if (input[_OKA] != null) {
        const memberEntries = se_ResourceList(input[_OKA], context);
        if (input[_OKA]?.length === 0) entries.OKActions = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `OKActions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_AA] != null) {
        const memberEntries = se_ResourceList(input[_AA], context);
        if (input[_AA]?.length === 0) entries.AlarmActions = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `AlarmActions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_IDA] != null) {
        const memberEntries = se_ResourceList(input[_IDA], context);
        if (input[_IDA]?.length === 0) entries.InsufficientDataActions = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `InsufficientDataActions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_MN] != null) entries[_MN] = input[_MN];
    if (input[_N] != null) entries[_N] = input[_N];
    if (input[_St] != null) entries[_St] = input[_St];
    if (input[_ES] != null) entries[_ES] = input[_ES];
    if (input[_D] != null) {
        const memberEntries = se_Dimensions(input[_D], context);
        if (input[_D]?.length === 0) entries.Dimensions = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `Dimensions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_P] != null) entries[_P] = input[_P];
    if (input[_U] != null) entries[_U] = input[_U];
    if (input[_EP] != null) entries[_EP] = input[_EP];
    if (input[_DTA] != null) entries[_DTA] = input[_DTA];
    if (input[_Th] != null) entries[_Th] = __serializeFloat(input[_Th]);
    if (input[_CO] != null) entries[_CO] = input[_CO];
    if (input[_TMD] != null) entries[_TMD] = input[_TMD];
    if (input[_ELSCP] != null) entries[_ELSCP] = input[_ELSCP];
    if (input[_M] != null) {
        const memberEntries = se_MetricDataQueries(input[_M], context);
        if (input[_M]?.length === 0) entries.Metrics = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `Metrics.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_Ta] != null) {
        const memberEntries = se_TagList(input[_Ta], context);
        if (input[_Ta]?.length === 0) entries.Tags = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_TMI] != null) entries[_TMI] = input[_TMI];
    return entries;
};
const se_PutMetricDataInput = (input, context)=>{
    const entries = {};
    if (input[_N] != null) entries[_N] = input[_N];
    if (input[_MDe] != null) {
        const memberEntries = se_MetricData(input[_MDe], context);
        if (input[_MDe]?.length === 0) entries.MetricData = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `MetricData.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_PutMetricStreamInput = (input, context)=>{
    const entries = {};
    if (input[_Na] != null) entries[_Na] = input[_Na];
    if (input[_IF] != null) {
        const memberEntries = se_MetricStreamFilters(input[_IF], context);
        if (input[_IF]?.length === 0) entries.IncludeFilters = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `IncludeFilters.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_EF] != null) {
        const memberEntries = se_MetricStreamFilters(input[_EF], context);
        if (input[_EF]?.length === 0) entries.ExcludeFilters = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `ExcludeFilters.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_FA] != null) entries[_FA] = input[_FA];
    if (input[_RAo] != null) entries[_RAo] = input[_RAo];
    if (input[_OF] != null) entries[_OF] = input[_OF];
    if (input[_Ta] != null) {
        const memberEntries = se_TagList(input[_Ta], context);
        if (input[_Ta]?.length === 0) entries.Tags = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_SC] != null) {
        const memberEntries = se_MetricStreamStatisticsConfigurations(input[_SC], context);
        if (input[_SC]?.length === 0) entries.StatisticsConfigurations = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `StatisticsConfigurations.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_ILAM] != null) entries[_ILAM] = input[_ILAM];
    return entries;
};
const se_Range = (input, context)=>{
    const entries = {};
    if (input[_ST] != null) entries[_ST] = input[_ST].toISOString().split(".")[0] + "Z";
    if (input[_ET] != null) entries[_ET] = input[_ET].toISOString().split(".")[0] + "Z";
    return entries;
};
const se_ResourceList = (input, context)=>{
    const entries = {};
    let counter = 1;
    for (const entry of input){
        if (entry === null) continue;
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_SetAlarmStateInput = (input, context)=>{
    const entries = {};
    if (input[_ANl] != null) entries[_ANl] = input[_ANl];
    if (input[_SV] != null) entries[_SV] = input[_SV];
    if (input[_SRt] != null) entries[_SRt] = input[_SRt];
    if (input[_SRD] != null) entries[_SRD] = input[_SRD];
    return entries;
};
const se_SingleMetricAnomalyDetector = (input, context)=>{
    const entries = {};
    if (input[_N] != null) entries[_N] = input[_N];
    if (input[_MN] != null) entries[_MN] = input[_MN];
    if (input[_D] != null) {
        const memberEntries = se_Dimensions(input[_D], context);
        if (input[_D]?.length === 0) entries.Dimensions = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `Dimensions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_S] != null) entries[_S] = input[_S];
    return entries;
};
const se_StartMetricStreamsInput = (input, context)=>{
    const entries = {};
    if (input[_Nam] != null) {
        const memberEntries = se_MetricStreamNames(input[_Nam], context);
        if (input[_Nam]?.length === 0) entries.Names = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `Names.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_Statistics = (input, context)=>{
    const entries = {};
    let counter = 1;
    for (const entry of input){
        if (entry === null) continue;
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_StatisticSet = (input, context)=>{
    const entries = {};
    if (input[_SCa] != null) entries[_SCa] = __serializeFloat(input[_SCa]);
    if (input[_Su] != null) entries[_Su] = __serializeFloat(input[_Su]);
    if (input[_Mi] != null) entries[_Mi] = __serializeFloat(input[_Mi]);
    if (input[_Ma] != null) entries[_Ma] = __serializeFloat(input[_Ma]);
    return entries;
};
const se_StopMetricStreamsInput = (input, context)=>{
    const entries = {};
    if (input[_Nam] != null) {
        const memberEntries = se_MetricStreamNames(input[_Nam], context);
        if (input[_Nam]?.length === 0) entries.Names = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `Names.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_Tag = (input, context)=>{
    const entries = {};
    if (input[_K] != null) entries[_K] = input[_K];
    if (input[_Va] != null) entries[_Va] = input[_Va];
    return entries;
};
const se_TagKeyList = (input, context)=>{
    const entries = {};
    let counter = 1;
    for (const entry of input){
        if (entry === null) continue;
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_TagList = (input, context)=>{
    const entries = {};
    let counter = 1;
    for (const entry of input){
        if (entry === null) continue;
        const memberEntries = se_Tag(entry, context);
        Object.entries(memberEntries).forEach(([key, value])=>{
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_TagResourceInput = (input, context)=>{
    const entries = {};
    if (input[_RARN] != null) entries[_RARN] = input[_RARN];
    if (input[_Ta] != null) {
        const memberEntries = se_TagList(input[_Ta], context);
        if (input[_Ta]?.length === 0) entries.Tags = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_UntagResourceInput = (input, context)=>{
    const entries = {};
    if (input[_RARN] != null) entries[_RARN] = input[_RARN];
    if (input[_TK] != null) {
        const memberEntries = se_TagKeyList(input[_TK], context);
        if (input[_TK]?.length === 0) entries.TagKeys = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `TagKeys.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_Values = (input, context)=>{
    const entries = {};
    let counter = 1;
    for (const entry of input){
        if (entry === null) continue;
        entries[`member.${counter}`] = __serializeFloat(entry);
        counter++;
    }
    return entries;
};
const de_AlarmHistoryItem = (output, context)=>{
    const contents = {};
    if (output[_ANl] != null) contents[_ANl] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_ANl]);
    if (output[_ATl] != null) contents[_ATl] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_ATl]);
    if (output[_Ti] != null) contents[_Ti] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTimeWithOffset)(output[_Ti]));
    if (output[_HIT] != null) contents[_HIT] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_HIT]);
    if (output[_HS] != null) contents[_HS] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_HS]);
    if (output[_HD] != null) contents[_HD] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_HD]);
    return contents;
};
const de_AlarmHistoryItems = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_AlarmHistoryItem(entry, context);
    });
};
const de_AnomalyDetector = (output, context)=>{
    const contents = {};
    if (output[_N] != null) contents[_N] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_N]);
    if (output[_MN] != null) contents[_MN] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_MN]);
    if (output.Dimensions === "") contents[_D] = [];
    else if (output[_D] != null && output[_D][_m] != null) contents[_D] = de_Dimensions((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[_D][_m]), context);
    if (output[_S] != null) contents[_S] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_S]);
    if (output[_Co] != null) contents[_Co] = de_AnomalyDetectorConfiguration(output[_Co], context);
    if (output[_SV] != null) contents[_SV] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_SV]);
    if (output[_SMAD] != null) contents[_SMAD] = de_SingleMetricAnomalyDetector(output[_SMAD], context);
    if (output[_MMAD] != null) contents[_MMAD] = de_MetricMathAnomalyDetector(output[_MMAD], context);
    return contents;
};
const de_AnomalyDetectorConfiguration = (output, context)=>{
    const contents = {};
    if (output.ExcludedTimeRanges === "") contents[_ETR] = [];
    else if (output[_ETR] != null && output[_ETR][_m] != null) contents[_ETR] = de_AnomalyDetectorExcludedTimeRanges((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[_ETR][_m]), context);
    if (output[_MT] != null) contents[_MT] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_MT]);
    return contents;
};
const de_AnomalyDetectorExcludedTimeRanges = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_Range(entry, context);
    });
};
const de_AnomalyDetectors = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_AnomalyDetector(entry, context);
    });
};
const de_BatchFailures = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_PartialFailure(entry, context);
    });
};
const de_CompositeAlarm = (output, context)=>{
    const contents = {};
    if (output[_AE] != null) contents[_AE] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output[_AE]);
    if (output.AlarmActions === "") contents[_AA] = [];
    else if (output[_AA] != null && output[_AA][_m] != null) contents[_AA] = de_ResourceList((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[_AA][_m]), context);
    if (output[_AAl] != null) contents[_AAl] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_AAl]);
    if (output[_ACUT] != null) contents[_ACUT] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTimeWithOffset)(output[_ACUT]));
    if (output[_AD] != null) contents[_AD] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_AD]);
    if (output[_ANl] != null) contents[_ANl] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_ANl]);
    if (output[_AR] != null) contents[_AR] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_AR]);
    if (output.InsufficientDataActions === "") contents[_IDA] = [];
    else if (output[_IDA] != null && output[_IDA][_m] != null) contents[_IDA] = de_ResourceList((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[_IDA][_m]), context);
    if (output.OKActions === "") contents[_OKA] = [];
    else if (output[_OKA] != null && output[_OKA][_m] != null) contents[_OKA] = de_ResourceList((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[_OKA][_m]), context);
    if (output[_SRt] != null) contents[_SRt] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_SRt]);
    if (output[_SRD] != null) contents[_SRD] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_SRD]);
    if (output[_SUT] != null) contents[_SUT] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTimeWithOffset)(output[_SUT]));
    if (output[_SV] != null) contents[_SV] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_SV]);
    if (output[_STT] != null) contents[_STT] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTimeWithOffset)(output[_STT]));
    if (output[_ASB] != null) contents[_ASB] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_ASB]);
    if (output[_ASR] != null) contents[_ASR] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_ASR]);
    if (output[_ASc] != null) contents[_ASc] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_ASc]);
    if (output[_ASWP] != null) contents[_ASWP] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output[_ASWP]);
    if (output[_ASEP] != null) contents[_ASEP] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output[_ASEP]);
    return contents;
};
const de_CompositeAlarms = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_CompositeAlarm(entry, context);
    });
};
const de_ConcurrentModificationException = (output, context)=>{
    const contents = {};
    if (output[_Mes] != null) contents[_Mes] = __expectString(output[_Mes]);
    return contents;
};
const de_DashboardEntries = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_DashboardEntry(entry, context);
    });
};
const de_DashboardEntry = (output, context)=>{
    const contents = {};
    if (output[_DNa] != null) contents[_DNa] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_DNa]);
    if (output[_DAa] != null) contents[_DAa] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_DAa]);
    if (output[_LMa] != null) contents[_LMa] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTimeWithOffset)(output[_LMa]));
    if (output[_Si] != null) contents[_Si] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseLong)(output[_Si]);
    return contents;
};
const de_DashboardInvalidInputError = (output, context)=>{
    const contents = {};
    if (output[_me] != null) contents[_me] = __expectString(output[_me]);
    if (output.dashboardValidationMessages === "") contents[_dVM] = [];
    else if (output[_dVM] != null && output[_dVM][_m] != null) contents[_dVM] = de_DashboardValidationMessages(__getArrayIfSingleItem(output[_dVM][_m]), context);
    return contents;
};
const de_DashboardNotFoundError = (output, context)=>{
    const contents = {};
    if (output[_me] != null) contents[_me] = __expectString(output[_me]);
    return contents;
};
const de_DashboardValidationMessage = (output, context)=>{
    const contents = {};
    if (output[_DP] != null) contents[_DP] = __expectString(output[_DP]);
    if (output[_Mes] != null) contents[_Mes] = __expectString(output[_Mes]);
    return contents;
};
const de_DashboardValidationMessages = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_DashboardValidationMessage(entry, context);
    });
};
const de_Datapoint = (output, context)=>{
    const contents = {};
    if (output[_Ti] != null) contents[_Ti] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_Ti]));
    if (output[_SCa] != null) contents[_SCa] = __strictParseFloat(output[_SCa]);
    if (output[_Av] != null) contents[_Av] = __strictParseFloat(output[_Av]);
    if (output[_Su] != null) contents[_Su] = __strictParseFloat(output[_Su]);
    if (output[_Mi] != null) contents[_Mi] = __strictParseFloat(output[_Mi]);
    if (output[_Ma] != null) contents[_Ma] = __strictParseFloat(output[_Ma]);
    if (output[_U] != null) contents[_U] = __expectString(output[_U]);
    if (output.ExtendedStatistics === "") contents[_ESx] = {};
    else if (output[_ESx] != null && output[_ESx][_e] != null) contents[_ESx] = de_DatapointValueMap(__getArrayIfSingleItem(output[_ESx][_e]), context);
    return contents;
};
const de_Datapoints = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_Datapoint(entry, context);
    });
};
const de_DatapointValueMap = (output, context)=>{
    return output.reduce((acc, pair)=>{
        if (pair["value"] === null) return acc;
        acc[pair["key"]] = __strictParseFloat(pair["value"]);
        return acc;
    }, {});
};
const de_DatapointValues = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseFloat)(entry);
    });
};
const de_DeleteAnomalyDetectorOutput = (output, context)=>{
    const contents = {};
    return contents;
};
const de_DeleteDashboardsOutput = (output, context)=>{
    const contents = {};
    return contents;
};
const de_DeleteInsightRulesOutput = (output, context)=>{
    const contents = {};
    if (output.Failures === "") contents[_F] = [];
    else if (output[_F] != null && output[_F][_m] != null) contents[_F] = de_BatchFailures(__getArrayIfSingleItem(output[_F][_m]), context);
    return contents;
};
const de_DeleteMetricStreamOutput = (output, context)=>{
    const contents = {};
    return contents;
};
const de_DescribeAlarmHistoryOutput = (output, context)=>{
    const contents = {};
    if (output.AlarmHistoryItems === "") contents[_AHI] = [];
    else if (output[_AHI] != null && output[_AHI][_m] != null) contents[_AHI] = de_AlarmHistoryItems((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[_AHI][_m]), context);
    if (output[_NT] != null) contents[_NT] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_NT]);
    return contents;
};
const de_DescribeAlarmsForMetricOutput = (output, context)=>{
    const contents = {};
    if (output.MetricAlarms === "") contents[_MA] = [];
    else if (output[_MA] != null && output[_MA][_m] != null) contents[_MA] = de_MetricAlarms(__getArrayIfSingleItem(output[_MA][_m]), context);
    return contents;
};
const de_DescribeAlarmsOutput = (output, context)=>{
    const contents = {};
    if (output.CompositeAlarms === "") contents[_CA] = [];
    else if (output[_CA] != null && output[_CA][_m] != null) contents[_CA] = de_CompositeAlarms((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[_CA][_m]), context);
    if (output.MetricAlarms === "") contents[_MA] = [];
    else if (output[_MA] != null && output[_MA][_m] != null) contents[_MA] = de_MetricAlarms((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[_MA][_m]), context);
    if (output[_NT] != null) contents[_NT] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_NT]);
    return contents;
};
const de_DescribeAnomalyDetectorsOutput = (output, context)=>{
    const contents = {};
    if (output.AnomalyDetectors === "") contents[_ADn] = [];
    else if (output[_ADn] != null && output[_ADn][_m] != null) contents[_ADn] = de_AnomalyDetectors((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[_ADn][_m]), context);
    if (output[_NT] != null) contents[_NT] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_NT]);
    return contents;
};
const de_DescribeInsightRulesOutput = (output, context)=>{
    const contents = {};
    if (output[_NT] != null) contents[_NT] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_NT]);
    if (output.InsightRules === "") contents[_IR] = [];
    else if (output[_IR] != null && output[_IR][_m] != null) contents[_IR] = de_InsightRules((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[_IR][_m]), context);
    return contents;
};
const de_Dimension = (output, context)=>{
    const contents = {};
    if (output[_Na] != null) contents[_Na] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_Na]);
    if (output[_Va] != null) contents[_Va] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_Va]);
    return contents;
};
const de_Dimensions = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_Dimension(entry, context);
    });
};
const de_DisableInsightRulesOutput = (output, context)=>{
    const contents = {};
    if (output.Failures === "") contents[_F] = [];
    else if (output[_F] != null && output[_F][_m] != null) contents[_F] = de_BatchFailures(__getArrayIfSingleItem(output[_F][_m]), context);
    return contents;
};
const de_EnableInsightRulesOutput = (output, context)=>{
    const contents = {};
    if (output.Failures === "") contents[_F] = [];
    else if (output[_F] != null && output[_F][_m] != null) contents[_F] = de_BatchFailures(__getArrayIfSingleItem(output[_F][_m]), context);
    return contents;
};
const de_GetDashboardOutput = (output, context)=>{
    const contents = {};
    if (output[_DAa] != null) contents[_DAa] = __expectString(output[_DAa]);
    if (output[_DB] != null) contents[_DB] = __expectString(output[_DB]);
    if (output[_DNa] != null) contents[_DNa] = __expectString(output[_DNa]);
    return contents;
};
const de_GetInsightRuleReportOutput = (output, context)=>{
    const contents = {};
    if (output.KeyLabels === "") contents[_KL] = [];
    else if (output[_KL] != null && output[_KL][_m] != null) contents[_KL] = de_InsightRuleContributorKeyLabels(__getArrayIfSingleItem(output[_KL][_m]), context);
    if (output[_ASg] != null) contents[_ASg] = __expectString(output[_ASg]);
    if (output[_AV] != null) contents[_AV] = __strictParseFloat(output[_AV]);
    if (output[_AUC] != null) contents[_AUC] = __strictParseLong(output[_AUC]);
    if (output.Contributors === "") contents[_Con] = [];
    else if (output[_Con] != null && output[_Con][_m] != null) contents[_Con] = de_InsightRuleContributors(__getArrayIfSingleItem(output[_Con][_m]), context);
    if (output.MetricDatapoints === "") contents[_MDet] = [];
    else if (output[_MDet] != null && output[_MDet][_m] != null) contents[_MDet] = de_InsightRuleMetricDatapoints(__getArrayIfSingleItem(output[_MDet][_m]), context);
    return contents;
};
const de_GetMetricDataOutput = (output, context)=>{
    const contents = {};
    if (output.MetricDataResults === "") contents[_MDR] = [];
    else if (output[_MDR] != null && output[_MDR][_m] != null) contents[_MDR] = de_MetricDataResults((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[_MDR][_m]), context);
    if (output[_NT] != null) contents[_NT] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_NT]);
    if (output.Messages === "") contents[_Mess] = [];
    else if (output[_Mess] != null && output[_Mess][_m] != null) contents[_Mess] = de_MetricDataResultMessages((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[_Mess][_m]), context);
    return contents;
};
const de_GetMetricStatisticsOutput = (output, context)=>{
    const contents = {};
    if (output[_L] != null) contents[_L] = __expectString(output[_L]);
    if (output.Datapoints === "") contents[_Da] = [];
    else if (output[_Da] != null && output[_Da][_m] != null) contents[_Da] = de_Datapoints(__getArrayIfSingleItem(output[_Da][_m]), context);
    return contents;
};
const de_GetMetricStreamOutput = (output, context)=>{
    const contents = {};
    if (output[_Ar] != null) contents[_Ar] = __expectString(output[_Ar]);
    if (output[_Na] != null) contents[_Na] = __expectString(output[_Na]);
    if (output.IncludeFilters === "") contents[_IF] = [];
    else if (output[_IF] != null && output[_IF][_m] != null) contents[_IF] = de_MetricStreamFilters(__getArrayIfSingleItem(output[_IF][_m]), context);
    if (output.ExcludeFilters === "") contents[_EF] = [];
    else if (output[_EF] != null && output[_EF][_m] != null) contents[_EF] = de_MetricStreamFilters(__getArrayIfSingleItem(output[_EF][_m]), context);
    if (output[_FA] != null) contents[_FA] = __expectString(output[_FA]);
    if (output[_RAo] != null) contents[_RAo] = __expectString(output[_RAo]);
    if (output[_Stat] != null) contents[_Stat] = __expectString(output[_Stat]);
    if (output[_CD] != null) contents[_CD] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_CD]));
    if (output[_LUD] != null) contents[_LUD] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_LUD]));
    if (output[_OF] != null) contents[_OF] = __expectString(output[_OF]);
    if (output.StatisticsConfigurations === "") contents[_SC] = [];
    else if (output[_SC] != null && output[_SC][_m] != null) contents[_SC] = de_MetricStreamStatisticsConfigurations(__getArrayIfSingleItem(output[_SC][_m]), context);
    if (output[_ILAM] != null) contents[_ILAM] = __parseBoolean(output[_ILAM]);
    return contents;
};
const de_GetMetricWidgetImageOutput = (output, context)=>{
    const contents = {};
    if (output[_MWI] != null) contents[_MWI] = context.base64Decoder(output[_MWI]);
    return contents;
};
const de_InsightRule = (output, context)=>{
    const contents = {};
    if (output[_Na] != null) contents[_Na] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_Na]);
    if (output[_Stat] != null) contents[_Stat] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_Stat]);
    if (output[_Sc] != null) contents[_Sc] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_Sc]);
    if (output[_De] != null) contents[_De] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_De]);
    if (output[_MRana] != null) contents[_MRana] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output[_MRana]);
    return contents;
};
const de_InsightRuleContributor = (output, context)=>{
    const contents = {};
    if (output.Keys === "") contents[_Ke] = [];
    else if (output[_Ke] != null && output[_Ke][_m] != null) contents[_Ke] = de_InsightRuleContributorKeys(__getArrayIfSingleItem(output[_Ke][_m]), context);
    if (output[_AAV] != null) contents[_AAV] = __strictParseFloat(output[_AAV]);
    if (output.Datapoints === "") contents[_Da] = [];
    else if (output[_Da] != null && output[_Da][_m] != null) contents[_Da] = de_InsightRuleContributorDatapoints(__getArrayIfSingleItem(output[_Da][_m]), context);
    return contents;
};
const de_InsightRuleContributorDatapoint = (output, context)=>{
    const contents = {};
    if (output[_Ti] != null) contents[_Ti] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_Ti]));
    if (output[_AVp] != null) contents[_AVp] = __strictParseFloat(output[_AVp]);
    return contents;
};
const de_InsightRuleContributorDatapoints = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_InsightRuleContributorDatapoint(entry, context);
    });
};
const de_InsightRuleContributorKeyLabels = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return __expectString(entry);
    });
};
const de_InsightRuleContributorKeys = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return __expectString(entry);
    });
};
const de_InsightRuleContributors = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_InsightRuleContributor(entry, context);
    });
};
const de_InsightRuleMetricDatapoint = (output, context)=>{
    const contents = {};
    if (output[_Ti] != null) contents[_Ti] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_Ti]));
    if (output[_UC] != null) contents[_UC] = __strictParseFloat(output[_UC]);
    if (output[_MCV] != null) contents[_MCV] = __strictParseFloat(output[_MCV]);
    if (output[_SCa] != null) contents[_SCa] = __strictParseFloat(output[_SCa]);
    if (output[_Av] != null) contents[_Av] = __strictParseFloat(output[_Av]);
    if (output[_Su] != null) contents[_Su] = __strictParseFloat(output[_Su]);
    if (output[_Mi] != null) contents[_Mi] = __strictParseFloat(output[_Mi]);
    if (output[_Ma] != null) contents[_Ma] = __strictParseFloat(output[_Ma]);
    return contents;
};
const de_InsightRuleMetricDatapoints = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_InsightRuleMetricDatapoint(entry, context);
    });
};
const de_InsightRules = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_InsightRule(entry, context);
    });
};
const de_InternalServiceFault = (output, context)=>{
    const contents = {};
    if (output[_Mes] != null) contents[_Mes] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_Mes]);
    return contents;
};
const de_InvalidFormatFault = (output, context)=>{
    const contents = {};
    if (output[_me] != null) contents[_me] = __expectString(output[_me]);
    return contents;
};
const de_InvalidNextToken = (output, context)=>{
    const contents = {};
    if (output[_me] != null) contents[_me] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_me]);
    return contents;
};
const de_InvalidParameterCombinationException = (output, context)=>{
    const contents = {};
    if (output[_me] != null) contents[_me] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_me]);
    return contents;
};
const de_InvalidParameterValueException = (output, context)=>{
    const contents = {};
    if (output[_me] != null) contents[_me] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_me]);
    return contents;
};
const de_LimitExceededException = (output, context)=>{
    const contents = {};
    if (output[_Mes] != null) contents[_Mes] = __expectString(output[_Mes]);
    return contents;
};
const de_LimitExceededFault = (output, context)=>{
    const contents = {};
    if (output[_me] != null) contents[_me] = __expectString(output[_me]);
    return contents;
};
const de_ListDashboardsOutput = (output, context)=>{
    const contents = {};
    if (output.DashboardEntries === "") contents[_DE] = [];
    else if (output[_DE] != null && output[_DE][_m] != null) contents[_DE] = de_DashboardEntries((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[_DE][_m]), context);
    if (output[_NT] != null) contents[_NT] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_NT]);
    return contents;
};
const de_ListManagedInsightRulesOutput = (output, context)=>{
    const contents = {};
    if (output.ManagedRules === "") contents[_MRan] = [];
    else if (output[_MRan] != null && output[_MRan][_m] != null) contents[_MRan] = de_ManagedRuleDescriptions((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[_MRan][_m]), context);
    if (output[_NT] != null) contents[_NT] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_NT]);
    return contents;
};
const de_ListMetricsOutput = (output, context)=>{
    const contents = {};
    if (output.Metrics === "") contents[_M] = [];
    else if (output[_M] != null && output[_M][_m] != null) contents[_M] = de_Metrics((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[_M][_m]), context);
    if (output[_NT] != null) contents[_NT] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_NT]);
    if (output.OwningAccounts === "") contents[_OAw] = [];
    else if (output[_OAw] != null && output[_OAw][_m] != null) contents[_OAw] = de_OwningAccounts((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[_OAw][_m]), context);
    return contents;
};
const de_ListMetricStreamsOutput = (output, context)=>{
    const contents = {};
    if (output[_NT] != null) contents[_NT] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_NT]);
    if (output.Entries === "") contents[_En] = [];
    else if (output[_En] != null && output[_En][_m] != null) contents[_En] = de_MetricStreamEntries((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[_En][_m]), context);
    return contents;
};
const de_ListTagsForResourceOutput = (output, context)=>{
    const contents = {};
    if (output.Tags === "") contents[_Ta] = [];
    else if (output[_Ta] != null && output[_Ta][_m] != null) contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_Ta][_m]), context);
    return contents;
};
const de_ManagedRuleDescription = (output, context)=>{
    const contents = {};
    if (output[_TN] != null) contents[_TN] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_TN]);
    if (output[_RARN] != null) contents[_RARN] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_RARN]);
    if (output[_RS] != null) contents[_RS] = de_ManagedRuleState(output[_RS], context);
    return contents;
};
const de_ManagedRuleDescriptions = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_ManagedRuleDescription(entry, context);
    });
};
const de_ManagedRuleState = (output, context)=>{
    const contents = {};
    if (output[_RNu] != null) contents[_RNu] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_RNu]);
    if (output[_Stat] != null) contents[_Stat] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_Stat]);
    return contents;
};
const de_MessageData = (output, context)=>{
    const contents = {};
    if (output[_Cod] != null) contents[_Cod] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_Cod]);
    if (output[_Va] != null) contents[_Va] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_Va]);
    return contents;
};
const de_Metric = (output, context)=>{
    const contents = {};
    if (output[_N] != null) contents[_N] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_N]);
    if (output[_MN] != null) contents[_MN] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_MN]);
    if (output.Dimensions === "") contents[_D] = [];
    else if (output[_D] != null && output[_D][_m] != null) contents[_D] = de_Dimensions((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[_D][_m]), context);
    return contents;
};
const de_MetricAlarm = (output, context)=>{
    const contents = {};
    if (output[_ANl] != null) contents[_ANl] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_ANl]);
    if (output[_AAl] != null) contents[_AAl] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_AAl]);
    if (output[_AD] != null) contents[_AD] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_AD]);
    if (output[_ACUT] != null) contents[_ACUT] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTimeWithOffset)(output[_ACUT]));
    if (output[_AE] != null) contents[_AE] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output[_AE]);
    if (output.OKActions === "") contents[_OKA] = [];
    else if (output[_OKA] != null && output[_OKA][_m] != null) contents[_OKA] = de_ResourceList((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[_OKA][_m]), context);
    if (output.AlarmActions === "") contents[_AA] = [];
    else if (output[_AA] != null && output[_AA][_m] != null) contents[_AA] = de_ResourceList((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[_AA][_m]), context);
    if (output.InsufficientDataActions === "") contents[_IDA] = [];
    else if (output[_IDA] != null && output[_IDA][_m] != null) contents[_IDA] = de_ResourceList((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[_IDA][_m]), context);
    if (output[_SV] != null) contents[_SV] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_SV]);
    if (output[_SRt] != null) contents[_SRt] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_SRt]);
    if (output[_SRD] != null) contents[_SRD] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_SRD]);
    if (output[_SUT] != null) contents[_SUT] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTimeWithOffset)(output[_SUT]));
    if (output[_MN] != null) contents[_MN] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_MN]);
    if (output[_N] != null) contents[_N] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_N]);
    if (output[_St] != null) contents[_St] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_St]);
    if (output[_ES] != null) contents[_ES] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_ES]);
    if (output.Dimensions === "") contents[_D] = [];
    else if (output[_D] != null && output[_D][_m] != null) contents[_D] = de_Dimensions((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[_D][_m]), context);
    if (output[_P] != null) contents[_P] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output[_P]);
    if (output[_U] != null) contents[_U] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_U]);
    if (output[_EP] != null) contents[_EP] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output[_EP]);
    if (output[_DTA] != null) contents[_DTA] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output[_DTA]);
    if (output[_Th] != null) contents[_Th] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseFloat)(output[_Th]);
    if (output[_CO] != null) contents[_CO] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_CO]);
    if (output[_TMD] != null) contents[_TMD] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_TMD]);
    if (output[_ELSCP] != null) contents[_ELSCP] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_ELSCP]);
    if (output.Metrics === "") contents[_M] = [];
    else if (output[_M] != null && output[_M][_m] != null) contents[_M] = de_MetricDataQueries((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[_M][_m]), context);
    if (output[_TMI] != null) contents[_TMI] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_TMI]);
    if (output[_ESv] != null) contents[_ESv] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_ESv]);
    if (output[_STT] != null) contents[_STT] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTimeWithOffset)(output[_STT]));
    return contents;
};
const de_MetricAlarms = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_MetricAlarm(entry, context);
    });
};
const de_MetricDataQueries = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_MetricDataQuery(entry, context);
    });
};
const de_MetricDataQuery = (output, context)=>{
    const contents = {};
    if (output[_I] != null) contents[_I] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_I]);
    if (output[_MS] != null) contents[_MS] = de_MetricStat(output[_MS], context);
    if (output[_E] != null) contents[_E] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_E]);
    if (output[_L] != null) contents[_L] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_L]);
    if (output[_RD] != null) contents[_RD] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output[_RD]);
    if (output[_P] != null) contents[_P] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output[_P]);
    if (output[_AI] != null) contents[_AI] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_AI]);
    return contents;
};
const de_MetricDataResult = (output, context)=>{
    const contents = {};
    if (output[_I] != null) contents[_I] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_I]);
    if (output[_L] != null) contents[_L] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_L]);
    if (output.Timestamps === "") contents[_Tim] = [];
    else if (output[_Tim] != null && output[_Tim][_m] != null) contents[_Tim] = de_Timestamps((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[_Tim][_m]), context);
    if (output.Values === "") contents[_Val] = [];
    else if (output[_Val] != null && output[_Val][_m] != null) contents[_Val] = de_DatapointValues((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[_Val][_m]), context);
    if (output[_SCt] != null) contents[_SCt] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_SCt]);
    if (output.Messages === "") contents[_Mess] = [];
    else if (output[_Mess] != null && output[_Mess][_m] != null) contents[_Mess] = de_MetricDataResultMessages((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[_Mess][_m]), context);
    return contents;
};
const de_MetricDataResultMessages = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_MessageData(entry, context);
    });
};
const de_MetricDataResults = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_MetricDataResult(entry, context);
    });
};
const de_MetricMathAnomalyDetector = (output, context)=>{
    const contents = {};
    if (output.MetricDataQueries === "") contents[_MDQ] = [];
    else if (output[_MDQ] != null && output[_MDQ][_m] != null) contents[_MDQ] = de_MetricDataQueries((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[_MDQ][_m]), context);
    return contents;
};
const de_Metrics = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_Metric(entry, context);
    });
};
const de_MetricStat = (output, context)=>{
    const contents = {};
    if (output[_Me] != null) contents[_Me] = de_Metric(output[_Me], context);
    if (output[_P] != null) contents[_P] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output[_P]);
    if (output[_S] != null) contents[_S] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_S]);
    if (output[_U] != null) contents[_U] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_U]);
    return contents;
};
const de_MetricStreamEntries = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_MetricStreamEntry(entry, context);
    });
};
const de_MetricStreamEntry = (output, context)=>{
    const contents = {};
    if (output[_Ar] != null) contents[_Ar] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_Ar]);
    if (output[_CD] != null) contents[_CD] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTimeWithOffset)(output[_CD]));
    if (output[_LUD] != null) contents[_LUD] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTimeWithOffset)(output[_LUD]));
    if (output[_Na] != null) contents[_Na] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_Na]);
    if (output[_FA] != null) contents[_FA] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_FA]);
    if (output[_Stat] != null) contents[_Stat] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_Stat]);
    if (output[_OF] != null) contents[_OF] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_OF]);
    return contents;
};
const de_MetricStreamFilter = (output, context)=>{
    const contents = {};
    if (output[_N] != null) contents[_N] = __expectString(output[_N]);
    if (output.MetricNames === "") contents[_MNe] = [];
    else if (output[_MNe] != null && output[_MNe][_m] != null) contents[_MNe] = de_MetricStreamFilterMetricNames(__getArrayIfSingleItem(output[_MNe][_m]), context);
    return contents;
};
const de_MetricStreamFilterMetricNames = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return __expectString(entry);
    });
};
const de_MetricStreamFilters = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_MetricStreamFilter(entry, context);
    });
};
const de_MetricStreamStatisticsAdditionalStatistics = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return __expectString(entry);
    });
};
const de_MetricStreamStatisticsConfiguration = (output, context)=>{
    const contents = {};
    if (output.IncludeMetrics === "") contents[_IM] = [];
    else if (output[_IM] != null && output[_IM][_m] != null) contents[_IM] = de_MetricStreamStatisticsIncludeMetrics(__getArrayIfSingleItem(output[_IM][_m]), context);
    if (output.AdditionalStatistics === "") contents[_AS] = [];
    else if (output[_AS] != null && output[_AS][_m] != null) contents[_AS] = de_MetricStreamStatisticsAdditionalStatistics(__getArrayIfSingleItem(output[_AS][_m]), context);
    return contents;
};
const de_MetricStreamStatisticsConfigurations = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_MetricStreamStatisticsConfiguration(entry, context);
    });
};
const de_MetricStreamStatisticsIncludeMetrics = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_MetricStreamStatisticsMetric(entry, context);
    });
};
const de_MetricStreamStatisticsMetric = (output, context)=>{
    const contents = {};
    if (output[_N] != null) contents[_N] = __expectString(output[_N]);
    if (output[_MN] != null) contents[_MN] = __expectString(output[_MN]);
    return contents;
};
const de_MissingRequiredParameterException = (output, context)=>{
    const contents = {};
    if (output[_me] != null) contents[_me] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_me]);
    return contents;
};
const de_OwningAccounts = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(entry);
    });
};
const de_PartialFailure = (output, context)=>{
    const contents = {};
    if (output[_FR] != null) contents[_FR] = __expectString(output[_FR]);
    if (output[_ETx] != null) contents[_ETx] = __expectString(output[_ETx]);
    if (output[_FC] != null) contents[_FC] = __expectString(output[_FC]);
    if (output[_FD] != null) contents[_FD] = __expectString(output[_FD]);
    return contents;
};
const de_PutAnomalyDetectorOutput = (output, context)=>{
    const contents = {};
    return contents;
};
const de_PutDashboardOutput = (output, context)=>{
    const contents = {};
    if (output.DashboardValidationMessages === "") contents[_DVM] = [];
    else if (output[_DVM] != null && output[_DVM][_m] != null) contents[_DVM] = de_DashboardValidationMessages(__getArrayIfSingleItem(output[_DVM][_m]), context);
    return contents;
};
const de_PutInsightRuleOutput = (output, context)=>{
    const contents = {};
    return contents;
};
const de_PutManagedInsightRulesOutput = (output, context)=>{
    const contents = {};
    if (output.Failures === "") contents[_F] = [];
    else if (output[_F] != null && output[_F][_m] != null) contents[_F] = de_BatchFailures(__getArrayIfSingleItem(output[_F][_m]), context);
    return contents;
};
const de_PutMetricStreamOutput = (output, context)=>{
    const contents = {};
    if (output[_Ar] != null) contents[_Ar] = __expectString(output[_Ar]);
    return contents;
};
const de_Range = (output, context)=>{
    const contents = {};
    if (output[_ST] != null) contents[_ST] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTimeWithOffset)(output[_ST]));
    if (output[_ET] != null) contents[_ET] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTimeWithOffset)(output[_ET]));
    return contents;
};
const de_ResourceList = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(entry);
    });
};
const de_ResourceNotFound = (output, context)=>{
    const contents = {};
    if (output[_me] != null) contents[_me] = __expectString(output[_me]);
    return contents;
};
const de_ResourceNotFoundException = (output, context)=>{
    const contents = {};
    if (output[_RT] != null) contents[_RT] = __expectString(output[_RT]);
    if (output[_RI] != null) contents[_RI] = __expectString(output[_RI]);
    if (output[_Mes] != null) contents[_Mes] = __expectString(output[_Mes]);
    return contents;
};
const de_SingleMetricAnomalyDetector = (output, context)=>{
    const contents = {};
    if (output[_N] != null) contents[_N] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_N]);
    if (output[_MN] != null) contents[_MN] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_MN]);
    if (output.Dimensions === "") contents[_D] = [];
    else if (output[_D] != null && output[_D][_m] != null) contents[_D] = de_Dimensions((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[_D][_m]), context);
    if (output[_S] != null) contents[_S] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_S]);
    return contents;
};
const de_StartMetricStreamsOutput = (output, context)=>{
    const contents = {};
    return contents;
};
const de_StopMetricStreamsOutput = (output, context)=>{
    const contents = {};
    return contents;
};
const de_Tag = (output, context)=>{
    const contents = {};
    if (output[_K] != null) contents[_K] = __expectString(output[_K]);
    if (output[_Va] != null) contents[_Va] = __expectString(output[_Va]);
    return contents;
};
const de_TagList = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_Tag(entry, context);
    });
};
const de_TagResourceOutput = (output, context)=>{
    const contents = {};
    return contents;
};
const de_Timestamps = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTimeWithOffset)(entry));
    });
};
const de_UntagResourceOutput = (output, context)=>{
    const contents = {};
    return contents;
};
const deserializeMetadata = (output)=>({
        httpStatusCode: output.statusCode,
        requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
    });
const collectBodyString = (streamBody, context)=>(0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.collectBody)(streamBody, context).then((body)=>context.utf8Encoder(body));
const throwDefaultError = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.withBaseException)(_models_CloudWatchServiceException__WEBPACK_IMPORTED_MODULE_4__.CloudWatchServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body)=>{
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
    };
    if (resolvedHostname !== undefined) contents.hostname = resolvedHostname;
    if (body !== undefined) contents.body = body;
    return new _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest(contents);
};
const SHARED_HEADERS = {
    "content-type": "application/x-www-form-urlencoded"
};
const _ = "2010-08-01";
const _A = "Action";
const _AA = "AlarmActions";
const _AAV = "ApproximateAggregateValue";
const _AAl = "AlarmArn";
const _ACUT = "AlarmConfigurationUpdatedTimestamp";
const _AD = "AlarmDescription";
const _ADT = "AnomalyDetectorTypes";
const _ADn = "AnomalyDetectors";
const _AE = "ActionsEnabled";
const _AHI = "AlarmHistoryItems";
const _AI = "AccountId";
const _AN = "AlarmNames";
const _ANP = "AlarmNamePrefix";
const _ANl = "AlarmName";
const _AP = "ActionPrefix";
const _AR = "AlarmRule";
const _AS = "AdditionalStatistics";
const _ASB = "ActionsSuppressedBy";
const _ASEP = "ActionsSuppressorExtensionPeriod";
const _ASR = "ActionsSuppressedReason";
const _ASWP = "ActionsSuppressorWaitPeriod";
const _ASc = "ActionsSuppressor";
const _ASg = "AggregationStatistic";
const _AT = "AlarmTypes";
const _ATl = "AlarmType";
const _AUC = "ApproximateUniqueCount";
const _AV = "AggregateValue";
const _AVp = "ApproximateValue";
const _Ar = "Arn";
const _Av = "Average";
const _C = "Counts";
const _CA = "CompositeAlarms";
const _CD = "CreationDate";
const _CO = "ComparisonOperator";
const _COAN = "ChildrenOfAlarmName";
const _Co = "Configuration";
const _Cod = "Code";
const _Con = "Contributors";
const _D = "Dimensions";
const _DA = "DeleteAlarms";
const _DAA = "DisableAlarmActions";
const _DAD = "DeleteAnomalyDetector";
const _DADe = "DescribeAnomalyDetectors";
const _DAFM = "DescribeAlarmsForMetric";
const _DAH = "DescribeAlarmHistory";
const _DAa = "DashboardArn";
const _DAe = "DescribeAlarms";
const _DB = "DashboardBody";
const _DD = "DeleteDashboards";
const _DE = "DashboardEntries";
const _DIR = "DeleteInsightRules";
const _DIRe = "DescribeInsightRules";
const _DIRi = "DisableInsightRules";
const _DMS = "DeleteMetricStream";
const _DN = "DashboardNames";
const _DNP = "DashboardNamePrefix";
const _DNa = "DashboardName";
const _DP = "DataPath";
const _DTA = "DatapointsToAlarm";
const _DVM = "DashboardValidationMessages";
const _Da = "Datapoints";
const _De = "Definition";
const _E = "Expression";
const _EAA = "EnableAlarmActions";
const _ED = "EndDate";
const _EF = "ExcludeFilters";
const _EIR = "EnableInsightRules";
const _ELSCP = "EvaluateLowSampleCountPercentile";
const _EP = "EvaluationPeriods";
const _ES = "ExtendedStatistic";
const _ESv = "EvaluationState";
const _ESx = "ExtendedStatistics";
const _ET = "EndTime";
const _ETR = "ExcludedTimeRanges";
const _ETx = "ExceptionType";
const _En = "Entries";
const _F = "Failures";
const _FA = "FirehoseArn";
const _FC = "FailureCode";
const _FD = "FailureDescription";
const _FR = "FailureResource";
const _GD = "GetDashboard";
const _GIRR = "GetInsightRuleReport";
const _GMD = "GetMetricData";
const _GMS = "GetMetricStatistics";
const _GMSe = "GetMetricStream";
const _GMWI = "GetMetricWidgetImage";
const _HD = "HistoryData";
const _HIT = "HistoryItemType";
const _HS = "HistorySummary";
const _I = "Id";
const _IDA = "InsufficientDataActions";
const _IF = "IncludeFilters";
const _ILA = "IncludeLinkedAccounts";
const _ILAM = "IncludeLinkedAccountsMetrics";
const _IM = "IncludeMetrics";
const _IR = "InsightRules";
const _K = "Key";
const _KL = "KeyLabels";
const _Ke = "Keys";
const _L = "Label";
const _LD = "ListDashboards";
const _LM = "ListMetrics";
const _LMIR = "ListManagedInsightRules";
const _LMS = "ListMetricStreams";
const _LMa = "LastModified";
const _LO = "LabelOptions";
const _LTFR = "ListTagsForResource";
const _LUD = "LastUpdateDate";
const _M = "Metrics";
const _MA = "MetricAlarms";
const _MCC = "MaxContributorCount";
const _MCV = "MaxContributorValue";
const _MD = "MaxDatapoints";
const _MDQ = "MetricDataQueries";
const _MDR = "MetricDataResults";
const _MDe = "MetricData";
const _MDet = "MetricDatapoints";
const _MMAD = "MetricMathAnomalyDetector";
const _MN = "MetricName";
const _MNe = "MetricNames";
const _MR = "MaxRecords";
const _MRa = "MaxResults";
const _MRan = "ManagedRules";
const _MRana = "ManagedRule";
const _MS = "MetricStat";
const _MT = "MetricTimezone";
const _MW = "MetricWidget";
const _MWI = "MetricWidgetImage";
const _Ma = "Maximum";
const _Me = "Metric";
const _Mes = "Message";
const _Mess = "Messages";
const _Mi = "Minimum";
const _N = "Namespace";
const _NT = "NextToken";
const _Na = "Name";
const _Nam = "Names";
const _OA = "OwningAccount";
const _OAw = "OwningAccounts";
const _OB = "OrderBy";
const _OF = "OutputFormat";
const _OKA = "OKActions";
const _P = "Period";
const _PAD = "PutAnomalyDetector";
const _PCA = "PutCompositeAlarm";
const _PD = "PutDashboard";
const _PIR = "PutInsightRule";
const _PMA = "PutMetricAlarm";
const _PMD = "PutMetricData";
const _PMIR = "PutManagedInsightRules";
const _PMS = "PutMetricStream";
const _POAN = "ParentsOfAlarmName";
const _RA = "RecentlyActive";
const _RARN = "ResourceARN";
const _RAo = "RoleArn";
const _RD = "ReturnData";
const _RDu = "RuleDefinition";
const _RI = "ResourceId";
const _RN = "RuleNames";
const _RNu = "RuleName";
const _RS = "RuleState";
const _RT = "ResourceType";
const _S = "Stat";
const _SAS = "SetAlarmState";
const _SB = "ScanBy";
const _SC = "StatisticsConfigurations";
const _SCa = "SampleCount";
const _SCt = "StatusCode";
const _SD = "StartDate";
const _SMAD = "SingleMetricAnomalyDetector";
const _SMS = "StartMetricStreams";
const _SMSt = "StopMetricStreams";
const _SR = "StorageResolution";
const _SRD = "StateReasonData";
const _SRt = "StateReason";
const _ST = "StartTime";
const _STT = "StateTransitionedTimestamp";
const _SUT = "StateUpdatedTimestamp";
const _SV = "StateValue";
const _SVt = "StatisticValues";
const _Sc = "Schema";
const _Si = "Size";
const _St = "Statistic";
const _Sta = "Statistics";
const _Stat = "State";
const _Su = "Sum";
const _T = "Timezone";
const _TK = "TagKeys";
const _TMD = "TreatMissingData";
const _TMI = "ThresholdMetricId";
const _TN = "TemplateName";
const _TR = "TagResource";
const _Ta = "Tags";
const _Th = "Threshold";
const _Ti = "Timestamp";
const _Tim = "Timestamps";
const _U = "Unit";
const _UC = "UniqueContributors";
const _UR = "UntagResource";
const _V = "Version";
const _Va = "Value";
const _Val = "Values";
const _dVM = "dashboardValidationMessages";
const _e = "entry";
const _m = "member";
const _me = "message";
const parseBody = (streamBody, context)=>collectBodyString(streamBody, context).then((encoded)=>{
        if (encoded.length) {
            const parser = new fast_xml_parser__WEBPACK_IMPORTED_MODULE_2__.XMLParser({
                attributeNamePrefix: "",
                htmlEntities: true,
                ignoreAttributes: false,
                ignoreDeclaration: true,
                parseTagValue: false,
                trimValues: false,
                tagValueProcessor: (_, val)=>val.trim() === "" && val.includes("\n") ? "" : undefined
            });
            parser.addEntity("#xD", "\r");
            parser.addEntity("#10", "\n");
            const parsedObj = parser.parse(encoded);
            const textNodeName = "#text";
            const key = Object.keys(parsedObj)[0];
            const parsedObjToReturn = parsedObj[key];
            if (parsedObjToReturn[textNodeName]) {
                parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
                delete parsedObjToReturn[textNodeName];
            }
            return (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getValueFromTextNode)(parsedObjToReturn);
        }
        return {};
    });
const parseErrorBody = async (errorBody, context)=>{
    const value = await parseBody(errorBody, context);
    if (value.Error) value.Error.message = value.Error.message ?? value.Error.Message;
    return value;
};
const buildFormUrlencodedString = (formEntries)=>Object.entries(formEntries).map(([key, value])=>(0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.extendedEncodeURIComponent)(key) + "=" + (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.extendedEncodeURIComponent)(value)).join("&");
const loadQueryErrorCode = (output, data)=>{
    if (data.Error?.Code !== undefined) return data.Error.Code;
    if (output.statusCode == 404) return "NotFound";
};
}),
"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/runtimeConfig.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getRuntimeConfig: function() { return getRuntimeConfig; }
});
/* harmony import */var _package_json__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../package.json */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/package.json");
/* harmony import */var _aws_sdk_client_sts__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @aws-sdk/client-sts */"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/defaultRoleAssumers.js");
/* harmony import */var _aws_sdk_core__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @aws-sdk/core */"./node_modules/.pnpm/@aws-sdk+core@3.490.0/node_modules/@aws-sdk/core/dist-es/client/emitWarningIfUnsupportedVersion.js");
/* harmony import */var _aws_sdk_credential_provider_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/credential-provider-node */"./node_modules/.pnpm/@aws-sdk+credential-provider-node@3.490.0/node_modules/@aws-sdk/credential-provider-node/dist-es/index.js");
/* harmony import */var _aws_sdk_util_user_agent_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/util-user-agent-node */"./node_modules/.pnpm/@aws-sdk+util-user-agent-node@3.489.0/node_modules/@aws-sdk/util-user-agent-node/dist-es/index.js");
/* harmony import */var _smithy_config_resolver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @smithy/config-resolver */"./node_modules/.pnpm/@smithy+config-resolver@2.1.1/node_modules/@smithy/config-resolver/dist-es/index.js");
/* harmony import */var _smithy_hash_node__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @smithy/hash-node */"./node_modules/.pnpm/@smithy+hash-node@2.1.1/node_modules/@smithy/hash-node/dist-es/index.js");
/* harmony import */var _smithy_middleware_retry__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @smithy/middleware-retry */"./node_modules/.pnpm/@smithy+middleware-retry@2.1.1/node_modules/@smithy/middleware-retry/dist-es/index.js");
/* harmony import */var _smithy_node_config_provider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @smithy/node-config-provider */"./node_modules/.pnpm/@smithy+node-config-provider@2.2.1/node_modules/@smithy/node-config-provider/dist-es/index.js");
/* harmony import */var _smithy_node_http_handler__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @smithy/node-http-handler */"./node_modules/.pnpm/@smithy+node-http-handler@2.3.1/node_modules/@smithy/node-http-handler/dist-es/index.js");
/* harmony import */var _smithy_util_body_length_node__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @smithy/util-body-length-node */"./node_modules/.pnpm/@smithy+util-body-length-node@2.2.1/node_modules/@smithy/util-body-length-node/dist-es/index.js");
/* harmony import */var _smithy_util_retry__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @smithy/util-retry */"./node_modules/.pnpm/@smithy+util-retry@2.1.1/node_modules/@smithy/util-retry/dist-es/index.js");
/* harmony import */var _runtimeConfig_shared__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./runtimeConfig.shared */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/runtimeConfig.shared.js");
/* harmony import */var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @smithy/smithy-client */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/index.js");
/* harmony import */var _smithy_util_defaults_mode_node__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @smithy/util-defaults-mode-node */"./node_modules/.pnpm/@smithy+util-defaults-mode-node@2.1.1/node_modules/@smithy/util-defaults-mode-node/dist-es/index.js");
















const getRuntimeConfig = (config)=>{
    (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_9__.emitWarningIfUnsupportedVersion)(process.version);
    const defaultsMode = (0, _smithy_util_defaults_mode_node__WEBPACK_IMPORTED_MODULE_10__.resolveDefaultsModeConfig)(config);
    const defaultConfigProvider = ()=>defaultsMode().then(_smithy_smithy_client__WEBPACK_IMPORTED_MODULE_9__.loadConfigsForDefaultMode);
    const clientSharedValues = (0, _runtimeConfig_shared__WEBPACK_IMPORTED_MODULE_11__.getRuntimeConfig)(config);
    (0, _aws_sdk_core__WEBPACK_IMPORTED_MODULE_12__.emitWarningIfUnsupportedVersion)(process.version);
    return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? _smithy_util_body_length_node__WEBPACK_IMPORTED_MODULE_7__.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? (0, _aws_sdk_client_sts__WEBPACK_IMPORTED_MODULE_13__.decorateDefaultCredentialProvider)(_aws_sdk_credential_provider_node__WEBPACK_IMPORTED_MODULE_0__.defaultProvider),
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, _aws_sdk_util_user_agent_node__WEBPACK_IMPORTED_MODULE_1__.defaultUserAgent)({
            serviceId: clientSharedValues.serviceId,
            clientVersion: _package_json__WEBPACK_IMPORTED_MODULE_14__.version
        }),
        maxAttempts: config?.maxAttempts ?? (0, _smithy_node_config_provider__WEBPACK_IMPORTED_MODULE_5__.loadConfig)(_smithy_middleware_retry__WEBPACK_IMPORTED_MODULE_4__.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, _smithy_node_config_provider__WEBPACK_IMPORTED_MODULE_5__.loadConfig)(_smithy_config_resolver__WEBPACK_IMPORTED_MODULE_2__.NODE_REGION_CONFIG_OPTIONS, _smithy_config_resolver__WEBPACK_IMPORTED_MODULE_2__.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new _smithy_node_http_handler__WEBPACK_IMPORTED_MODULE_6__.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, _smithy_node_config_provider__WEBPACK_IMPORTED_MODULE_5__.loadConfig)({
            ..._smithy_middleware_retry__WEBPACK_IMPORTED_MODULE_4__.NODE_RETRY_MODE_CONFIG_OPTIONS,
            default: async ()=>(await defaultConfigProvider()).retryMode || _smithy_util_retry__WEBPACK_IMPORTED_MODULE_8__.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? _smithy_hash_node__WEBPACK_IMPORTED_MODULE_3__.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? _smithy_node_http_handler__WEBPACK_IMPORTED_MODULE_6__.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, _smithy_node_config_provider__WEBPACK_IMPORTED_MODULE_5__.loadConfig)(_smithy_config_resolver__WEBPACK_IMPORTED_MODULE_2__.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, _smithy_node_config_provider__WEBPACK_IMPORTED_MODULE_5__.loadConfig)(_smithy_config_resolver__WEBPACK_IMPORTED_MODULE_2__.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
    };
};
}),
"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/runtimeConfig.shared.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getRuntimeConfig: function() { return getRuntimeConfig; }
});
/* harmony import */var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/smithy-client */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/index.js");
/* harmony import */var _smithy_url_parser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @smithy/url-parser */"./node_modules/.pnpm/@smithy+url-parser@2.1.1/node_modules/@smithy/url-parser/dist-es/index.js");
/* harmony import */var _smithy_util_base64__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/util-base64 */"./node_modules/.pnpm/@smithy+util-base64@2.1.1/node_modules/@smithy/util-base64/dist-es/index.js");
/* harmony import */var _smithy_util_utf8__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @smithy/util-utf8 */"./node_modules/.pnpm/@smithy+util-utf8@2.1.1/node_modules/@smithy/util-utf8/dist-es/index.js");
/* harmony import */var _endpoint_endpointResolver__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./endpoint/endpointResolver */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/endpoint/endpointResolver.js");





const getRuntimeConfig = (config)=>{
    return {
        apiVersion: "2010-08-01",
        base64Decoder: config?.base64Decoder ?? _smithy_util_base64__WEBPACK_IMPORTED_MODULE_1__.fromBase64,
        base64Encoder: config?.base64Encoder ?? _smithy_util_base64__WEBPACK_IMPORTED_MODULE_1__.toBase64,
        disableHostPrefix: config?.disableHostPrefix ?? false,
        endpointProvider: config?.endpointProvider ?? _endpoint_endpointResolver__WEBPACK_IMPORTED_MODULE_3__.defaultEndpointResolver,
        extensions: config?.extensions ?? [],
        logger: config?.logger ?? new _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_0__.NoOpLogger(),
        serviceId: config?.serviceId ?? "CloudWatch",
        urlParser: config?.urlParser ?? _smithy_url_parser__WEBPACK_IMPORTED_MODULE_4__.parseUrl,
        utf8Decoder: config?.utf8Decoder ?? _smithy_util_utf8__WEBPACK_IMPORTED_MODULE_2__.fromUtf8,
        utf8Encoder: config?.utf8Encoder ?? _smithy_util_utf8__WEBPACK_IMPORTED_MODULE_2__.toUtf8
    };
};
}),
"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/runtimeExtensions.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  resolveRuntimeExtensions: function() { return resolveRuntimeExtensions; }
});
/* harmony import */var _aws_sdk_region_config_resolver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/region-config-resolver */"./node_modules/.pnpm/@aws-sdk+region-config-resolver@3.489.0/node_modules/@aws-sdk/region-config-resolver/dist-es/extensions/index.js");
/* harmony import */var _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/protocol-http */"./node_modules/.pnpm/@smithy+protocol-http@3.1.1/node_modules/@smithy/protocol-http/dist-es/index.js");
/* harmony import */var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/smithy-client */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/index.js");



const asPartial = (t)=>t;
const resolveRuntimeExtensions = (runtimeConfig, extensions)=>{
    const extensionConfiguration = {
        ...asPartial((0, _aws_sdk_region_config_resolver__WEBPACK_IMPORTED_MODULE_2__.getAwsRegionExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getDefaultExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__.getHttpHandlerExtensionConfiguration)(runtimeConfig))
    };
    extensions.forEach((extension)=>extension.configure(extensionConfiguration));
    return {
        ...runtimeConfig,
        ...(0, _aws_sdk_region_config_resolver__WEBPACK_IMPORTED_MODULE_2__.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
        ...(0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolveDefaultRuntimeConfig)(extensionConfiguration),
        ...(0, _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__.resolveHttpHandlerRuntimeConfig)(extensionConfiguration)
    };
};
}),
"./node_modules/.pnpm/@aws-sdk+client-sso@3.490.0/node_modules/@aws-sdk/client-sso/dist-es/SSOClient.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  SSOClient: function() { return SSOClient; }
});
/* harmony import */var _aws_sdk_middleware_host_header__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-host-header */"./node_modules/.pnpm/@aws-sdk+middleware-host-header@3.489.0/node_modules/@aws-sdk/middleware-host-header/dist-es/index.js");
/* harmony import */var _aws_sdk_middleware_logger__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @aws-sdk/middleware-logger */"./node_modules/.pnpm/@aws-sdk+middleware-logger@3.489.0/node_modules/@aws-sdk/middleware-logger/dist-es/loggerMiddleware.js");
/* harmony import */var _aws_sdk_middleware_recursion_detection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-recursion-detection */"./node_modules/.pnpm/@aws-sdk+middleware-recursion-detection@3.489.0/node_modules/@aws-sdk/middleware-recursion-detection/dist-es/index.js");
/* harmony import */var _aws_sdk_middleware_user_agent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-user-agent */"./node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.489.0/node_modules/@aws-sdk/middleware-user-agent/dist-es/index.js");
/* harmony import */var _smithy_config_resolver__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @smithy/config-resolver */"./node_modules/.pnpm/@smithy+config-resolver@2.1.1/node_modules/@smithy/config-resolver/dist-es/index.js");
/* harmony import */var _smithy_middleware_content_length__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @smithy/middleware-content-length */"./node_modules/.pnpm/@smithy+middleware-content-length@2.1.1/node_modules/@smithy/middleware-content-length/dist-es/index.js");
/* harmony import */var _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @smithy/middleware-endpoint */"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/index.js");
/* harmony import */var _smithy_middleware_retry__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @smithy/middleware-retry */"./node_modules/.pnpm/@smithy+middleware-retry@2.1.1/node_modules/@smithy/middleware-retry/dist-es/index.js");
/* harmony import */var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @smithy/smithy-client */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/index.js");
/* harmony import */var _endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./endpoint/EndpointParameters */"./node_modules/.pnpm/@aws-sdk+client-sso@3.490.0/node_modules/@aws-sdk/client-sso/dist-es/endpoint/EndpointParameters.js");
/* harmony import */var _runtimeConfig__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./runtimeConfig */"./node_modules/.pnpm/@aws-sdk+client-sso@3.490.0/node_modules/@aws-sdk/client-sso/dist-es/runtimeConfig.js");
/* harmony import */var _runtimeExtensions__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./runtimeExtensions */"./node_modules/.pnpm/@aws-sdk+client-sso@3.490.0/node_modules/@aws-sdk/client-sso/dist-es/runtimeExtensions.js");













class SSOClient extends _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.Client {
    constructor(...[configuration]){
        const _config_0 = (0, _runtimeConfig__WEBPACK_IMPORTED_MODULE_8__.getRuntimeConfig)(configuration || {});
        const _config_1 = (0, _endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_9__.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, _smithy_config_resolver__WEBPACK_IMPORTED_MODULE_3__.resolveRegionConfig)(_config_1);
        const _config_3 = (0, _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_5__.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, _smithy_middleware_retry__WEBPACK_IMPORTED_MODULE_6__.resolveRetryConfig)(_config_3);
        const _config_5 = (0, _aws_sdk_middleware_host_header__WEBPACK_IMPORTED_MODULE_0__.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, _aws_sdk_middleware_user_agent__WEBPACK_IMPORTED_MODULE_2__.resolveUserAgentConfig)(_config_5);
        const _config_7 = (0, _runtimeExtensions__WEBPACK_IMPORTED_MODULE_10__.resolveRuntimeExtensions)(_config_6, configuration?.extensions || []);
        super(_config_7);
        this.config = _config_7;
        this.middlewareStack.use((0, _smithy_middleware_retry__WEBPACK_IMPORTED_MODULE_6__.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, _smithy_middleware_content_length__WEBPACK_IMPORTED_MODULE_4__.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, _aws_sdk_middleware_host_header__WEBPACK_IMPORTED_MODULE_0__.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, _aws_sdk_middleware_logger__WEBPACK_IMPORTED_MODULE_11__.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, _aws_sdk_middleware_recursion_detection__WEBPACK_IMPORTED_MODULE_1__.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, _aws_sdk_middleware_user_agent__WEBPACK_IMPORTED_MODULE_2__.getUserAgentPlugin)(this.config));
    }
    destroy() {
        super.destroy();
    }
}
}),
"./node_modules/.pnpm/@aws-sdk+client-sso@3.490.0/node_modules/@aws-sdk/client-sso/dist-es/commands/GetRoleCredentialsCommand.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  GetRoleCredentialsCommand: function() { return GetRoleCredentialsCommand; }
});
/* harmony import */var _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/middleware-endpoint */"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/index.js");
/* harmony import */var _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @smithy/middleware-serde */"./node_modules/.pnpm/@smithy+middleware-serde@2.1.1/node_modules/@smithy/middleware-serde/dist-es/serdePlugin.js");
/* harmony import */var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/smithy-client */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/index.js");
/* harmony import */var _endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../endpoint/EndpointParameters */"./node_modules/.pnpm/@aws-sdk+client-sso@3.490.0/node_modules/@aws-sdk/client-sso/dist-es/endpoint/EndpointParameters.js");
/* harmony import */var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */"./node_modules/.pnpm/@aws-sdk+client-sso@3.490.0/node_modules/@aws-sdk/client-sso/dist-es/models/models_0.js");
/* harmony import */var _protocols_Aws_restJson1__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restJson1 */"./node_modules/.pnpm/@aws-sdk+client-sso@3.490.0/node_modules/@aws-sdk/client-sso/dist-es/protocols/Aws_restJson1.js");







class GetRoleCredentialsCommand extends _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.Command.classBuilder().ep({
    ..._endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_2__.commonParams
}).m(function(Command, cs, config, o) {
    return [
        (0, _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_3__.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
}).s("SWBPortalService", "GetRoleCredentials", {}).n("SSOClient", "GetRoleCredentialsCommand").f(_models_models_0__WEBPACK_IMPORTED_MODULE_4__.GetRoleCredentialsRequestFilterSensitiveLog, _models_models_0__WEBPACK_IMPORTED_MODULE_4__.GetRoleCredentialsResponseFilterSensitiveLog).ser(_protocols_Aws_restJson1__WEBPACK_IMPORTED_MODULE_5__.se_GetRoleCredentialsCommand).de(_protocols_Aws_restJson1__WEBPACK_IMPORTED_MODULE_5__.de_GetRoleCredentialsCommand).build() {
}
}),
"./node_modules/.pnpm/@aws-sdk+client-sso@3.490.0/node_modules/@aws-sdk/client-sso/dist-es/endpoint/EndpointParameters.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  commonParams: function() { return commonParams; },
  resolveClientEndpointParameters: function() { return resolveClientEndpointParameters; }
});
const resolveClientEndpointParameters = (options)=>{
    return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "awsssoportal"
    };
};
const commonParams = {
    UseFIPS: {
        type: "builtInParams",
        name: "useFipsEndpoint"
    },
    Endpoint: {
        type: "builtInParams",
        name: "endpoint"
    },
    Region: {
        type: "builtInParams",
        name: "region"
    },
    UseDualStack: {
        type: "builtInParams",
        name: "useDualstackEndpoint"
    }
};
}),
"./node_modules/.pnpm/@aws-sdk+client-sso@3.490.0/node_modules/@aws-sdk/client-sso/dist-es/endpoint/endpointResolver.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  defaultEndpointResolver: function() { return defaultEndpointResolver; }
});
/* harmony import */var _smithy_util_endpoints__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/util-endpoints */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/index.js");
/* harmony import */var _ruleset__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ruleset */"./node_modules/.pnpm/@aws-sdk+client-sso@3.490.0/node_modules/@aws-sdk/client-sso/dist-es/endpoint/ruleset.js");


const defaultEndpointResolver = (endpointParams, context = {})=>{
    return (0, _smithy_util_endpoints__WEBPACK_IMPORTED_MODULE_0__.resolveEndpoint)(_ruleset__WEBPACK_IMPORTED_MODULE_1__.ruleSet, {
        endpointParams: endpointParams,
        logger: context.logger
    });
};
}),
"./node_modules/.pnpm/@aws-sdk+client-sso@3.490.0/node_modules/@aws-sdk/client-sso/dist-es/endpoint/ruleset.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  ruleSet: function() { return ruleSet; }
});
const u = "required", v = "fn", w = "argv", x = "ref";
const a = true, b = "isSet", c = "booleanEquals", d = "error", e = "endpoint", f = "tree", g = "PartitionResult", h = "getAttr", i = {
    [u]: false,
    "type": "String"
}, j = {
    [u]: true,
    "default": false,
    "type": "Boolean"
}, k = {
    [x]: "Endpoint"
}, l = {
    [v]: c,
    [w]: [
        {
            [x]: "UseFIPS"
        },
        true
    ]
}, m = {
    [v]: c,
    [w]: [
        {
            [x]: "UseDualStack"
        },
        true
    ]
}, n = {}, o = {
    [v]: h,
    [w]: [
        {
            [x]: g
        },
        "supportsFIPS"
    ]
}, p = {
    [x]: g
}, q = {
    [v]: c,
    [w]: [
        true,
        {
            [v]: h,
            [w]: [
                p,
                "supportsDualStack"
            ]
        }
    ]
}, r = [
    l
], s = [
    m
], t = [
    {
        [x]: "Region"
    }
];
const _data = {
    version: "1.0",
    parameters: {
        Region: i,
        UseDualStack: j,
        UseFIPS: j,
        Endpoint: i
    },
    rules: [
        {
            conditions: [
                {
                    [v]: b,
                    [w]: [
                        k
                    ]
                }
            ],
            rules: [
                {
                    conditions: r,
                    error: "Invalid Configuration: FIPS and custom endpoint are not supported",
                    type: d
                },
                {
                    conditions: s,
                    error: "Invalid Configuration: Dualstack and custom endpoint are not supported",
                    type: d
                },
                {
                    endpoint: {
                        url: k,
                        properties: n,
                        headers: n
                    },
                    type: e
                }
            ],
            type: f
        },
        {
            conditions: [
                {
                    [v]: b,
                    [w]: t
                }
            ],
            rules: [
                {
                    conditions: [
                        {
                            [v]: "aws.partition",
                            [w]: t,
                            assign: g
                        }
                    ],
                    rules: [
                        {
                            conditions: [
                                l,
                                m
                            ],
                            rules: [
                                {
                                    conditions: [
                                        {
                                            [v]: c,
                                            [w]: [
                                                a,
                                                o
                                            ]
                                        },
                                        q
                                    ],
                                    rules: [
                                        {
                                            endpoint: {
                                                url: "https://portal.sso-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                                properties: n,
                                                headers: n
                                            },
                                            type: e
                                        }
                                    ],
                                    type: f
                                },
                                {
                                    error: "FIPS and DualStack are enabled, but this partition does not support one or both",
                                    type: d
                                }
                            ],
                            type: f
                        },
                        {
                            conditions: r,
                            rules: [
                                {
                                    conditions: [
                                        {
                                            [v]: c,
                                            [w]: [
                                                o,
                                                a
                                            ]
                                        }
                                    ],
                                    rules: [
                                        {
                                            conditions: [
                                                {
                                                    [v]: "stringEquals",
                                                    [w]: [
                                                        {
                                                            [v]: h,
                                                            [w]: [
                                                                p,
                                                                "name"
                                                            ]
                                                        },
                                                        "aws-us-gov"
                                                    ]
                                                }
                                            ],
                                            endpoint: {
                                                url: "https://portal.sso.{Region}.amazonaws.com",
                                                properties: n,
                                                headers: n
                                            },
                                            type: e
                                        },
                                        {
                                            endpoint: {
                                                url: "https://portal.sso-fips.{Region}.{PartitionResult#dnsSuffix}",
                                                properties: n,
                                                headers: n
                                            },
                                            type: e
                                        }
                                    ],
                                    type: f
                                },
                                {
                                    error: "FIPS is enabled but this partition does not support FIPS",
                                    type: d
                                }
                            ],
                            type: f
                        },
                        {
                            conditions: s,
                            rules: [
                                {
                                    conditions: [
                                        q
                                    ],
                                    rules: [
                                        {
                                            endpoint: {
                                                url: "https://portal.sso.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                                properties: n,
                                                headers: n
                                            },
                                            type: e
                                        }
                                    ],
                                    type: f
                                },
                                {
                                    error: "DualStack is enabled but this partition does not support DualStack",
                                    type: d
                                }
                            ],
                            type: f
                        },
                        {
                            endpoint: {
                                url: "https://portal.sso.{Region}.{PartitionResult#dnsSuffix}",
                                properties: n,
                                headers: n
                            },
                            type: e
                        }
                    ],
                    type: f
                }
            ],
            type: f
        },
        {
            error: "Invalid Configuration: Missing Region",
            type: d
        }
    ]
};
const ruleSet = _data;
}),
"./node_modules/.pnpm/@aws-sdk+client-sso@3.490.0/node_modules/@aws-sdk/client-sso/dist-es/models/SSOServiceException.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  SSOServiceException: function() { return SSOServiceException; }
});
/* harmony import */var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/smithy-client */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/index.js");


class SSOServiceException extends _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_0__.ServiceException {
    constructor(options){
        super(options);
        Object.setPrototypeOf(this, SSOServiceException.prototype);
    }
}
}),
"./node_modules/.pnpm/@aws-sdk+client-sso@3.490.0/node_modules/@aws-sdk/client-sso/dist-es/models/models_0.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  GetRoleCredentialsRequestFilterSensitiveLog: function() { return GetRoleCredentialsRequestFilterSensitiveLog; },
  GetRoleCredentialsResponseFilterSensitiveLog: function() { return GetRoleCredentialsResponseFilterSensitiveLog; },
  InvalidRequestException: function() { return InvalidRequestException; },
  ResourceNotFoundException: function() { return ResourceNotFoundException; },
  TooManyRequestsException: function() { return TooManyRequestsException; },
  UnauthorizedException: function() { return UnauthorizedException; }
});
/* harmony import */var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/smithy-client */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/index.js");
/* harmony import */var _SSOServiceException__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SSOServiceException */"./node_modules/.pnpm/@aws-sdk+client-sso@3.490.0/node_modules/@aws-sdk/client-sso/dist-es/models/SSOServiceException.js");


class InvalidRequestException extends _SSOServiceException__WEBPACK_IMPORTED_MODULE_1__.SSOServiceException {
    constructor(opts){
        super({
            name: "InvalidRequestException",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
    }
}
class ResourceNotFoundException extends _SSOServiceException__WEBPACK_IMPORTED_MODULE_1__.SSOServiceException {
    constructor(opts){
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
class TooManyRequestsException extends _SSOServiceException__WEBPACK_IMPORTED_MODULE_1__.SSOServiceException {
    constructor(opts){
        super({
            name: "TooManyRequestsException",
            $fault: "client",
            ...opts
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
    }
}
class UnauthorizedException extends _SSOServiceException__WEBPACK_IMPORTED_MODULE_1__.SSOServiceException {
    constructor(opts){
        super({
            name: "UnauthorizedException",
            $fault: "client",
            ...opts
        });
        this.name = "UnauthorizedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnauthorizedException.prototype);
    }
}
const GetRoleCredentialsRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.accessToken && {
            accessToken: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING
        }
    });
const RoleCredentialsFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.secretAccessKey && {
            secretAccessKey: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING
        },
        ...obj.sessionToken && {
            sessionToken: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING
        }
    });
const GetRoleCredentialsResponseFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.roleCredentials && {
            roleCredentials: RoleCredentialsFilterSensitiveLog(obj.roleCredentials)
        }
    });
const ListAccountRolesRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.accessToken && {
            accessToken: SENSITIVE_STRING
        }
    });
const ListAccountsRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.accessToken && {
            accessToken: SENSITIVE_STRING
        }
    });
const LogoutRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.accessToken && {
            accessToken: SENSITIVE_STRING
        }
    });
}),
"./node_modules/.pnpm/@aws-sdk+client-sso@3.490.0/node_modules/@aws-sdk/client-sso/dist-es/protocols/Aws_restJson1.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  de_GetRoleCredentialsCommand: function() { return de_GetRoleCredentialsCommand; },
  se_GetRoleCredentialsCommand: function() { return se_GetRoleCredentialsCommand; }
});
/* harmony import */var _smithy_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/core */"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/index.js");
/* harmony import */var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/smithy-client */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/index.js");
/* harmony import */var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */"./node_modules/.pnpm/@aws-sdk+client-sso@3.490.0/node_modules/@aws-sdk/client-sso/dist-es/models/models_0.js");
/* harmony import */var _models_SSOServiceException__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/SSOServiceException */"./node_modules/.pnpm/@aws-sdk+client-sso@3.490.0/node_modules/@aws-sdk/client-sso/dist-es/models/SSOServiceException.js");




const se_GetRoleCredentialsCommand = async (input, context)=>{
    const b = (0, _smithy_core__WEBPACK_IMPORTED_MODULE_0__.requestBuilder)(input, context);
    const headers = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.map)({}, isSerializableHeaderValue, {
        [_xasbt]: input[_aT]
    });
    b.bp("/federation/credentials");
    const query = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.map)({
        [_rn]: [
            ,
            (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)(input[_rN], `roleName`)
        ],
        [_ai]: [
            ,
            (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)(input[_aI], `accountId`)
        ]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListAccountRolesCommand = async (input, context)=>{
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xasbt]: input[_aT]
    });
    b.bp("/assignment/roles");
    const query = map({
        [_nt]: [
            ,
            input[_nT]
        ],
        [_mr]: [
            ()=>input.maxResults !== void 0,
            ()=>input[_mR].toString()
        ],
        [_ai]: [
            ,
            __expectNonNull(input[_aI], `accountId`)
        ]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListAccountsCommand = async (input, context)=>{
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xasbt]: input[_aT]
    });
    b.bp("/assignment/accounts");
    const query = map({
        [_nt]: [
            ,
            input[_nT]
        ],
        [_mr]: [
            ()=>input.maxResults !== void 0,
            ()=>input[_mR].toString()
        ]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_LogoutCommand = async (input, context)=>{
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xasbt]: input[_aT]
    });
    b.bp("/logout");
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
const de_GetRoleCredentialsCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_GetRoleCredentialsCommandError(output, context);
    const contents = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.take)(data, {
        roleCredentials: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__._json
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetRoleCredentialsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
            throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_ListAccountRolesCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_ListAccountRolesCommandError(output, context);
    const contents = map({
        $metadata: deserializeMetadata(output)
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        roleList: _json
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListAccountRolesCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
            throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_ListAccountsCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_ListAccountsCommandError(output, context);
    const contents = map({
        $metadata: deserializeMetadata(output)
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        accountList: _json,
        nextToken: __expectString
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListAccountsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
            throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_LogoutCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_LogoutCommandError(output, context);
    const contents = map({
        $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
};
const de_LogoutCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
            throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const throwDefaultError = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.withBaseException)(_models_SSOServiceException__WEBPACK_IMPORTED_MODULE_2__.SSOServiceException);
const de_InvalidRequestExceptionRes = async (parsedOutput, context)=>{
    const contents = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.map)({});
    const data = parsedOutput.body;
    const doc = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.take)(data, {
        message: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString
    });
    Object.assign(contents, doc);
    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_3__.InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context)=>{
    const contents = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.map)({});
    const data = parsedOutput.body;
    const doc = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.take)(data, {
        message: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString
    });
    Object.assign(contents, doc);
    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, parsedOutput.body);
};
const de_TooManyRequestsExceptionRes = async (parsedOutput, context)=>{
    const contents = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.map)({});
    const data = parsedOutput.body;
    const doc = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.take)(data, {
        message: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString
    });
    Object.assign(contents, doc);
    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_3__.TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, parsedOutput.body);
};
const de_UnauthorizedExceptionRes = async (parsedOutput, context)=>{
    const contents = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.map)({});
    const data = parsedOutput.body;
    const doc = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.take)(data, {
        message: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString
    });
    Object.assign(contents, doc);
    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_3__.UnauthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeMetadata = (output)=>({
        httpStatusCode: output.statusCode,
        requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
    });
const collectBodyString = (streamBody, context)=>(0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.collectBody)(streamBody, context).then((body)=>context.utf8Encoder(body));
const isSerializableHeaderValue = (value)=>value !== undefined && value !== null && value !== "" && (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _aI = "accountId";
const _aT = "accessToken";
const _ai = "account_id";
const _mR = "maxResults";
const _mr = "max_result";
const _nT = "nextToken";
const _nt = "next_token";
const _rN = "roleName";
const _rn = "role_name";
const _xasbt = "x-amz-sso_bearer_token";
const parseBody = (streamBody, context)=>collectBodyString(streamBody, context).then((encoded)=>{
        if (encoded.length) return JSON.parse(encoded);
        return {};
    });
const parseErrorBody = async (errorBody, context)=>{
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data)=>{
    const findKey = (object, key)=>Object.keys(object).find((k)=>k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue)=>{
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") cleanValue = cleanValue.toString();
        if (cleanValue.indexOf(",") >= 0) cleanValue = cleanValue.split(",")[0];
        if (cleanValue.indexOf(":") >= 0) cleanValue = cleanValue.split(":")[0];
        if (cleanValue.indexOf("#") >= 0) cleanValue = cleanValue.split("#")[1];
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) return sanitizeErrorCode(output.headers[headerKey]);
    if (data.code !== undefined) return sanitizeErrorCode(data.code);
    if (data["__type"] !== undefined) return sanitizeErrorCode(data["__type"]);
};
}),
"./node_modules/.pnpm/@aws-sdk+client-sso@3.490.0/node_modules/@aws-sdk/client-sso/dist-es/runtimeConfig.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getRuntimeConfig: function() { return getRuntimeConfig; }
});
/* harmony import */var _package_json__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../package.json */"./node_modules/.pnpm/@aws-sdk+client-sso@3.490.0/node_modules/@aws-sdk/client-sso/package.json");
/* harmony import */var _aws_sdk_core__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @aws-sdk/core */"./node_modules/.pnpm/@aws-sdk+core@3.490.0/node_modules/@aws-sdk/core/dist-es/client/emitWarningIfUnsupportedVersion.js");
/* harmony import */var _aws_sdk_util_user_agent_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-user-agent-node */"./node_modules/.pnpm/@aws-sdk+util-user-agent-node@3.489.0/node_modules/@aws-sdk/util-user-agent-node/dist-es/index.js");
/* harmony import */var _smithy_config_resolver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/config-resolver */"./node_modules/.pnpm/@smithy+config-resolver@2.1.1/node_modules/@smithy/config-resolver/dist-es/index.js");
/* harmony import */var _smithy_hash_node__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @smithy/hash-node */"./node_modules/.pnpm/@smithy+hash-node@2.1.1/node_modules/@smithy/hash-node/dist-es/index.js");
/* harmony import */var _smithy_middleware_retry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @smithy/middleware-retry */"./node_modules/.pnpm/@smithy+middleware-retry@2.1.1/node_modules/@smithy/middleware-retry/dist-es/index.js");
/* harmony import */var _smithy_node_config_provider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @smithy/node-config-provider */"./node_modules/.pnpm/@smithy+node-config-provider@2.2.1/node_modules/@smithy/node-config-provider/dist-es/index.js");
/* harmony import */var _smithy_node_http_handler__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @smithy/node-http-handler */"./node_modules/.pnpm/@smithy+node-http-handler@2.3.1/node_modules/@smithy/node-http-handler/dist-es/index.js");
/* harmony import */var _smithy_util_body_length_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @smithy/util-body-length-node */"./node_modules/.pnpm/@smithy+util-body-length-node@2.2.1/node_modules/@smithy/util-body-length-node/dist-es/index.js");
/* harmony import */var _smithy_util_retry__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @smithy/util-retry */"./node_modules/.pnpm/@smithy+util-retry@2.1.1/node_modules/@smithy/util-retry/dist-es/index.js");
/* harmony import */var _runtimeConfig_shared__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./runtimeConfig.shared */"./node_modules/.pnpm/@aws-sdk+client-sso@3.490.0/node_modules/@aws-sdk/client-sso/dist-es/runtimeConfig.shared.js");
/* harmony import */var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @smithy/smithy-client */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/index.js");
/* harmony import */var _smithy_util_defaults_mode_node__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @smithy/util-defaults-mode-node */"./node_modules/.pnpm/@smithy+util-defaults-mode-node@2.1.1/node_modules/@smithy/util-defaults-mode-node/dist-es/index.js");














const getRuntimeConfig = (config)=>{
    (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_8__.emitWarningIfUnsupportedVersion)(process.version);
    const defaultsMode = (0, _smithy_util_defaults_mode_node__WEBPACK_IMPORTED_MODULE_9__.resolveDefaultsModeConfig)(config);
    const defaultConfigProvider = ()=>defaultsMode().then(_smithy_smithy_client__WEBPACK_IMPORTED_MODULE_8__.loadConfigsForDefaultMode);
    const clientSharedValues = (0, _runtimeConfig_shared__WEBPACK_IMPORTED_MODULE_10__.getRuntimeConfig)(config);
    (0, _aws_sdk_core__WEBPACK_IMPORTED_MODULE_11__.emitWarningIfUnsupportedVersion)(process.version);
    return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? _smithy_util_body_length_node__WEBPACK_IMPORTED_MODULE_6__.calculateBodyLength,
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, _aws_sdk_util_user_agent_node__WEBPACK_IMPORTED_MODULE_0__.defaultUserAgent)({
            serviceId: clientSharedValues.serviceId,
            clientVersion: _package_json__WEBPACK_IMPORTED_MODULE_12__.version
        }),
        maxAttempts: config?.maxAttempts ?? (0, _smithy_node_config_provider__WEBPACK_IMPORTED_MODULE_4__.loadConfig)(_smithy_middleware_retry__WEBPACK_IMPORTED_MODULE_3__.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, _smithy_node_config_provider__WEBPACK_IMPORTED_MODULE_4__.loadConfig)(_smithy_config_resolver__WEBPACK_IMPORTED_MODULE_1__.NODE_REGION_CONFIG_OPTIONS, _smithy_config_resolver__WEBPACK_IMPORTED_MODULE_1__.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new _smithy_node_http_handler__WEBPACK_IMPORTED_MODULE_5__.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, _smithy_node_config_provider__WEBPACK_IMPORTED_MODULE_4__.loadConfig)({
            ..._smithy_middleware_retry__WEBPACK_IMPORTED_MODULE_3__.NODE_RETRY_MODE_CONFIG_OPTIONS,
            default: async ()=>(await defaultConfigProvider()).retryMode || _smithy_util_retry__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? _smithy_hash_node__WEBPACK_IMPORTED_MODULE_2__.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? _smithy_node_http_handler__WEBPACK_IMPORTED_MODULE_5__.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, _smithy_node_config_provider__WEBPACK_IMPORTED_MODULE_4__.loadConfig)(_smithy_config_resolver__WEBPACK_IMPORTED_MODULE_1__.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, _smithy_node_config_provider__WEBPACK_IMPORTED_MODULE_4__.loadConfig)(_smithy_config_resolver__WEBPACK_IMPORTED_MODULE_1__.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
    };
};
}),
"./node_modules/.pnpm/@aws-sdk+client-sso@3.490.0/node_modules/@aws-sdk/client-sso/dist-es/runtimeConfig.shared.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getRuntimeConfig: function() { return getRuntimeConfig; }
});
/* harmony import */var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/smithy-client */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/index.js");
/* harmony import */var _smithy_url_parser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @smithy/url-parser */"./node_modules/.pnpm/@smithy+url-parser@2.1.1/node_modules/@smithy/url-parser/dist-es/index.js");
/* harmony import */var _smithy_util_base64__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/util-base64 */"./node_modules/.pnpm/@smithy+util-base64@2.1.1/node_modules/@smithy/util-base64/dist-es/index.js");
/* harmony import */var _smithy_util_utf8__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @smithy/util-utf8 */"./node_modules/.pnpm/@smithy+util-utf8@2.1.1/node_modules/@smithy/util-utf8/dist-es/index.js");
/* harmony import */var _endpoint_endpointResolver__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./endpoint/endpointResolver */"./node_modules/.pnpm/@aws-sdk+client-sso@3.490.0/node_modules/@aws-sdk/client-sso/dist-es/endpoint/endpointResolver.js");





const getRuntimeConfig = (config)=>{
    return {
        apiVersion: "2019-06-10",
        base64Decoder: config?.base64Decoder ?? _smithy_util_base64__WEBPACK_IMPORTED_MODULE_1__.fromBase64,
        base64Encoder: config?.base64Encoder ?? _smithy_util_base64__WEBPACK_IMPORTED_MODULE_1__.toBase64,
        disableHostPrefix: config?.disableHostPrefix ?? false,
        endpointProvider: config?.endpointProvider ?? _endpoint_endpointResolver__WEBPACK_IMPORTED_MODULE_3__.defaultEndpointResolver,
        extensions: config?.extensions ?? [],
        logger: config?.logger ?? new _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_0__.NoOpLogger(),
        serviceId: config?.serviceId ?? "SSO",
        urlParser: config?.urlParser ?? _smithy_url_parser__WEBPACK_IMPORTED_MODULE_4__.parseUrl,
        utf8Decoder: config?.utf8Decoder ?? _smithy_util_utf8__WEBPACK_IMPORTED_MODULE_2__.fromUtf8,
        utf8Encoder: config?.utf8Encoder ?? _smithy_util_utf8__WEBPACK_IMPORTED_MODULE_2__.toUtf8
    };
};
}),
"./node_modules/.pnpm/@aws-sdk+client-sso@3.490.0/node_modules/@aws-sdk/client-sso/dist-es/runtimeExtensions.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  resolveRuntimeExtensions: function() { return resolveRuntimeExtensions; }
});
/* harmony import */var _aws_sdk_region_config_resolver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/region-config-resolver */"./node_modules/.pnpm/@aws-sdk+region-config-resolver@3.489.0/node_modules/@aws-sdk/region-config-resolver/dist-es/extensions/index.js");
/* harmony import */var _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/protocol-http */"./node_modules/.pnpm/@smithy+protocol-http@3.1.1/node_modules/@smithy/protocol-http/dist-es/index.js");
/* harmony import */var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/smithy-client */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/index.js");



const asPartial = (t)=>t;
const resolveRuntimeExtensions = (runtimeConfig, extensions)=>{
    const extensionConfiguration = {
        ...asPartial((0, _aws_sdk_region_config_resolver__WEBPACK_IMPORTED_MODULE_2__.getAwsRegionExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getDefaultExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__.getHttpHandlerExtensionConfiguration)(runtimeConfig))
    };
    extensions.forEach((extension)=>extension.configure(extensionConfiguration));
    return {
        ...runtimeConfig,
        ...(0, _aws_sdk_region_config_resolver__WEBPACK_IMPORTED_MODULE_2__.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
        ...(0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolveDefaultRuntimeConfig)(extensionConfiguration),
        ...(0, _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__.resolveHttpHandlerRuntimeConfig)(extensionConfiguration)
    };
};
}),
"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/STSClient.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  STSClient: function() { return STSClient; }
});
/* harmony import */var _aws_sdk_middleware_host_header__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-host-header */"./node_modules/.pnpm/@aws-sdk+middleware-host-header@3.489.0/node_modules/@aws-sdk/middleware-host-header/dist-es/index.js");
/* harmony import */var _aws_sdk_middleware_logger__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @aws-sdk/middleware-logger */"./node_modules/.pnpm/@aws-sdk+middleware-logger@3.489.0/node_modules/@aws-sdk/middleware-logger/dist-es/loggerMiddleware.js");
/* harmony import */var _aws_sdk_middleware_recursion_detection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-recursion-detection */"./node_modules/.pnpm/@aws-sdk+middleware-recursion-detection@3.489.0/node_modules/@aws-sdk/middleware-recursion-detection/dist-es/index.js");
/* harmony import */var _aws_sdk_middleware_user_agent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-user-agent */"./node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.489.0/node_modules/@aws-sdk/middleware-user-agent/dist-es/index.js");
/* harmony import */var _smithy_config_resolver__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @smithy/config-resolver */"./node_modules/.pnpm/@smithy+config-resolver@2.1.1/node_modules/@smithy/config-resolver/dist-es/index.js");
/* harmony import */var _smithy_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @smithy/core */"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/index.js");
/* harmony import */var _smithy_middleware_content_length__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @smithy/middleware-content-length */"./node_modules/.pnpm/@smithy+middleware-content-length@2.1.1/node_modules/@smithy/middleware-content-length/dist-es/index.js");
/* harmony import */var _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @smithy/middleware-endpoint */"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/index.js");
/* harmony import */var _smithy_middleware_retry__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @smithy/middleware-retry */"./node_modules/.pnpm/@smithy+middleware-retry@2.1.1/node_modules/@smithy/middleware-retry/dist-es/index.js");
/* harmony import */var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @smithy/smithy-client */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/index.js");
/* harmony import */var _auth_httpAuthSchemeProvider__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./auth/httpAuthSchemeProvider */"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/auth/httpAuthSchemeProvider.js");
/* harmony import */var _endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./endpoint/EndpointParameters */"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/endpoint/EndpointParameters.js");
/* harmony import */var _runtimeConfig__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./runtimeConfig */"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/runtimeConfig.js");
/* harmony import */var _runtimeExtensions__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./runtimeExtensions */"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/runtimeExtensions.js");















class STSClient extends _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_8__.Client {
    constructor(...[configuration]){
        const _config_0 = (0, _runtimeConfig__WEBPACK_IMPORTED_MODULE_9__.getRuntimeConfig)(configuration || {});
        const _config_1 = (0, _endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_10__.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, _smithy_config_resolver__WEBPACK_IMPORTED_MODULE_3__.resolveRegionConfig)(_config_1);
        const _config_3 = (0, _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_6__.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, _smithy_middleware_retry__WEBPACK_IMPORTED_MODULE_7__.resolveRetryConfig)(_config_3);
        const _config_5 = (0, _aws_sdk_middleware_host_header__WEBPACK_IMPORTED_MODULE_0__.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, _aws_sdk_middleware_user_agent__WEBPACK_IMPORTED_MODULE_2__.resolveUserAgentConfig)(_config_5);
        const _config_7 = (0, _auth_httpAuthSchemeProvider__WEBPACK_IMPORTED_MODULE_11__.resolveHttpAuthSchemeConfig)(_config_6);
        const _config_8 = (0, _runtimeExtensions__WEBPACK_IMPORTED_MODULE_12__.resolveRuntimeExtensions)(_config_7, configuration?.extensions || []);
        super(_config_8);
        this.config = _config_8;
        this.middlewareStack.use((0, _smithy_middleware_retry__WEBPACK_IMPORTED_MODULE_7__.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, _smithy_middleware_content_length__WEBPACK_IMPORTED_MODULE_5__.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, _aws_sdk_middleware_host_header__WEBPACK_IMPORTED_MODULE_0__.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, _aws_sdk_middleware_logger__WEBPACK_IMPORTED_MODULE_13__.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, _aws_sdk_middleware_recursion_detection__WEBPACK_IMPORTED_MODULE_1__.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, _aws_sdk_middleware_user_agent__WEBPACK_IMPORTED_MODULE_2__.getUserAgentPlugin)(this.config));
        this.middlewareStack.use((0, _smithy_core__WEBPACK_IMPORTED_MODULE_4__.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
            httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),
            identityProviderConfigProvider: this.getIdentityProviderConfigProvider()
        }));
        this.middlewareStack.use((0, _smithy_core__WEBPACK_IMPORTED_MODULE_4__.getHttpSigningPlugin)(this.config));
    }
    destroy() {
        super.destroy();
    }
    getDefaultHttpAuthSchemeParametersProvider() {
        return _auth_httpAuthSchemeProvider__WEBPACK_IMPORTED_MODULE_11__.defaultSTSHttpAuthSchemeParametersProvider;
    }
    getIdentityProviderConfigProvider() {
        return async (config)=>new _smithy_core__WEBPACK_IMPORTED_MODULE_4__.DefaultIdentityProviderConfig({
                "aws.auth#sigv4": config.credentials
            });
    }
}
}),
"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/auth/httpAuthExtensionConfiguration.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getHttpAuthExtensionConfiguration: function() { return getHttpAuthExtensionConfiguration; },
  resolveHttpAuthRuntimeConfig: function() { return resolveHttpAuthRuntimeConfig; }
});
const getHttpAuthExtensionConfiguration = (runtimeConfig)=>{
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
        setHttpAuthScheme (httpAuthScheme) {
            const index = _httpAuthSchemes.findIndex((scheme)=>scheme.schemeId === httpAuthScheme.schemeId);
            if (index === -1) _httpAuthSchemes.push(httpAuthScheme);
            else _httpAuthSchemes.splice(index, 1, httpAuthScheme);
        },
        httpAuthSchemes () {
            return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider (httpAuthSchemeProvider) {
            _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider () {
            return _httpAuthSchemeProvider;
        },
        setCredentials (credentials) {
            _credentials = credentials;
        },
        credentials () {
            return _credentials;
        }
    };
};
const resolveHttpAuthRuntimeConfig = (config)=>{
    return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials()
    };
};
}),
"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/auth/httpAuthSchemeProvider.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  defaultSTSHttpAuthSchemeParametersProvider: function() { return defaultSTSHttpAuthSchemeParametersProvider; },
  defaultSTSHttpAuthSchemeProvider: function() { return defaultSTSHttpAuthSchemeProvider; },
  resolveHttpAuthSchemeConfig: function() { return resolveHttpAuthSchemeConfig; }
});
/* harmony import */var _aws_sdk_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/core */"./node_modules/.pnpm/@aws-sdk+core@3.490.0/node_modules/@aws-sdk/core/dist-es/httpAuthSchemes/aws_sdk/resolveAwsSdkSigV4Config.js");
/* harmony import */var _smithy_util_middleware__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/util-middleware */"./node_modules/.pnpm/@smithy+util-middleware@2.1.1/node_modules/@smithy/util-middleware/dist-es/index.js");
/* harmony import */var _STSClient__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../STSClient */"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/STSClient.js");



const defaultSTSHttpAuthSchemeParametersProvider = async (config, context, input)=>{
    return {
        operation: (0, _smithy_util_middleware__WEBPACK_IMPORTED_MODULE_0__.getSmithyContext)(context).operation,
        region: await (0, _smithy_util_middleware__WEBPACK_IMPORTED_MODULE_0__.normalizeProvider)(config.region)() || (()=>{
            throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
        })()
    };
};
function createAwsAuthSigv4HttpAuthOption(authParameters) {
    return {
        schemeId: "aws.auth#sigv4",
        signingProperties: {
            name: "sts",
            region: authParameters.region
        },
        propertiesExtractor: (config, context)=>({
                signingProperties: {
                    config,
                    context
                }
            })
    };
}
function createSmithyApiNoAuthHttpAuthOption(authParameters) {
    return {
        schemeId: "smithy.api#noAuth"
    };
}
const defaultSTSHttpAuthSchemeProvider = (authParameters)=>{
    const options = [];
    switch(authParameters.operation){
        case "AssumeRoleWithSAML":
            options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
            break;
        case "AssumeRoleWithWebIdentity":
            options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
            break;
        default:
            options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
    }
    return options;
};
const resolveStsAuthConfig = (input)=>({
        ...input,
        stsClientCtor: _STSClient__WEBPACK_IMPORTED_MODULE_1__.STSClient
    });
const resolveHttpAuthSchemeConfig = (config)=>{
    const config_0 = resolveStsAuthConfig(config);
    const config_1 = (0, _aws_sdk_core__WEBPACK_IMPORTED_MODULE_2__.resolveAwsSdkSigV4Config)(config_0);
    return {
        ...config_1
    };
};
}),
"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/commands/AssumeRoleCommand.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  AssumeRoleCommand: function() { return AssumeRoleCommand; }
});
/* harmony import */var _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/middleware-endpoint */"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/index.js");
/* harmony import */var _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @smithy/middleware-serde */"./node_modules/.pnpm/@smithy+middleware-serde@2.1.1/node_modules/@smithy/middleware-serde/dist-es/serdePlugin.js");
/* harmony import */var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/smithy-client */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/index.js");
/* harmony import */var _endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../endpoint/EndpointParameters */"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/endpoint/EndpointParameters.js");
/* harmony import */var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/models/models_0.js");
/* harmony import */var _protocols_Aws_query__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_query */"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/protocols/Aws_query.js");







class AssumeRoleCommand extends _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.Command.classBuilder().ep({
    ..._endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_2__.commonParams
}).m(function(Command, cs, config, o) {
    return [
        (0, _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_3__.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
}).s("AWSSecurityTokenServiceV20110615", "AssumeRole", {}).n("STSClient", "AssumeRoleCommand").f(void 0, _models_models_0__WEBPACK_IMPORTED_MODULE_4__.AssumeRoleResponseFilterSensitiveLog).ser(_protocols_Aws_query__WEBPACK_IMPORTED_MODULE_5__.se_AssumeRoleCommand).de(_protocols_Aws_query__WEBPACK_IMPORTED_MODULE_5__.de_AssumeRoleCommand).build() {
}
}),
"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/commands/AssumeRoleWithWebIdentityCommand.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  AssumeRoleWithWebIdentityCommand: function() { return AssumeRoleWithWebIdentityCommand; }
});
/* harmony import */var _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/middleware-endpoint */"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/index.js");
/* harmony import */var _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @smithy/middleware-serde */"./node_modules/.pnpm/@smithy+middleware-serde@2.1.1/node_modules/@smithy/middleware-serde/dist-es/serdePlugin.js");
/* harmony import */var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/smithy-client */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/index.js");
/* harmony import */var _endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../endpoint/EndpointParameters */"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/endpoint/EndpointParameters.js");
/* harmony import */var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/models/models_0.js");
/* harmony import */var _protocols_Aws_query__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_query */"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/protocols/Aws_query.js");







class AssumeRoleWithWebIdentityCommand extends _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.Command.classBuilder().ep({
    ..._endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_2__.commonParams
}).m(function(Command, cs, config, o) {
    return [
        (0, _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_3__.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
}).s("AWSSecurityTokenServiceV20110615", "AssumeRoleWithWebIdentity", {}).n("STSClient", "AssumeRoleWithWebIdentityCommand").f(_models_models_0__WEBPACK_IMPORTED_MODULE_4__.AssumeRoleWithWebIdentityRequestFilterSensitiveLog, _models_models_0__WEBPACK_IMPORTED_MODULE_4__.AssumeRoleWithWebIdentityResponseFilterSensitiveLog).ser(_protocols_Aws_query__WEBPACK_IMPORTED_MODULE_5__.se_AssumeRoleWithWebIdentityCommand).de(_protocols_Aws_query__WEBPACK_IMPORTED_MODULE_5__.de_AssumeRoleWithWebIdentityCommand).build() {
}
}),
"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/defaultRoleAssumers.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  decorateDefaultCredentialProvider: function() { return decorateDefaultCredentialProvider; }
});
/* harmony import */var _defaultStsRoleAssumers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./defaultStsRoleAssumers */"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/defaultStsRoleAssumers.js");
/* harmony import */var _STSClient__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./STSClient */"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/STSClient.js");


const getCustomizableStsClientCtor = (baseCtor, customizations)=>{
    if (!customizations) return baseCtor;
    else return class CustomizableSTSClient extends baseCtor {
        constructor(config){
            super(config);
            for (const customization of customizations)this.middlewareStack.use(customization);
        }
    };
};
const getDefaultRoleAssumer = (stsOptions = {}, stsPlugins)=>(0, _defaultStsRoleAssumers__WEBPACK_IMPORTED_MODULE_0__.getDefaultRoleAssumer)(stsOptions, getCustomizableStsClientCtor(_STSClient__WEBPACK_IMPORTED_MODULE_1__.STSClient, stsPlugins));
const getDefaultRoleAssumerWithWebIdentity = (stsOptions = {}, stsPlugins)=>(0, _defaultStsRoleAssumers__WEBPACK_IMPORTED_MODULE_0__.getDefaultRoleAssumerWithWebIdentity)(stsOptions, getCustomizableStsClientCtor(_STSClient__WEBPACK_IMPORTED_MODULE_1__.STSClient, stsPlugins));
const decorateDefaultCredentialProvider = (provider)=>(input)=>provider({
            roleAssumer: getDefaultRoleAssumer(input),
            roleAssumerWithWebIdentity: getDefaultRoleAssumerWithWebIdentity(input),
            ...input
        });
}),
"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/defaultStsRoleAssumers.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  decorateDefaultCredentialProvider: function() { return decorateDefaultCredentialProvider; },
  getDefaultRoleAssumer: function() { return getDefaultRoleAssumer; },
  getDefaultRoleAssumerWithWebIdentity: function() { return getDefaultRoleAssumerWithWebIdentity; }
});
/* harmony import */var _commands_AssumeRoleCommand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commands/AssumeRoleCommand */"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/commands/AssumeRoleCommand.js");
/* harmony import */var _commands_AssumeRoleWithWebIdentityCommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./commands/AssumeRoleWithWebIdentityCommand */"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/commands/AssumeRoleWithWebIdentityCommand.js");


const ASSUME_ROLE_DEFAULT_REGION = "us-east-1";
const decorateDefaultRegion = (region)=>{
    if (typeof region !== "function") return region === undefined ? ASSUME_ROLE_DEFAULT_REGION : region;
    return async ()=>{
        try {
            return await region();
        } catch (e) {
            return ASSUME_ROLE_DEFAULT_REGION;
        }
    };
};
const getDefaultRoleAssumer = (stsOptions, stsClientCtor)=>{
    let stsClient;
    let closureSourceCreds;
    return async (sourceCreds, params)=>{
        closureSourceCreds = sourceCreds;
        if (!stsClient) {
            const { logger, region, requestHandler } = stsOptions;
            stsClient = new stsClientCtor({
                logger,
                credentialDefaultProvider: ()=>async ()=>closureSourceCreds,
                region: decorateDefaultRegion(region || stsOptions.region),
                ...requestHandler ? {
                    requestHandler
                } : {}
            });
        }
        const { Credentials } = await stsClient.send(new _commands_AssumeRoleCommand__WEBPACK_IMPORTED_MODULE_0__.AssumeRoleCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);
        return {
            accessKeyId: Credentials.AccessKeyId,
            secretAccessKey: Credentials.SecretAccessKey,
            sessionToken: Credentials.SessionToken,
            expiration: Credentials.Expiration,
            credentialScope: Credentials.CredentialScope
        };
    };
};
const getDefaultRoleAssumerWithWebIdentity = (stsOptions, stsClientCtor)=>{
    let stsClient;
    return async (params)=>{
        if (!stsClient) {
            const { logger, region, requestHandler } = stsOptions;
            stsClient = new stsClientCtor({
                logger,
                region: decorateDefaultRegion(region || stsOptions.region),
                ...requestHandler ? {
                    requestHandler
                } : {}
            });
        }
        const { Credentials } = await stsClient.send(new _commands_AssumeRoleWithWebIdentityCommand__WEBPACK_IMPORTED_MODULE_1__.AssumeRoleWithWebIdentityCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);
        return {
            accessKeyId: Credentials.AccessKeyId,
            secretAccessKey: Credentials.SecretAccessKey,
            sessionToken: Credentials.SessionToken,
            expiration: Credentials.Expiration,
            credentialScope: Credentials.CredentialScope
        };
    };
};
const decorateDefaultCredentialProvider = (provider)=>(input)=>provider({
            roleAssumer: getDefaultRoleAssumer(input, input.stsClientCtor),
            roleAssumerWithWebIdentity: getDefaultRoleAssumerWithWebIdentity(input, input.stsClientCtor),
            ...input
        });
}),
"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/endpoint/EndpointParameters.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  commonParams: function() { return commonParams; },
  resolveClientEndpointParameters: function() { return resolveClientEndpointParameters; }
});
const resolveClientEndpointParameters = (options)=>{
    return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        useGlobalEndpoint: options.useGlobalEndpoint ?? false,
        defaultSigningName: "sts"
    };
};
const commonParams = {
    UseGlobalEndpoint: {
        type: "builtInParams",
        name: "useGlobalEndpoint"
    },
    UseFIPS: {
        type: "builtInParams",
        name: "useFipsEndpoint"
    },
    Endpoint: {
        type: "builtInParams",
        name: "endpoint"
    },
    Region: {
        type: "builtInParams",
        name: "region"
    },
    UseDualStack: {
        type: "builtInParams",
        name: "useDualstackEndpoint"
    }
};
}),
"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/endpoint/endpointResolver.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  defaultEndpointResolver: function() { return defaultEndpointResolver; }
});
/* harmony import */var _smithy_util_endpoints__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/util-endpoints */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/index.js");
/* harmony import */var _ruleset__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ruleset */"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/endpoint/ruleset.js");


const defaultEndpointResolver = (endpointParams, context = {})=>{
    return (0, _smithy_util_endpoints__WEBPACK_IMPORTED_MODULE_0__.resolveEndpoint)(_ruleset__WEBPACK_IMPORTED_MODULE_1__.ruleSet, {
        endpointParams: endpointParams,
        logger: context.logger
    });
};
}),
"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/endpoint/ruleset.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  ruleSet: function() { return ruleSet; }
});
const F = "required", G = "type", H = "fn", I = "argv", J = "ref";
const a = false, b = true, c = "booleanEquals", d = "stringEquals", e = "sigv4", f = "sts", g = "us-east-1", h = "endpoint", i = "https://sts.{Region}.{PartitionResult#dnsSuffix}", j = "tree", k = "error", l = "getAttr", m = {
    [F]: false,
    [G]: "String"
}, n = {
    [F]: true,
    "default": false,
    [G]: "Boolean"
}, o = {
    [J]: "Endpoint"
}, p = {
    [H]: "isSet",
    [I]: [
        {
            [J]: "Region"
        }
    ]
}, q = {
    [J]: "Region"
}, r = {
    [H]: "aws.partition",
    [I]: [
        q
    ],
    "assign": "PartitionResult"
}, s = {
    [J]: "UseFIPS"
}, t = {
    [J]: "UseDualStack"
}, u = {
    "url": "https://sts.amazonaws.com",
    "properties": {
        "authSchemes": [
            {
                "name": e,
                "signingName": f,
                "signingRegion": g
            }
        ]
    },
    "headers": {}
}, v = {}, w = {
    "conditions": [
        {
            [H]: d,
            [I]: [
                q,
                "aws-global"
            ]
        }
    ],
    [h]: u,
    [G]: h
}, x = {
    [H]: c,
    [I]: [
        s,
        true
    ]
}, y = {
    [H]: c,
    [I]: [
        t,
        true
    ]
}, z = {
    [H]: l,
    [I]: [
        {
            [J]: "PartitionResult"
        },
        "supportsFIPS"
    ]
}, A = {
    [J]: "PartitionResult"
}, B = {
    [H]: c,
    [I]: [
        true,
        {
            [H]: l,
            [I]: [
                A,
                "supportsDualStack"
            ]
        }
    ]
}, C = [
    {
        [H]: "isSet",
        [I]: [
            o
        ]
    }
], D = [
    x
], E = [
    y
];
const _data = {
    version: "1.0",
    parameters: {
        Region: m,
        UseDualStack: n,
        UseFIPS: n,
        Endpoint: m,
        UseGlobalEndpoint: n
    },
    rules: [
        {
            conditions: [
                {
                    [H]: c,
                    [I]: [
                        {
                            [J]: "UseGlobalEndpoint"
                        },
                        b
                    ]
                },
                {
                    [H]: "not",
                    [I]: C
                },
                p,
                r,
                {
                    [H]: c,
                    [I]: [
                        s,
                        a
                    ]
                },
                {
                    [H]: c,
                    [I]: [
                        t,
                        a
                    ]
                }
            ],
            rules: [
                {
                    conditions: [
                        {
                            [H]: d,
                            [I]: [
                                q,
                                "ap-northeast-1"
                            ]
                        }
                    ],
                    endpoint: u,
                    [G]: h
                },
                {
                    conditions: [
                        {
                            [H]: d,
                            [I]: [
                                q,
                                "ap-south-1"
                            ]
                        }
                    ],
                    endpoint: u,
                    [G]: h
                },
                {
                    conditions: [
                        {
                            [H]: d,
                            [I]: [
                                q,
                                "ap-southeast-1"
                            ]
                        }
                    ],
                    endpoint: u,
                    [G]: h
                },
                {
                    conditions: [
                        {
                            [H]: d,
                            [I]: [
                                q,
                                "ap-southeast-2"
                            ]
                        }
                    ],
                    endpoint: u,
                    [G]: h
                },
                w,
                {
                    conditions: [
                        {
                            [H]: d,
                            [I]: [
                                q,
                                "ca-central-1"
                            ]
                        }
                    ],
                    endpoint: u,
                    [G]: h
                },
                {
                    conditions: [
                        {
                            [H]: d,
                            [I]: [
                                q,
                                "eu-central-1"
                            ]
                        }
                    ],
                    endpoint: u,
                    [G]: h
                },
                {
                    conditions: [
                        {
                            [H]: d,
                            [I]: [
                                q,
                                "eu-north-1"
                            ]
                        }
                    ],
                    endpoint: u,
                    [G]: h
                },
                {
                    conditions: [
                        {
                            [H]: d,
                            [I]: [
                                q,
                                "eu-west-1"
                            ]
                        }
                    ],
                    endpoint: u,
                    [G]: h
                },
                {
                    conditions: [
                        {
                            [H]: d,
                            [I]: [
                                q,
                                "eu-west-2"
                            ]
                        }
                    ],
                    endpoint: u,
                    [G]: h
                },
                {
                    conditions: [
                        {
                            [H]: d,
                            [I]: [
                                q,
                                "eu-west-3"
                            ]
                        }
                    ],
                    endpoint: u,
                    [G]: h
                },
                {
                    conditions: [
                        {
                            [H]: d,
                            [I]: [
                                q,
                                "sa-east-1"
                            ]
                        }
                    ],
                    endpoint: u,
                    [G]: h
                },
                {
                    conditions: [
                        {
                            [H]: d,
                            [I]: [
                                q,
                                g
                            ]
                        }
                    ],
                    endpoint: u,
                    [G]: h
                },
                {
                    conditions: [
                        {
                            [H]: d,
                            [I]: [
                                q,
                                "us-east-2"
                            ]
                        }
                    ],
                    endpoint: u,
                    [G]: h
                },
                {
                    conditions: [
                        {
                            [H]: d,
                            [I]: [
                                q,
                                "us-west-1"
                            ]
                        }
                    ],
                    endpoint: u,
                    [G]: h
                },
                {
                    conditions: [
                        {
                            [H]: d,
                            [I]: [
                                q,
                                "us-west-2"
                            ]
                        }
                    ],
                    endpoint: u,
                    [G]: h
                },
                {
                    endpoint: {
                        url: i,
                        properties: {
                            authSchemes: [
                                {
                                    name: e,
                                    signingName: f,
                                    signingRegion: "{Region}"
                                }
                            ]
                        },
                        headers: v
                    },
                    [G]: h
                }
            ],
            [G]: j
        },
        {
            conditions: C,
            rules: [
                {
                    conditions: D,
                    error: "Invalid Configuration: FIPS and custom endpoint are not supported",
                    [G]: k
                },
                {
                    conditions: E,
                    error: "Invalid Configuration: Dualstack and custom endpoint are not supported",
                    [G]: k
                },
                {
                    endpoint: {
                        url: o,
                        properties: v,
                        headers: v
                    },
                    [G]: h
                }
            ],
            [G]: j
        },
        {
            conditions: [
                p
            ],
            rules: [
                {
                    conditions: [
                        r
                    ],
                    rules: [
                        {
                            conditions: [
                                x,
                                y
                            ],
                            rules: [
                                {
                                    conditions: [
                                        {
                                            [H]: c,
                                            [I]: [
                                                b,
                                                z
                                            ]
                                        },
                                        B
                                    ],
                                    rules: [
                                        {
                                            endpoint: {
                                                url: "https://sts-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                                properties: v,
                                                headers: v
                                            },
                                            [G]: h
                                        }
                                    ],
                                    [G]: j
                                },
                                {
                                    error: "FIPS and DualStack are enabled, but this partition does not support one or both",
                                    [G]: k
                                }
                            ],
                            [G]: j
                        },
                        {
                            conditions: D,
                            rules: [
                                {
                                    conditions: [
                                        {
                                            [H]: c,
                                            [I]: [
                                                z,
                                                b
                                            ]
                                        }
                                    ],
                                    rules: [
                                        {
                                            conditions: [
                                                {
                                                    [H]: d,
                                                    [I]: [
                                                        {
                                                            [H]: l,
                                                            [I]: [
                                                                A,
                                                                "name"
                                                            ]
                                                        },
                                                        "aws-us-gov"
                                                    ]
                                                }
                                            ],
                                            endpoint: {
                                                url: "https://sts.{Region}.amazonaws.com",
                                                properties: v,
                                                headers: v
                                            },
                                            [G]: h
                                        },
                                        {
                                            endpoint: {
                                                url: "https://sts-fips.{Region}.{PartitionResult#dnsSuffix}",
                                                properties: v,
                                                headers: v
                                            },
                                            [G]: h
                                        }
                                    ],
                                    [G]: j
                                },
                                {
                                    error: "FIPS is enabled but this partition does not support FIPS",
                                    [G]: k
                                }
                            ],
                            [G]: j
                        },
                        {
                            conditions: E,
                            rules: [
                                {
                                    conditions: [
                                        B
                                    ],
                                    rules: [
                                        {
                                            endpoint: {
                                                url: "https://sts.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                                properties: v,
                                                headers: v
                                            },
                                            [G]: h
                                        }
                                    ],
                                    [G]: j
                                },
                                {
                                    error: "DualStack is enabled but this partition does not support DualStack",
                                    [G]: k
                                }
                            ],
                            [G]: j
                        },
                        w,
                        {
                            endpoint: {
                                url: i,
                                properties: v,
                                headers: v
                            },
                            [G]: h
                        }
                    ],
                    [G]: j
                }
            ],
            [G]: j
        },
        {
            error: "Invalid Configuration: Missing Region",
            [G]: k
        }
    ]
};
const ruleSet = _data;
}),
"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/models/STSServiceException.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  STSServiceException: function() { return STSServiceException; }
});
/* harmony import */var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/smithy-client */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/index.js");


class STSServiceException extends _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_0__.ServiceException {
    constructor(options){
        super(options);
        Object.setPrototypeOf(this, STSServiceException.prototype);
    }
}
}),
"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/models/models_0.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  AssumeRoleResponseFilterSensitiveLog: function() { return AssumeRoleResponseFilterSensitiveLog; },
  AssumeRoleWithWebIdentityRequestFilterSensitiveLog: function() { return AssumeRoleWithWebIdentityRequestFilterSensitiveLog; },
  AssumeRoleWithWebIdentityResponseFilterSensitiveLog: function() { return AssumeRoleWithWebIdentityResponseFilterSensitiveLog; },
  ExpiredTokenException: function() { return ExpiredTokenException; },
  IDPCommunicationErrorException: function() { return IDPCommunicationErrorException; },
  IDPRejectedClaimException: function() { return IDPRejectedClaimException; },
  InvalidIdentityTokenException: function() { return InvalidIdentityTokenException; },
  MalformedPolicyDocumentException: function() { return MalformedPolicyDocumentException; },
  PackedPolicyTooLargeException: function() { return PackedPolicyTooLargeException; },
  RegionDisabledException: function() { return RegionDisabledException; }
});
/* harmony import */var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/smithy-client */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/index.js");
/* harmony import */var _STSServiceException__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./STSServiceException */"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/models/STSServiceException.js");


class ExpiredTokenException extends _STSServiceException__WEBPACK_IMPORTED_MODULE_1__.STSServiceException {
    constructor(opts){
        super({
            name: "ExpiredTokenException",
            $fault: "client",
            ...opts
        });
        this.name = "ExpiredTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ExpiredTokenException.prototype);
    }
}
class MalformedPolicyDocumentException extends _STSServiceException__WEBPACK_IMPORTED_MODULE_1__.STSServiceException {
    constructor(opts){
        super({
            name: "MalformedPolicyDocumentException",
            $fault: "client",
            ...opts
        });
        this.name = "MalformedPolicyDocumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MalformedPolicyDocumentException.prototype);
    }
}
class PackedPolicyTooLargeException extends _STSServiceException__WEBPACK_IMPORTED_MODULE_1__.STSServiceException {
    constructor(opts){
        super({
            name: "PackedPolicyTooLargeException",
            $fault: "client",
            ...opts
        });
        this.name = "PackedPolicyTooLargeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PackedPolicyTooLargeException.prototype);
    }
}
class RegionDisabledException extends _STSServiceException__WEBPACK_IMPORTED_MODULE_1__.STSServiceException {
    constructor(opts){
        super({
            name: "RegionDisabledException",
            $fault: "client",
            ...opts
        });
        this.name = "RegionDisabledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RegionDisabledException.prototype);
    }
}
class IDPRejectedClaimException extends _STSServiceException__WEBPACK_IMPORTED_MODULE_1__.STSServiceException {
    constructor(opts){
        super({
            name: "IDPRejectedClaimException",
            $fault: "client",
            ...opts
        });
        this.name = "IDPRejectedClaimException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IDPRejectedClaimException.prototype);
    }
}
class InvalidIdentityTokenException extends _STSServiceException__WEBPACK_IMPORTED_MODULE_1__.STSServiceException {
    constructor(opts){
        super({
            name: "InvalidIdentityTokenException",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidIdentityTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidIdentityTokenException.prototype);
    }
}
class IDPCommunicationErrorException extends _STSServiceException__WEBPACK_IMPORTED_MODULE_1__.STSServiceException {
    constructor(opts){
        super({
            name: "IDPCommunicationErrorException",
            $fault: "client",
            ...opts
        });
        this.name = "IDPCommunicationErrorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IDPCommunicationErrorException.prototype);
    }
}
class InvalidAuthorizationMessageException extends (/* unused pure expression or super */ null && (__BaseException)) {
    constructor(opts){
        super({
            name: "InvalidAuthorizationMessageException",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidAuthorizationMessageException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAuthorizationMessageException.prototype);
    }
}
const CredentialsFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.SecretAccessKey && {
            SecretAccessKey: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING
        }
    });
const AssumeRoleResponseFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Credentials && {
            Credentials: CredentialsFilterSensitiveLog(obj.Credentials)
        }
    });
const AssumeRoleWithSAMLRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.SAMLAssertion && {
            SAMLAssertion: SENSITIVE_STRING
        }
    });
const AssumeRoleWithSAMLResponseFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Credentials && {
            Credentials: CredentialsFilterSensitiveLog(obj.Credentials)
        }
    });
const AssumeRoleWithWebIdentityRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.WebIdentityToken && {
            WebIdentityToken: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING
        }
    });
const AssumeRoleWithWebIdentityResponseFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Credentials && {
            Credentials: CredentialsFilterSensitiveLog(obj.Credentials)
        }
    });
const GetFederationTokenResponseFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Credentials && {
            Credentials: CredentialsFilterSensitiveLog(obj.Credentials)
        }
    });
const GetSessionTokenResponseFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Credentials && {
            Credentials: CredentialsFilterSensitiveLog(obj.Credentials)
        }
    });
}),
"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/protocols/Aws_query.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  de_AssumeRoleCommand: function() { return de_AssumeRoleCommand; },
  de_AssumeRoleWithWebIdentityCommand: function() { return de_AssumeRoleWithWebIdentityCommand; },
  se_AssumeRoleCommand: function() { return se_AssumeRoleCommand; },
  se_AssumeRoleWithWebIdentityCommand: function() { return se_AssumeRoleWithWebIdentityCommand; }
});
/* harmony import */var _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/protocol-http */"./node_modules/.pnpm/@smithy+protocol-http@3.1.1/node_modules/@smithy/protocol-http/dist-es/index.js");
/* harmony import */var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/smithy-client */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/index.js");
/* harmony import */var fast_xml_parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fast-xml-parser */"./node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/fxp.js");
/* harmony import */var fast_xml_parser__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(fast_xml_parser__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/models/models_0.js");
/* harmony import */var _models_STSServiceException__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/STSServiceException */"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/models/STSServiceException.js");





const se_AssumeRoleCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssumeRoleRequest(input, context),
        [_A]: _AR,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AssumeRoleWithSAMLCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssumeRoleWithSAMLRequest(input, context),
        [_A]: _ARWSAML,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AssumeRoleWithWebIdentityCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssumeRoleWithWebIdentityRequest(input, context),
        [_A]: _ARWWI,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DecodeAuthorizationMessageCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DecodeAuthorizationMessageRequest(input, context),
        [_A]: _DAM,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetAccessKeyInfoCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetAccessKeyInfoRequest(input, context),
        [_A]: _GAKI,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetCallerIdentityCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetCallerIdentityRequest(input, context),
        [_A]: _GCI,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetFederationTokenCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetFederationTokenRequest(input, context),
        [_A]: _GFT,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetSessionTokenCommand = async (input, context)=>{
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetSessionTokenRequest(input, context),
        [_A]: _GST,
        [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const de_AssumeRoleCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_AssumeRoleCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AssumeRoleResponse(data.AssumeRoleResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
const de_AssumeRoleCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
            throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
            throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
            throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
            throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_AssumeRoleWithSAMLCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_AssumeRoleWithSAMLCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AssumeRoleWithSAMLResponse(data.AssumeRoleWithSAMLResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
const de_AssumeRoleWithSAMLCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
            throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case "IDPRejectedClaim":
        case "com.amazonaws.sts#IDPRejectedClaimException":
            throw await de_IDPRejectedClaimExceptionRes(parsedOutput, context);
        case "InvalidIdentityToken":
        case "com.amazonaws.sts#InvalidIdentityTokenException":
            throw await de_InvalidIdentityTokenExceptionRes(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
            throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
            throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
            throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_AssumeRoleWithWebIdentityCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_AssumeRoleWithWebIdentityCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
const de_AssumeRoleWithWebIdentityCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
            throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case "IDPCommunicationError":
        case "com.amazonaws.sts#IDPCommunicationErrorException":
            throw await de_IDPCommunicationErrorExceptionRes(parsedOutput, context);
        case "IDPRejectedClaim":
        case "com.amazonaws.sts#IDPRejectedClaimException":
            throw await de_IDPRejectedClaimExceptionRes(parsedOutput, context);
        case "InvalidIdentityToken":
        case "com.amazonaws.sts#InvalidIdentityTokenException":
            throw await de_InvalidIdentityTokenExceptionRes(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
            throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
            throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
            throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_DecodeAuthorizationMessageCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_DecodeAuthorizationMessageCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DecodeAuthorizationMessageResponse(data.DecodeAuthorizationMessageResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
const de_DecodeAuthorizationMessageCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InvalidAuthorizationMessageException":
        case "com.amazonaws.sts#InvalidAuthorizationMessageException":
            throw await de_InvalidAuthorizationMessageExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_GetAccessKeyInfoCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_GetAccessKeyInfoCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetAccessKeyInfoResponse(data.GetAccessKeyInfoResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
const de_GetAccessKeyInfoCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode
    });
};
const de_GetCallerIdentityCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_GetCallerIdentityCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetCallerIdentityResponse(data.GetCallerIdentityResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
const de_GetCallerIdentityCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode
    });
};
const de_GetFederationTokenCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_GetFederationTokenCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetFederationTokenResponse(data.GetFederationTokenResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
const de_GetFederationTokenCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
            throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
            throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
            throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_GetSessionTokenCommand = async (output, context)=>{
    if (output.statusCode >= 300) return de_GetSessionTokenCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetSessionTokenResponse(data.GetSessionTokenResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return response;
};
const de_GetSessionTokenCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
            throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode
            });
    }
};
const de_ExpiredTokenExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = de_ExpiredTokenException(body.Error, context);
    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ExpiredTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, body);
};
const de_IDPCommunicationErrorExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = de_IDPCommunicationErrorException(body.Error, context);
    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_3__.IDPCommunicationErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, body);
};
const de_IDPRejectedClaimExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = de_IDPRejectedClaimException(body.Error, context);
    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_3__.IDPRejectedClaimException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, body);
};
const de_InvalidAuthorizationMessageExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = de_InvalidAuthorizationMessageException(body.Error, context);
    const exception = new InvalidAuthorizationMessageException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidIdentityTokenExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = de_InvalidIdentityTokenException(body.Error, context);
    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_3__.InvalidIdentityTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, body);
};
const de_MalformedPolicyDocumentExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = de_MalformedPolicyDocumentException(body.Error, context);
    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_3__.MalformedPolicyDocumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, body);
};
const de_PackedPolicyTooLargeExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = de_PackedPolicyTooLargeException(body.Error, context);
    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_3__.PackedPolicyTooLargeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, body);
};
const de_RegionDisabledExceptionRes = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = de_RegionDisabledException(body.Error, context);
    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_3__.RegionDisabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, body);
};
const se_AssumeRoleRequest = (input, context)=>{
    const entries = {};
    if (input[_RA] != null) entries[_RA] = input[_RA];
    if (input[_RSN] != null) entries[_RSN] = input[_RSN];
    if (input[_PA] != null) {
        const memberEntries = se_policyDescriptorListType(input[_PA], context);
        if (input[_PA]?.length === 0) entries.PolicyArns = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `PolicyArns.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_P] != null) entries[_P] = input[_P];
    if (input[_DS] != null) entries[_DS] = input[_DS];
    if (input[_T] != null) {
        const memberEntries = se_tagListType(input[_T], context);
        if (input[_T]?.length === 0) entries.Tags = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_TTK] != null) {
        const memberEntries = se_tagKeyListType(input[_TTK], context);
        if (input[_TTK]?.length === 0) entries.TransitiveTagKeys = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `TransitiveTagKeys.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_EI] != null) entries[_EI] = input[_EI];
    if (input[_SN] != null) entries[_SN] = input[_SN];
    if (input[_TC] != null) entries[_TC] = input[_TC];
    if (input[_SI] != null) entries[_SI] = input[_SI];
    if (input[_PC] != null) {
        const memberEntries = se_ProvidedContextsListType(input[_PC], context);
        if (input[_PC]?.length === 0) entries.ProvidedContexts = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `ProvidedContexts.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_AssumeRoleWithSAMLRequest = (input, context)=>{
    const entries = {};
    if (input[_RA] != null) entries[_RA] = input[_RA];
    if (input[_PAr] != null) entries[_PAr] = input[_PAr];
    if (input[_SAMLA] != null) entries[_SAMLA] = input[_SAMLA];
    if (input[_PA] != null) {
        const memberEntries = se_policyDescriptorListType(input[_PA], context);
        if (input[_PA]?.length === 0) entries.PolicyArns = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `PolicyArns.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_P] != null) entries[_P] = input[_P];
    if (input[_DS] != null) entries[_DS] = input[_DS];
    return entries;
};
const se_AssumeRoleWithWebIdentityRequest = (input, context)=>{
    const entries = {};
    if (input[_RA] != null) entries[_RA] = input[_RA];
    if (input[_RSN] != null) entries[_RSN] = input[_RSN];
    if (input[_WIT] != null) entries[_WIT] = input[_WIT];
    if (input[_PI] != null) entries[_PI] = input[_PI];
    if (input[_PA] != null) {
        const memberEntries = se_policyDescriptorListType(input[_PA], context);
        if (input[_PA]?.length === 0) entries.PolicyArns = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `PolicyArns.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_P] != null) entries[_P] = input[_P];
    if (input[_DS] != null) entries[_DS] = input[_DS];
    return entries;
};
const se_DecodeAuthorizationMessageRequest = (input, context)=>{
    const entries = {};
    if (input[_EM] != null) entries[_EM] = input[_EM];
    return entries;
};
const se_GetAccessKeyInfoRequest = (input, context)=>{
    const entries = {};
    if (input[_AKI] != null) entries[_AKI] = input[_AKI];
    return entries;
};
const se_GetCallerIdentityRequest = (input, context)=>{
    const entries = {};
    return entries;
};
const se_GetFederationTokenRequest = (input, context)=>{
    const entries = {};
    if (input[_N] != null) entries[_N] = input[_N];
    if (input[_P] != null) entries[_P] = input[_P];
    if (input[_PA] != null) {
        const memberEntries = se_policyDescriptorListType(input[_PA], context);
        if (input[_PA]?.length === 0) entries.PolicyArns = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `PolicyArns.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_DS] != null) entries[_DS] = input[_DS];
    if (input[_T] != null) {
        const memberEntries = se_tagListType(input[_T], context);
        if (input[_T]?.length === 0) entries.Tags = [];
        Object.entries(memberEntries).forEach(([key, value])=>{
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_GetSessionTokenRequest = (input, context)=>{
    const entries = {};
    if (input[_DS] != null) entries[_DS] = input[_DS];
    if (input[_SN] != null) entries[_SN] = input[_SN];
    if (input[_TC] != null) entries[_TC] = input[_TC];
    return entries;
};
const se_policyDescriptorListType = (input, context)=>{
    const entries = {};
    let counter = 1;
    for (const entry of input){
        if (entry === null) continue;
        const memberEntries = se_PolicyDescriptorType(entry, context);
        Object.entries(memberEntries).forEach(([key, value])=>{
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_PolicyDescriptorType = (input, context)=>{
    const entries = {};
    if (input[_a] != null) entries[_a] = input[_a];
    return entries;
};
const se_ProvidedContext = (input, context)=>{
    const entries = {};
    if (input[_PAro] != null) entries[_PAro] = input[_PAro];
    if (input[_CA] != null) entries[_CA] = input[_CA];
    return entries;
};
const se_ProvidedContextsListType = (input, context)=>{
    const entries = {};
    let counter = 1;
    for (const entry of input){
        if (entry === null) continue;
        const memberEntries = se_ProvidedContext(entry, context);
        Object.entries(memberEntries).forEach(([key, value])=>{
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_Tag = (input, context)=>{
    const entries = {};
    if (input[_K] != null) entries[_K] = input[_K];
    if (input[_Va] != null) entries[_Va] = input[_Va];
    return entries;
};
const se_tagKeyListType = (input, context)=>{
    const entries = {};
    let counter = 1;
    for (const entry of input){
        if (entry === null) continue;
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_tagListType = (input, context)=>{
    const entries = {};
    let counter = 1;
    for (const entry of input){
        if (entry === null) continue;
        const memberEntries = se_Tag(entry, context);
        Object.entries(memberEntries).forEach(([key, value])=>{
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const de_AssumedRoleUser = (output, context)=>{
    const contents = {};
    if (output[_ARI] != null) contents[_ARI] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_ARI]);
    if (output[_Ar] != null) contents[_Ar] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_Ar]);
    return contents;
};
const de_AssumeRoleResponse = (output, context)=>{
    const contents = {};
    if (output[_C] != null) contents[_C] = de_Credentials(output[_C], context);
    if (output[_ARU] != null) contents[_ARU] = de_AssumedRoleUser(output[_ARU], context);
    if (output[_PPS] != null) contents[_PPS] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output[_PPS]);
    if (output[_SI] != null) contents[_SI] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_SI]);
    return contents;
};
const de_AssumeRoleWithSAMLResponse = (output, context)=>{
    const contents = {};
    if (output[_C] != null) contents[_C] = de_Credentials(output[_C], context);
    if (output[_ARU] != null) contents[_ARU] = de_AssumedRoleUser(output[_ARU], context);
    if (output[_PPS] != null) contents[_PPS] = __strictParseInt32(output[_PPS]);
    if (output[_S] != null) contents[_S] = __expectString(output[_S]);
    if (output[_ST] != null) contents[_ST] = __expectString(output[_ST]);
    if (output[_I] != null) contents[_I] = __expectString(output[_I]);
    if (output[_Au] != null) contents[_Au] = __expectString(output[_Au]);
    if (output[_NQ] != null) contents[_NQ] = __expectString(output[_NQ]);
    if (output[_SI] != null) contents[_SI] = __expectString(output[_SI]);
    return contents;
};
const de_AssumeRoleWithWebIdentityResponse = (output, context)=>{
    const contents = {};
    if (output[_C] != null) contents[_C] = de_Credentials(output[_C], context);
    if (output[_SFWIT] != null) contents[_SFWIT] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_SFWIT]);
    if (output[_ARU] != null) contents[_ARU] = de_AssumedRoleUser(output[_ARU], context);
    if (output[_PPS] != null) contents[_PPS] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output[_PPS]);
    if (output[_Pr] != null) contents[_Pr] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_Pr]);
    if (output[_Au] != null) contents[_Au] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_Au]);
    if (output[_SI] != null) contents[_SI] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_SI]);
    return contents;
};
const de_Credentials = (output, context)=>{
    const contents = {};
    if (output[_AKI] != null) contents[_AKI] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_AKI]);
    if (output[_SAK] != null) contents[_SAK] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_SAK]);
    if (output[_STe] != null) contents[_STe] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_STe]);
    if (output[_E] != null) contents[_E] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTimeWithOffset)(output[_E]));
    return contents;
};
const de_DecodeAuthorizationMessageResponse = (output, context)=>{
    const contents = {};
    if (output[_DM] != null) contents[_DM] = __expectString(output[_DM]);
    return contents;
};
const de_ExpiredTokenException = (output, context)=>{
    const contents = {};
    if (output[_m] != null) contents[_m] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_m]);
    return contents;
};
const de_FederatedUser = (output, context)=>{
    const contents = {};
    if (output[_FUI] != null) contents[_FUI] = __expectString(output[_FUI]);
    if (output[_Ar] != null) contents[_Ar] = __expectString(output[_Ar]);
    return contents;
};
const de_GetAccessKeyInfoResponse = (output, context)=>{
    const contents = {};
    if (output[_Ac] != null) contents[_Ac] = __expectString(output[_Ac]);
    return contents;
};
const de_GetCallerIdentityResponse = (output, context)=>{
    const contents = {};
    if (output[_UI] != null) contents[_UI] = __expectString(output[_UI]);
    if (output[_Ac] != null) contents[_Ac] = __expectString(output[_Ac]);
    if (output[_Ar] != null) contents[_Ar] = __expectString(output[_Ar]);
    return contents;
};
const de_GetFederationTokenResponse = (output, context)=>{
    const contents = {};
    if (output[_C] != null) contents[_C] = de_Credentials(output[_C], context);
    if (output[_FU] != null) contents[_FU] = de_FederatedUser(output[_FU], context);
    if (output[_PPS] != null) contents[_PPS] = __strictParseInt32(output[_PPS]);
    return contents;
};
const de_GetSessionTokenResponse = (output, context)=>{
    const contents = {};
    if (output[_C] != null) contents[_C] = de_Credentials(output[_C], context);
    return contents;
};
const de_IDPCommunicationErrorException = (output, context)=>{
    const contents = {};
    if (output[_m] != null) contents[_m] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_m]);
    return contents;
};
const de_IDPRejectedClaimException = (output, context)=>{
    const contents = {};
    if (output[_m] != null) contents[_m] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_m]);
    return contents;
};
const de_InvalidAuthorizationMessageException = (output, context)=>{
    const contents = {};
    if (output[_m] != null) contents[_m] = __expectString(output[_m]);
    return contents;
};
const de_InvalidIdentityTokenException = (output, context)=>{
    const contents = {};
    if (output[_m] != null) contents[_m] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_m]);
    return contents;
};
const de_MalformedPolicyDocumentException = (output, context)=>{
    const contents = {};
    if (output[_m] != null) contents[_m] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_m]);
    return contents;
};
const de_PackedPolicyTooLargeException = (output, context)=>{
    const contents = {};
    if (output[_m] != null) contents[_m] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_m]);
    return contents;
};
const de_RegionDisabledException = (output, context)=>{
    const contents = {};
    if (output[_m] != null) contents[_m] = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[_m]);
    return contents;
};
const deserializeMetadata = (output)=>({
        httpStatusCode: output.statusCode,
        requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
    });
const collectBodyString = (streamBody, context)=>(0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.collectBody)(streamBody, context).then((body)=>context.utf8Encoder(body));
const throwDefaultError = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.withBaseException)(_models_STSServiceException__WEBPACK_IMPORTED_MODULE_4__.STSServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body)=>{
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
    };
    if (resolvedHostname !== undefined) contents.hostname = resolvedHostname;
    if (body !== undefined) contents.body = body;
    return new _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest(contents);
};
const SHARED_HEADERS = {
    "content-type": "application/x-www-form-urlencoded"
};
const _ = "2011-06-15";
const _A = "Action";
const _AKI = "AccessKeyId";
const _AR = "AssumeRole";
const _ARI = "AssumedRoleId";
const _ARU = "AssumedRoleUser";
const _ARWSAML = "AssumeRoleWithSAML";
const _ARWWI = "AssumeRoleWithWebIdentity";
const _Ac = "Account";
const _Ar = "Arn";
const _Au = "Audience";
const _C = "Credentials";
const _CA = "ContextAssertion";
const _DAM = "DecodeAuthorizationMessage";
const _DM = "DecodedMessage";
const _DS = "DurationSeconds";
const _E = "Expiration";
const _EI = "ExternalId";
const _EM = "EncodedMessage";
const _FU = "FederatedUser";
const _FUI = "FederatedUserId";
const _GAKI = "GetAccessKeyInfo";
const _GCI = "GetCallerIdentity";
const _GFT = "GetFederationToken";
const _GST = "GetSessionToken";
const _I = "Issuer";
const _K = "Key";
const _N = "Name";
const _NQ = "NameQualifier";
const _P = "Policy";
const _PA = "PolicyArns";
const _PAr = "PrincipalArn";
const _PAro = "ProviderArn";
const _PC = "ProvidedContexts";
const _PI = "ProviderId";
const _PPS = "PackedPolicySize";
const _Pr = "Provider";
const _RA = "RoleArn";
const _RSN = "RoleSessionName";
const _S = "Subject";
const _SAK = "SecretAccessKey";
const _SAMLA = "SAMLAssertion";
const _SFWIT = "SubjectFromWebIdentityToken";
const _SI = "SourceIdentity";
const _SN = "SerialNumber";
const _ST = "SubjectType";
const _STe = "SessionToken";
const _T = "Tags";
const _TC = "TokenCode";
const _TTK = "TransitiveTagKeys";
const _UI = "UserId";
const _V = "Version";
const _Va = "Value";
const _WIT = "WebIdentityToken";
const _a = "arn";
const _m = "message";
const parseBody = (streamBody, context)=>collectBodyString(streamBody, context).then((encoded)=>{
        if (encoded.length) {
            const parser = new fast_xml_parser__WEBPACK_IMPORTED_MODULE_2__.XMLParser({
                attributeNamePrefix: "",
                htmlEntities: true,
                ignoreAttributes: false,
                ignoreDeclaration: true,
                parseTagValue: false,
                trimValues: false,
                tagValueProcessor: (_, val)=>val.trim() === "" && val.includes("\n") ? "" : undefined
            });
            parser.addEntity("#xD", "\r");
            parser.addEntity("#10", "\n");
            const parsedObj = parser.parse(encoded);
            const textNodeName = "#text";
            const key = Object.keys(parsedObj)[0];
            const parsedObjToReturn = parsedObj[key];
            if (parsedObjToReturn[textNodeName]) {
                parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
                delete parsedObjToReturn[textNodeName];
            }
            return (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getValueFromTextNode)(parsedObjToReturn);
        }
        return {};
    });
const parseErrorBody = async (errorBody, context)=>{
    const value = await parseBody(errorBody, context);
    if (value.Error) value.Error.message = value.Error.message ?? value.Error.Message;
    return value;
};
const buildFormUrlencodedString = (formEntries)=>Object.entries(formEntries).map(([key, value])=>(0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.extendedEncodeURIComponent)(key) + "=" + (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.extendedEncodeURIComponent)(value)).join("&");
const loadQueryErrorCode = (output, data)=>{
    if (data.Error?.Code !== undefined) return data.Error.Code;
    if (output.statusCode == 404) return "NotFound";
};
}),
"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/runtimeConfig.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getRuntimeConfig: function() { return getRuntimeConfig; }
});
/* harmony import */var _package_json__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../package.json */"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/package.json");
/* harmony import */var _defaultStsRoleAssumers__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./defaultStsRoleAssumers */"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/defaultStsRoleAssumers.js");
/* harmony import */var _aws_sdk_core__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @aws-sdk/core */"./node_modules/.pnpm/@aws-sdk+core@3.490.0/node_modules/@aws-sdk/core/dist-es/client/emitWarningIfUnsupportedVersion.js");
/* harmony import */var _aws_sdk_core__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @aws-sdk/core */"./node_modules/.pnpm/@aws-sdk+core@3.490.0/node_modules/@aws-sdk/core/dist-es/httpAuthSchemes/aws_sdk/AwsSdkSigV4Signer.js");
/* harmony import */var _aws_sdk_credential_provider_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/credential-provider-node */"./node_modules/.pnpm/@aws-sdk+credential-provider-node@3.490.0/node_modules/@aws-sdk/credential-provider-node/dist-es/index.js");
/* harmony import */var _aws_sdk_util_user_agent_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/util-user-agent-node */"./node_modules/.pnpm/@aws-sdk+util-user-agent-node@3.489.0/node_modules/@aws-sdk/util-user-agent-node/dist-es/index.js");
/* harmony import */var _smithy_config_resolver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @smithy/config-resolver */"./node_modules/.pnpm/@smithy+config-resolver@2.1.1/node_modules/@smithy/config-resolver/dist-es/index.js");
/* harmony import */var _smithy_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @smithy/core */"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/index.js");
/* harmony import */var _smithy_hash_node__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @smithy/hash-node */"./node_modules/.pnpm/@smithy+hash-node@2.1.1/node_modules/@smithy/hash-node/dist-es/index.js");
/* harmony import */var _smithy_middleware_retry__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @smithy/middleware-retry */"./node_modules/.pnpm/@smithy+middleware-retry@2.1.1/node_modules/@smithy/middleware-retry/dist-es/index.js");
/* harmony import */var _smithy_node_config_provider__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @smithy/node-config-provider */"./node_modules/.pnpm/@smithy+node-config-provider@2.2.1/node_modules/@smithy/node-config-provider/dist-es/index.js");
/* harmony import */var _smithy_node_http_handler__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @smithy/node-http-handler */"./node_modules/.pnpm/@smithy+node-http-handler@2.3.1/node_modules/@smithy/node-http-handler/dist-es/index.js");
/* harmony import */var _smithy_util_body_length_node__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @smithy/util-body-length-node */"./node_modules/.pnpm/@smithy+util-body-length-node@2.2.1/node_modules/@smithy/util-body-length-node/dist-es/index.js");
/* harmony import */var _smithy_util_retry__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @smithy/util-retry */"./node_modules/.pnpm/@smithy+util-retry@2.1.1/node_modules/@smithy/util-retry/dist-es/index.js");
/* harmony import */var _runtimeConfig_shared__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./runtimeConfig.shared */"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/runtimeConfig.shared.js");
/* harmony import */var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @smithy/smithy-client */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/index.js");
/* harmony import */var _smithy_util_defaults_mode_node__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @smithy/util-defaults-mode-node */"./node_modules/.pnpm/@smithy+util-defaults-mode-node@2.1.1/node_modules/@smithy/util-defaults-mode-node/dist-es/index.js");

















const getRuntimeConfig = (config)=>{
    (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_10__.emitWarningIfUnsupportedVersion)(process.version);
    const defaultsMode = (0, _smithy_util_defaults_mode_node__WEBPACK_IMPORTED_MODULE_11__.resolveDefaultsModeConfig)(config);
    const defaultConfigProvider = ()=>defaultsMode().then(_smithy_smithy_client__WEBPACK_IMPORTED_MODULE_10__.loadConfigsForDefaultMode);
    const clientSharedValues = (0, _runtimeConfig_shared__WEBPACK_IMPORTED_MODULE_12__.getRuntimeConfig)(config);
    (0, _aws_sdk_core__WEBPACK_IMPORTED_MODULE_13__.emitWarningIfUnsupportedVersion)(process.version);
    return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? _smithy_util_body_length_node__WEBPACK_IMPORTED_MODULE_8__.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? (0, _defaultStsRoleAssumers__WEBPACK_IMPORTED_MODULE_14__.decorateDefaultCredentialProvider)(_aws_sdk_credential_provider_node__WEBPACK_IMPORTED_MODULE_0__.defaultProvider),
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, _aws_sdk_util_user_agent_node__WEBPACK_IMPORTED_MODULE_1__.defaultUserAgent)({
            serviceId: clientSharedValues.serviceId,
            clientVersion: _package_json__WEBPACK_IMPORTED_MODULE_15__.version
        }),
        httpAuthSchemes: config?.httpAuthSchemes ?? [
            {
                schemeId: "aws.auth#sigv4",
                identityProvider: (ipc)=>ipc.getIdentityProvider("aws.auth#sigv4") || (async (idProps)=>await (0, _defaultStsRoleAssumers__WEBPACK_IMPORTED_MODULE_14__.decorateDefaultCredentialProvider)(_aws_sdk_credential_provider_node__WEBPACK_IMPORTED_MODULE_0__.defaultProvider)(idProps?.__config || {})()),
                signer: new _aws_sdk_core__WEBPACK_IMPORTED_MODULE_16__.AwsSdkSigV4Signer()
            },
            {
                schemeId: "smithy.api#noAuth",
                identityProvider: (ipc)=>ipc.getIdentityProvider("smithy.api#noAuth") || (async ()=>({})),
                signer: new _smithy_core__WEBPACK_IMPORTED_MODULE_3__.NoAuthSigner()
            }
        ],
        maxAttempts: config?.maxAttempts ?? (0, _smithy_node_config_provider__WEBPACK_IMPORTED_MODULE_6__.loadConfig)(_smithy_middleware_retry__WEBPACK_IMPORTED_MODULE_5__.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, _smithy_node_config_provider__WEBPACK_IMPORTED_MODULE_6__.loadConfig)(_smithy_config_resolver__WEBPACK_IMPORTED_MODULE_2__.NODE_REGION_CONFIG_OPTIONS, _smithy_config_resolver__WEBPACK_IMPORTED_MODULE_2__.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new _smithy_node_http_handler__WEBPACK_IMPORTED_MODULE_7__.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, _smithy_node_config_provider__WEBPACK_IMPORTED_MODULE_6__.loadConfig)({
            ..._smithy_middleware_retry__WEBPACK_IMPORTED_MODULE_5__.NODE_RETRY_MODE_CONFIG_OPTIONS,
            default: async ()=>(await defaultConfigProvider()).retryMode || _smithy_util_retry__WEBPACK_IMPORTED_MODULE_9__.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? _smithy_hash_node__WEBPACK_IMPORTED_MODULE_4__.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? _smithy_node_http_handler__WEBPACK_IMPORTED_MODULE_7__.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, _smithy_node_config_provider__WEBPACK_IMPORTED_MODULE_6__.loadConfig)(_smithy_config_resolver__WEBPACK_IMPORTED_MODULE_2__.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, _smithy_node_config_provider__WEBPACK_IMPORTED_MODULE_6__.loadConfig)(_smithy_config_resolver__WEBPACK_IMPORTED_MODULE_2__.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
    };
};
}),
"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/runtimeConfig.shared.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getRuntimeConfig: function() { return getRuntimeConfig; }
});
/* harmony import */var _aws_sdk_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @aws-sdk/core */"./node_modules/.pnpm/@aws-sdk+core@3.490.0/node_modules/@aws-sdk/core/dist-es/httpAuthSchemes/aws_sdk/AwsSdkSigV4Signer.js");
/* harmony import */var _smithy_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/core */"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/index.js");
/* harmony import */var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/smithy-client */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/index.js");
/* harmony import */var _smithy_url_parser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @smithy/url-parser */"./node_modules/.pnpm/@smithy+url-parser@2.1.1/node_modules/@smithy/url-parser/dist-es/index.js");
/* harmony import */var _smithy_util_base64__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @smithy/util-base64 */"./node_modules/.pnpm/@smithy+util-base64@2.1.1/node_modules/@smithy/util-base64/dist-es/index.js");
/* harmony import */var _smithy_util_utf8__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @smithy/util-utf8 */"./node_modules/.pnpm/@smithy+util-utf8@2.1.1/node_modules/@smithy/util-utf8/dist-es/index.js");
/* harmony import */var _auth_httpAuthSchemeProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./auth/httpAuthSchemeProvider */"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/auth/httpAuthSchemeProvider.js");
/* harmony import */var _endpoint_endpointResolver__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./endpoint/endpointResolver */"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/endpoint/endpointResolver.js");








const getRuntimeConfig = (config)=>{
    return {
        apiVersion: "2011-06-15",
        base64Decoder: config?.base64Decoder ?? _smithy_util_base64__WEBPACK_IMPORTED_MODULE_2__.fromBase64,
        base64Encoder: config?.base64Encoder ?? _smithy_util_base64__WEBPACK_IMPORTED_MODULE_2__.toBase64,
        disableHostPrefix: config?.disableHostPrefix ?? false,
        endpointProvider: config?.endpointProvider ?? _endpoint_endpointResolver__WEBPACK_IMPORTED_MODULE_4__.defaultEndpointResolver,
        extensions: config?.extensions ?? [],
        httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? _auth_httpAuthSchemeProvider__WEBPACK_IMPORTED_MODULE_5__.defaultSTSHttpAuthSchemeProvider,
        httpAuthSchemes: config?.httpAuthSchemes ?? [
            {
                schemeId: "aws.auth#sigv4",
                identityProvider: (ipc)=>ipc.getIdentityProvider("aws.auth#sigv4"),
                signer: new _aws_sdk_core__WEBPACK_IMPORTED_MODULE_6__.AwsSdkSigV4Signer()
            },
            {
                schemeId: "smithy.api#noAuth",
                identityProvider: (ipc)=>ipc.getIdentityProvider("smithy.api#noAuth") || (async ()=>({})),
                signer: new _smithy_core__WEBPACK_IMPORTED_MODULE_0__.NoAuthSigner()
            }
        ],
        logger: config?.logger ?? new _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.NoOpLogger(),
        serviceId: config?.serviceId ?? "STS",
        urlParser: config?.urlParser ?? _smithy_url_parser__WEBPACK_IMPORTED_MODULE_7__.parseUrl,
        utf8Decoder: config?.utf8Decoder ?? _smithy_util_utf8__WEBPACK_IMPORTED_MODULE_3__.fromUtf8,
        utf8Encoder: config?.utf8Encoder ?? _smithy_util_utf8__WEBPACK_IMPORTED_MODULE_3__.toUtf8
    };
};
}),
"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/runtimeExtensions.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  resolveRuntimeExtensions: function() { return resolveRuntimeExtensions; }
});
/* harmony import */var _aws_sdk_region_config_resolver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/region-config-resolver */"./node_modules/.pnpm/@aws-sdk+region-config-resolver@3.489.0/node_modules/@aws-sdk/region-config-resolver/dist-es/extensions/index.js");
/* harmony import */var _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/protocol-http */"./node_modules/.pnpm/@smithy+protocol-http@3.1.1/node_modules/@smithy/protocol-http/dist-es/index.js");
/* harmony import */var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/smithy-client */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/index.js");
/* harmony import */var _auth_httpAuthExtensionConfiguration__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./auth/httpAuthExtensionConfiguration */"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/dist-es/auth/httpAuthExtensionConfiguration.js");




const asPartial = (t)=>t;
const resolveRuntimeExtensions = (runtimeConfig, extensions)=>{
    const extensionConfiguration = {
        ...asPartial((0, _aws_sdk_region_config_resolver__WEBPACK_IMPORTED_MODULE_2__.getAwsRegionExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getDefaultExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, _auth_httpAuthExtensionConfiguration__WEBPACK_IMPORTED_MODULE_3__.getHttpAuthExtensionConfiguration)(runtimeConfig))
    };
    extensions.forEach((extension)=>extension.configure(extensionConfiguration));
    return {
        ...runtimeConfig,
        ...(0, _aws_sdk_region_config_resolver__WEBPACK_IMPORTED_MODULE_2__.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
        ...(0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolveDefaultRuntimeConfig)(extensionConfiguration),
        ...(0, _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
        ...(0, _auth_httpAuthExtensionConfiguration__WEBPACK_IMPORTED_MODULE_3__.resolveHttpAuthRuntimeConfig)(extensionConfiguration)
    };
};
}),
"./node_modules/.pnpm/@aws-sdk+core@3.490.0/node_modules/@aws-sdk/core/dist-es/client/emitWarningIfUnsupportedVersion.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  emitWarningIfUnsupportedVersion: function() { return emitWarningIfUnsupportedVersion; }
});
let warningEmitted = false;
const emitWarningIfUnsupportedVersion = (version)=>{
    if (version && !warningEmitted && parseInt(version.substring(1, version.indexOf("."))) < 16) {
        warningEmitted = true;
        process.emitWarning(`NodeDeprecationWarning: The AWS SDK for JavaScript (v3) will
no longer support Node.js 14.x on May 1, 2024.

To continue receiving updates to AWS services, bug fixes, and security
updates please upgrade to an active Node.js LTS version.

More information can be found at: https://a.co/dzr2AJd`);
    }
};
}),
"./node_modules/.pnpm/@aws-sdk+core@3.490.0/node_modules/@aws-sdk/core/dist-es/httpAuthSchemes/aws_sdk/AwsSdkSigV4Signer.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  AwsSdkSigV4Signer: function() { return AwsSdkSigV4Signer; }
});
/* harmony import */var _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/protocol-http */"./node_modules/.pnpm/@smithy+protocol-http@3.1.1/node_modules/@smithy/protocol-http/dist-es/index.js");
/* harmony import */var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils */"./node_modules/.pnpm/@aws-sdk+core@3.490.0/node_modules/@aws-sdk/core/dist-es/httpAuthSchemes/utils/getSkewCorrectedDate.js");
/* harmony import */var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils */"./node_modules/.pnpm/@aws-sdk+core@3.490.0/node_modules/@aws-sdk/core/dist-es/httpAuthSchemes/utils/getDateHeader.js");
/* harmony import */var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils */"./node_modules/.pnpm/@aws-sdk+core@3.490.0/node_modules/@aws-sdk/core/dist-es/httpAuthSchemes/utils/getUpdatedSystemClockOffset.js");


const throwSigningPropertyError = (name, property)=>{
    if (!property) throw new Error(`Property \`${name}\` is not resolved for AWS SDK SigV4Auth`);
    return property;
};
const validateSigningProperties = async (signingProperties)=>{
    const context = throwSigningPropertyError("context", signingProperties.context);
    const config = throwSigningPropertyError("config", signingProperties.config);
    const authScheme = context.endpointV2?.properties?.authSchemes?.[0];
    const signerFunction = throwSigningPropertyError("signer", config.signer);
    const signer = await signerFunction(authScheme);
    const signingRegion = signingProperties?.signingRegion;
    const signingName = signingProperties?.signingName;
    return {
        config,
        signer,
        signingRegion,
        signingName
    };
};
class AwsSdkSigV4Signer {
    async sign(httpRequest, identity, signingProperties) {
        if (!_smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest.isInstance(httpRequest)) throw new Error("The request is not an instance of `HttpRequest` and cannot be signed");
        const { config, signer, signingRegion, signingName } = await validateSigningProperties(signingProperties);
        const signedRequest = await signer.sign(httpRequest, {
            signingDate: (0, _utils__WEBPACK_IMPORTED_MODULE_1__.getSkewCorrectedDate)(config.systemClockOffset),
            signingRegion: signingRegion,
            signingService: signingName
        });
        return signedRequest;
    }
    errorHandler(signingProperties) {
        return (error)=>{
            const serverTime = error.ServerTime ?? (0, _utils__WEBPACK_IMPORTED_MODULE_2__.getDateHeader)(error.$response);
            if (serverTime) {
                const config = throwSigningPropertyError("config", signingProperties.config);
                config.systemClockOffset = (0, _utils__WEBPACK_IMPORTED_MODULE_3__.getUpdatedSystemClockOffset)(serverTime, config.systemClockOffset);
            }
            throw error;
        };
    }
    successHandler(httpResponse, signingProperties) {
        const dateHeader = (0, _utils__WEBPACK_IMPORTED_MODULE_2__.getDateHeader)(httpResponse);
        if (dateHeader) {
            const config = throwSigningPropertyError("config", signingProperties.config);
            config.systemClockOffset = (0, _utils__WEBPACK_IMPORTED_MODULE_3__.getUpdatedSystemClockOffset)(dateHeader, config.systemClockOffset);
        }
    }
}
const AWSSDKSigV4Signer = (/* unused pure expression or super */ null && (AwsSdkSigV4Signer));
}),
"./node_modules/.pnpm/@aws-sdk+core@3.490.0/node_modules/@aws-sdk/core/dist-es/httpAuthSchemes/aws_sdk/resolveAwsSdkSigV4Config.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  resolveAwsSdkSigV4Config: function() { return resolveAwsSdkSigV4Config; }
});
/* harmony import */var _smithy_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/core */"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/index.js");
/* harmony import */var _smithy_signature_v4__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/signature-v4 */"./node_modules/.pnpm/@smithy+signature-v4@2.1.1/node_modules/@smithy/signature-v4/dist-es/index.js");


const resolveAwsSdkSigV4Config = (config)=>{
    let normalizedCreds;
    if (config.credentials) normalizedCreds = (0, _smithy_core__WEBPACK_IMPORTED_MODULE_0__.memoizeIdentityProvider)(config.credentials, _smithy_core__WEBPACK_IMPORTED_MODULE_0__.isIdentityExpired, _smithy_core__WEBPACK_IMPORTED_MODULE_0__.doesIdentityRequireRefresh);
    if (!normalizedCreds) {
        if (config.credentialDefaultProvider) normalizedCreds = (0, _smithy_core__WEBPACK_IMPORTED_MODULE_0__.normalizeProvider)(config.credentialDefaultProvider(config));
        else normalizedCreds = async ()=>{
            throw new Error("`credentials` is missing");
        };
    }
    const { signingEscapePath = true, systemClockOffset = config.systemClockOffset || 0, sha256 } = config;
    let signer;
    if (config.signer) signer = (0, _smithy_core__WEBPACK_IMPORTED_MODULE_0__.normalizeProvider)(config.signer);
    else if (config.regionInfoProvider) signer = ()=>(0, _smithy_core__WEBPACK_IMPORTED_MODULE_0__.normalizeProvider)(config.region)().then(async (region)=>[
                await config.regionInfoProvider(region, {
                    useFipsEndpoint: await config.useFipsEndpoint(),
                    useDualstackEndpoint: await config.useDualstackEndpoint()
                }) || {},
                region
            ]).then(([regionInfo, region])=>{
            const { signingRegion, signingService } = regionInfo;
            config.signingRegion = config.signingRegion || signingRegion || region;
            config.signingName = config.signingName || signingService || config.serviceId;
            const params = {
                ...config,
                credentials: normalizedCreds,
                region: config.signingRegion,
                service: config.signingName,
                sha256,
                uriEscapePath: signingEscapePath
            };
            const SignerCtor = config.signerConstructor || _smithy_signature_v4__WEBPACK_IMPORTED_MODULE_1__.SignatureV4;
            return new SignerCtor(params);
        });
    else signer = async (authScheme)=>{
        authScheme = Object.assign({}, {
            name: "sigv4",
            signingName: config.signingName || config.defaultSigningName,
            signingRegion: await (0, _smithy_core__WEBPACK_IMPORTED_MODULE_0__.normalizeProvider)(config.region)(),
            properties: {}
        }, authScheme);
        const signingRegion = authScheme.signingRegion;
        const signingService = authScheme.signingName;
        config.signingRegion = config.signingRegion || signingRegion;
        config.signingName = config.signingName || signingService || config.serviceId;
        const params = {
            ...config,
            credentials: normalizedCreds,
            region: config.signingRegion,
            service: config.signingName,
            sha256,
            uriEscapePath: signingEscapePath
        };
        const SignerCtor = config.signerConstructor || _smithy_signature_v4__WEBPACK_IMPORTED_MODULE_1__.SignatureV4;
        return new SignerCtor(params);
    };
    return {
        ...config,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
    };
};
const resolveAWSSDKSigV4Config = (/* unused pure expression or super */ null && (resolveAwsSdkSigV4Config));
}),
"./node_modules/.pnpm/@aws-sdk+core@3.490.0/node_modules/@aws-sdk/core/dist-es/httpAuthSchemes/utils/getDateHeader.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getDateHeader: function() { return getDateHeader; }
});
/* harmony import */var _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/protocol-http */"./node_modules/.pnpm/@smithy+protocol-http@3.1.1/node_modules/@smithy/protocol-http/dist-es/index.js");

const getDateHeader = (response)=>_smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpResponse.isInstance(response) ? response.headers?.date ?? response.headers?.Date : undefined;
}),
"./node_modules/.pnpm/@aws-sdk+core@3.490.0/node_modules/@aws-sdk/core/dist-es/httpAuthSchemes/utils/getSkewCorrectedDate.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getSkewCorrectedDate: function() { return getSkewCorrectedDate; }
});
const getSkewCorrectedDate = (systemClockOffset)=>new Date(Date.now() + systemClockOffset);
}),
"./node_modules/.pnpm/@aws-sdk+core@3.490.0/node_modules/@aws-sdk/core/dist-es/httpAuthSchemes/utils/getUpdatedSystemClockOffset.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getUpdatedSystemClockOffset: function() { return getUpdatedSystemClockOffset; }
});
/* harmony import */var _isClockSkewed__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isClockSkewed */"./node_modules/.pnpm/@aws-sdk+core@3.490.0/node_modules/@aws-sdk/core/dist-es/httpAuthSchemes/utils/isClockSkewed.js");

const getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset)=>{
    const clockTimeInMs = Date.parse(clockTime);
    if ((0, _isClockSkewed__WEBPACK_IMPORTED_MODULE_0__.isClockSkewed)(clockTimeInMs, currentSystemClockOffset)) return clockTimeInMs - Date.now();
    return currentSystemClockOffset;
};
}),
"./node_modules/.pnpm/@aws-sdk+core@3.490.0/node_modules/@aws-sdk/core/dist-es/httpAuthSchemes/utils/isClockSkewed.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  isClockSkewed: function() { return isClockSkewed; }
});
/* harmony import */var _getSkewCorrectedDate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getSkewCorrectedDate */"./node_modules/.pnpm/@aws-sdk+core@3.490.0/node_modules/@aws-sdk/core/dist-es/httpAuthSchemes/utils/getSkewCorrectedDate.js");

const isClockSkewed = (clockTime, systemClockOffset)=>Math.abs((0, _getSkewCorrectedDate__WEBPACK_IMPORTED_MODULE_0__.getSkewCorrectedDate)(systemClockOffset).getTime() - clockTime) >= 300000;
}),
"./node_modules/.pnpm/@aws-sdk+credential-provider-env@3.489.0/node_modules/@aws-sdk/credential-provider-env/dist-es/fromEnv.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  fromEnv: function() { return fromEnv; }
});
/* harmony import */var _smithy_property_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/property-provider */"./node_modules/.pnpm/@smithy+property-provider@2.1.1/node_modules/@smithy/property-provider/dist-es/CredentialsProviderError.js");

const ENV_KEY = "AWS_ACCESS_KEY_ID";
const ENV_SECRET = "AWS_SECRET_ACCESS_KEY";
const ENV_SESSION = "AWS_SESSION_TOKEN";
const ENV_EXPIRATION = "AWS_CREDENTIAL_EXPIRATION";
const ENV_CREDENTIAL_SCOPE = "AWS_CREDENTIAL_SCOPE";
const fromEnv = ()=>async ()=>{
        const accessKeyId = process.env[ENV_KEY];
        const secretAccessKey = process.env[ENV_SECRET];
        const sessionToken = process.env[ENV_SESSION];
        const expiry = process.env[ENV_EXPIRATION];
        const credentialScope = process.env[ENV_CREDENTIAL_SCOPE];
        if (accessKeyId && secretAccessKey) return {
            accessKeyId,
            secretAccessKey,
            ...sessionToken && {
                sessionToken
            },
            ...expiry && {
                expiration: new Date(expiry)
            },
            ...credentialScope && {
                credentialScope
            }
        };
        throw new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_0__.CredentialsProviderError("Unable to find environment variable credentials.");
    };
}),
"./node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.490.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/fromIni.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  fromIni: function() { return fromIni; }
});
/* harmony import */var _smithy_shared_ini_file_loader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/shared-ini-file-loader */"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/index.js");
/* harmony import */var _resolveProfileData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./resolveProfileData */"./node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.490.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProfileData.js");


const fromIni = (init = {})=>async ()=>{
        const profiles = await (0, _smithy_shared_ini_file_loader__WEBPACK_IMPORTED_MODULE_0__.parseKnownFiles)(init);
        return (0, _resolveProfileData__WEBPACK_IMPORTED_MODULE_1__.resolveProfileData)((0, _smithy_shared_ini_file_loader__WEBPACK_IMPORTED_MODULE_0__.getProfileName)(init), profiles, init);
    };
}),
"./node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.490.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  fromIni: function() { return /* reexport safe */ _fromIni__WEBPACK_IMPORTED_MODULE_0__.fromIni; }
});
/* harmony import */var _fromIni__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fromIni */"./node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.490.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/fromIni.js");

}),
"./node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.490.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveAssumeRoleCredentials.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  isAssumeRoleProfile: function() { return isAssumeRoleProfile; },
  resolveAssumeRoleCredentials: function() { return resolveAssumeRoleCredentials; }
});
/* harmony import */var _smithy_property_provider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @smithy/property-provider */"./node_modules/.pnpm/@smithy+property-provider@2.1.1/node_modules/@smithy/property-provider/dist-es/CredentialsProviderError.js");
/* harmony import */var _smithy_shared_ini_file_loader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/shared-ini-file-loader */"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/index.js");
/* harmony import */var _resolveCredentialSource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./resolveCredentialSource */"./node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.490.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveCredentialSource.js");
/* harmony import */var _resolveProfileData__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./resolveProfileData */"./node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.490.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProfileData.js");




const isAssumeRoleProfile = (arg)=>Boolean(arg) && typeof arg === "object" && typeof arg.role_arn === "string" && [
        "undefined",
        "string"
    ].indexOf(typeof arg.role_session_name) > -1 && [
        "undefined",
        "string"
    ].indexOf(typeof arg.external_id) > -1 && [
        "undefined",
        "string"
    ].indexOf(typeof arg.mfa_serial) > -1 && (isAssumeRoleWithSourceProfile(arg) || isAssumeRoleWithProviderProfile(arg));
const isAssumeRoleWithSourceProfile = (arg)=>typeof arg.source_profile === "string" && typeof arg.credential_source === "undefined";
const isAssumeRoleWithProviderProfile = (arg)=>typeof arg.credential_source === "string" && typeof arg.source_profile === "undefined";
const resolveAssumeRoleCredentials = async (profileName, profiles, options, visitedProfiles = {})=>{
    const data = profiles[profileName];
    if (!options.roleAssumer) throw new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_3__.CredentialsProviderError(`Profile ${profileName} requires a role to be assumed, but no role assumption callback was provided.`, false);
    const { source_profile } = data;
    if (source_profile && source_profile in visitedProfiles) throw new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_3__.CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile` + ` ${(0, _smithy_shared_ini_file_loader__WEBPACK_IMPORTED_MODULE_0__.getProfileName)(options)}. Profiles visited: ` + Object.keys(visitedProfiles).join(", "), false);
    const sourceCredsProvider = source_profile ? (0, _resolveProfileData__WEBPACK_IMPORTED_MODULE_2__.resolveProfileData)(source_profile, profiles, options, {
        ...visitedProfiles,
        [source_profile]: true
    }) : (0, _resolveCredentialSource__WEBPACK_IMPORTED_MODULE_1__.resolveCredentialSource)(data.credential_source, profileName)();
    const params = {
        RoleArn: data.role_arn,
        RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,
        ExternalId: data.external_id,
        DurationSeconds: parseInt(data.duration_seconds || "3600", 10)
    };
    const { mfa_serial } = data;
    if (mfa_serial) {
        if (!options.mfaCodeProvider) throw new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_3__.CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, false);
        params.SerialNumber = mfa_serial;
        params.TokenCode = await options.mfaCodeProvider(mfa_serial);
    }
    const sourceCreds = await sourceCredsProvider;
    return options.roleAssumer(sourceCreds, params);
};
}),
"./node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.490.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveCredentialSource.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  resolveCredentialSource: function() { return resolveCredentialSource; }
});
/* harmony import */var _aws_sdk_credential_provider_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/credential-provider-env */"./node_modules/.pnpm/@aws-sdk+credential-provider-env@3.489.0/node_modules/@aws-sdk/credential-provider-env/dist-es/fromEnv.js");
/* harmony import */var _smithy_credential_provider_imds__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/credential-provider-imds */"./node_modules/.pnpm/@smithy+credential-provider-imds@2.2.1/node_modules/@smithy/credential-provider-imds/dist-es/index.js");
/* harmony import */var _smithy_property_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @smithy/property-provider */"./node_modules/.pnpm/@smithy+property-provider@2.1.1/node_modules/@smithy/property-provider/dist-es/CredentialsProviderError.js");



const resolveCredentialSource = (credentialSource, profileName)=>{
    const sourceProvidersMap = {
        EcsContainer: _smithy_credential_provider_imds__WEBPACK_IMPORTED_MODULE_0__.fromContainerMetadata,
        Ec2InstanceMetadata: _smithy_credential_provider_imds__WEBPACK_IMPORTED_MODULE_0__.fromInstanceMetadata,
        Environment: _aws_sdk_credential_provider_env__WEBPACK_IMPORTED_MODULE_1__.fromEnv
    };
    if (credentialSource in sourceProvidersMap) return sourceProvidersMap[credentialSource]();
    else throw new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_2__.CredentialsProviderError(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, ` + `expected EcsContainer or Ec2InstanceMetadata or Environment.`);
};
}),
"./node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.490.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProcessCredentials.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  isProcessProfile: function() { return isProcessProfile; },
  resolveProcessCredentials: function() { return resolveProcessCredentials; }
});
/* harmony import */var _aws_sdk_credential_provider_process__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/credential-provider-process */"./node_modules/.pnpm/@aws-sdk+credential-provider-process@3.489.0/node_modules/@aws-sdk/credential-provider-process/dist-es/index.js");

const isProcessProfile = (arg)=>Boolean(arg) && typeof arg === "object" && typeof arg.credential_process === "string";
const resolveProcessCredentials = async (options, profile)=>(0, _aws_sdk_credential_provider_process__WEBPACK_IMPORTED_MODULE_0__.fromProcess)({
        ...options,
        profile
    })();
}),
"./node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.490.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProfileData.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  resolveProfileData: function() { return resolveProfileData; }
});
/* harmony import */var _smithy_property_provider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @smithy/property-provider */"./node_modules/.pnpm/@smithy+property-provider@2.1.1/node_modules/@smithy/property-provider/dist-es/CredentialsProviderError.js");
/* harmony import */var _resolveAssumeRoleCredentials__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./resolveAssumeRoleCredentials */"./node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.490.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveAssumeRoleCredentials.js");
/* harmony import */var _resolveProcessCredentials__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./resolveProcessCredentials */"./node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.490.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProcessCredentials.js");
/* harmony import */var _resolveSsoCredentials__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./resolveSsoCredentials */"./node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.490.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveSsoCredentials.js");
/* harmony import */var _resolveStaticCredentials__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./resolveStaticCredentials */"./node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.490.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveStaticCredentials.js");
/* harmony import */var _resolveWebIdentityCredentials__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./resolveWebIdentityCredentials */"./node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.490.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveWebIdentityCredentials.js");






const resolveProfileData = async (profileName, profiles, options, visitedProfiles = {})=>{
    const data = profiles[profileName];
    if (Object.keys(visitedProfiles).length > 0 && (0, _resolveStaticCredentials__WEBPACK_IMPORTED_MODULE_4__.isStaticCredsProfile)(data)) return (0, _resolveStaticCredentials__WEBPACK_IMPORTED_MODULE_4__.resolveStaticCredentials)(data);
    if ((0, _resolveAssumeRoleCredentials__WEBPACK_IMPORTED_MODULE_0__.isAssumeRoleProfile)(data)) return (0, _resolveAssumeRoleCredentials__WEBPACK_IMPORTED_MODULE_0__.resolveAssumeRoleCredentials)(profileName, profiles, options, visitedProfiles);
    if ((0, _resolveStaticCredentials__WEBPACK_IMPORTED_MODULE_4__.isStaticCredsProfile)(data)) return (0, _resolveStaticCredentials__WEBPACK_IMPORTED_MODULE_4__.resolveStaticCredentials)(data);
    if ((0, _resolveWebIdentityCredentials__WEBPACK_IMPORTED_MODULE_3__.isWebIdentityProfile)(data)) return (0, _resolveWebIdentityCredentials__WEBPACK_IMPORTED_MODULE_3__.resolveWebIdentityCredentials)(data, options);
    if ((0, _resolveProcessCredentials__WEBPACK_IMPORTED_MODULE_1__.isProcessProfile)(data)) return (0, _resolveProcessCredentials__WEBPACK_IMPORTED_MODULE_1__.resolveProcessCredentials)(options, profileName);
    if ((0, _resolveSsoCredentials__WEBPACK_IMPORTED_MODULE_2__.isSsoProfile)(data)) return (0, _resolveSsoCredentials__WEBPACK_IMPORTED_MODULE_2__.resolveSsoCredentials)(data);
    throw new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_5__.CredentialsProviderError(`Profile ${profileName} could not be found or parsed in shared credentials file.`);
};
}),
"./node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.490.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveSsoCredentials.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  isSsoProfile: function() { return /* reexport safe */ _aws_sdk_credential_provider_sso__WEBPACK_IMPORTED_MODULE_0__.isSsoProfile; },
  resolveSsoCredentials: function() { return resolveSsoCredentials; }
});
/* harmony import */var _aws_sdk_credential_provider_sso__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/credential-provider-sso */"./node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.490.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/index.js");


const resolveSsoCredentials = (data)=>{
    const { sso_start_url, sso_account_id, sso_session, sso_region, sso_role_name } = (0, _aws_sdk_credential_provider_sso__WEBPACK_IMPORTED_MODULE_0__.validateSsoProfile)(data);
    return (0, _aws_sdk_credential_provider_sso__WEBPACK_IMPORTED_MODULE_0__.fromSSO)({
        ssoStartUrl: sso_start_url,
        ssoAccountId: sso_account_id,
        ssoSession: sso_session,
        ssoRegion: sso_region,
        ssoRoleName: sso_role_name
    })();
};
}),
"./node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.490.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveStaticCredentials.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  isStaticCredsProfile: function() { return isStaticCredsProfile; },
  resolveStaticCredentials: function() { return resolveStaticCredentials; }
});
const isStaticCredsProfile = (arg)=>Boolean(arg) && typeof arg === "object" && typeof arg.aws_access_key_id === "string" && typeof arg.aws_secret_access_key === "string" && [
        "undefined",
        "string"
    ].indexOf(typeof arg.aws_session_token) > -1;
const resolveStaticCredentials = (profile)=>Promise.resolve({
        accessKeyId: profile.aws_access_key_id,
        secretAccessKey: profile.aws_secret_access_key,
        sessionToken: profile.aws_session_token,
        credentialScope: profile.aws_credential_scope
    });
}),
"./node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.490.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveWebIdentityCredentials.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  isWebIdentityProfile: function() { return isWebIdentityProfile; },
  resolveWebIdentityCredentials: function() { return resolveWebIdentityCredentials; }
});
/* harmony import */var _aws_sdk_credential_provider_web_identity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/credential-provider-web-identity */"./node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.489.0/node_modules/@aws-sdk/credential-provider-web-identity/dist-es/index.js");

const isWebIdentityProfile = (arg)=>Boolean(arg) && typeof arg === "object" && typeof arg.web_identity_token_file === "string" && typeof arg.role_arn === "string" && [
        "undefined",
        "string"
    ].indexOf(typeof arg.role_session_name) > -1;
const resolveWebIdentityCredentials = async (profile, options)=>(0, _aws_sdk_credential_provider_web_identity__WEBPACK_IMPORTED_MODULE_0__.fromTokenFile)({
        webIdentityTokenFile: profile.web_identity_token_file,
        roleArn: profile.role_arn,
        roleSessionName: profile.role_session_name,
        roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity
    })();
}),
"./node_modules/.pnpm/@aws-sdk+credential-provider-node@3.490.0/node_modules/@aws-sdk/credential-provider-node/dist-es/defaultProvider.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  defaultProvider: function() { return defaultProvider; }
});
/* harmony import */var _aws_sdk_credential_provider_env__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @aws-sdk/credential-provider-env */"./node_modules/.pnpm/@aws-sdk+credential-provider-env@3.489.0/node_modules/@aws-sdk/credential-provider-env/dist-es/fromEnv.js");
/* harmony import */var _aws_sdk_credential_provider_ini__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/credential-provider-ini */"./node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.490.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/index.js");
/* harmony import */var _aws_sdk_credential_provider_process__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/credential-provider-process */"./node_modules/.pnpm/@aws-sdk+credential-provider-process@3.489.0/node_modules/@aws-sdk/credential-provider-process/dist-es/index.js");
/* harmony import */var _aws_sdk_credential_provider_sso__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/credential-provider-sso */"./node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.490.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/index.js");
/* harmony import */var _aws_sdk_credential_provider_web_identity__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/credential-provider-web-identity */"./node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.489.0/node_modules/@aws-sdk/credential-provider-web-identity/dist-es/index.js");
/* harmony import */var _smithy_property_provider__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @smithy/property-provider */"./node_modules/.pnpm/@smithy+property-provider@2.1.1/node_modules/@smithy/property-provider/dist-es/memoize.js");
/* harmony import */var _smithy_property_provider__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @smithy/property-provider */"./node_modules/.pnpm/@smithy+property-provider@2.1.1/node_modules/@smithy/property-provider/dist-es/chain.js");
/* harmony import */var _smithy_property_provider__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @smithy/property-provider */"./node_modules/.pnpm/@smithy+property-provider@2.1.1/node_modules/@smithy/property-provider/dist-es/CredentialsProviderError.js");
/* harmony import */var _smithy_shared_ini_file_loader__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @smithy/shared-ini-file-loader */"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/index.js");
/* harmony import */var _remoteProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./remoteProvider */"./node_modules/.pnpm/@aws-sdk+credential-provider-node@3.490.0/node_modules/@aws-sdk/credential-provider-node/dist-es/remoteProvider.js");








const defaultProvider = (init = {})=>(0, _smithy_property_provider__WEBPACK_IMPORTED_MODULE_6__.memoize)((0, _smithy_property_provider__WEBPACK_IMPORTED_MODULE_7__.chain)(...init.profile || process.env[_smithy_shared_ini_file_loader__WEBPACK_IMPORTED_MODULE_4__.ENV_PROFILE] ? [] : [
        (0, _aws_sdk_credential_provider_env__WEBPACK_IMPORTED_MODULE_8__.fromEnv)()
    ], (0, _aws_sdk_credential_provider_sso__WEBPACK_IMPORTED_MODULE_2__.fromSSO)(init), (0, _aws_sdk_credential_provider_ini__WEBPACK_IMPORTED_MODULE_0__.fromIni)(init), (0, _aws_sdk_credential_provider_process__WEBPACK_IMPORTED_MODULE_1__.fromProcess)(init), (0, _aws_sdk_credential_provider_web_identity__WEBPACK_IMPORTED_MODULE_3__.fromTokenFile)(init), (0, _remoteProvider__WEBPACK_IMPORTED_MODULE_5__.remoteProvider)(init), async ()=>{
        throw new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_9__.CredentialsProviderError("Could not load credentials from any providers", false);
    }), (credentials)=>credentials.expiration !== undefined && credentials.expiration.getTime() - Date.now() < 300000, (credentials)=>credentials.expiration !== undefined);
}),
"./node_modules/.pnpm/@aws-sdk+credential-provider-node@3.490.0/node_modules/@aws-sdk/credential-provider-node/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  defaultProvider: function() { return /* reexport safe */ _defaultProvider__WEBPACK_IMPORTED_MODULE_0__.defaultProvider; }
});
/* harmony import */var _defaultProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./defaultProvider */"./node_modules/.pnpm/@aws-sdk+credential-provider-node@3.490.0/node_modules/@aws-sdk/credential-provider-node/dist-es/defaultProvider.js");

}),
"./node_modules/.pnpm/@aws-sdk+credential-provider-node@3.490.0/node_modules/@aws-sdk/credential-provider-node/dist-es/remoteProvider.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  remoteProvider: function() { return remoteProvider; }
});
/* harmony import */var _smithy_credential_provider_imds__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/credential-provider-imds */"./node_modules/.pnpm/@smithy+credential-provider-imds@2.2.1/node_modules/@smithy/credential-provider-imds/dist-es/index.js");
/* harmony import */var _smithy_property_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/property-provider */"./node_modules/.pnpm/@smithy+property-provider@2.1.1/node_modules/@smithy/property-provider/dist-es/CredentialsProviderError.js");


const ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
const remoteProvider = (init)=>{
    if (process.env[_smithy_credential_provider_imds__WEBPACK_IMPORTED_MODULE_0__.ENV_CMDS_RELATIVE_URI] || process.env[_smithy_credential_provider_imds__WEBPACK_IMPORTED_MODULE_0__.ENV_CMDS_FULL_URI]) return (0, _smithy_credential_provider_imds__WEBPACK_IMPORTED_MODULE_0__.fromContainerMetadata)(init);
    if (process.env[ENV_IMDS_DISABLED]) return async ()=>{
        throw new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_1__.CredentialsProviderError("EC2 Instance Metadata Service access disabled");
    };
    return (0, _smithy_credential_provider_imds__WEBPACK_IMPORTED_MODULE_0__.fromInstanceMetadata)(init);
};
}),
"./node_modules/.pnpm/@aws-sdk+credential-provider-process@3.489.0/node_modules/@aws-sdk/credential-provider-process/dist-es/fromProcess.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  fromProcess: function() { return fromProcess; }
});
/* harmony import */var _smithy_shared_ini_file_loader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/shared-ini-file-loader */"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/index.js");
/* harmony import */var _resolveProcessCredentials__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./resolveProcessCredentials */"./node_modules/.pnpm/@aws-sdk+credential-provider-process@3.489.0/node_modules/@aws-sdk/credential-provider-process/dist-es/resolveProcessCredentials.js");


const fromProcess = (init = {})=>async ()=>{
        const profiles = await (0, _smithy_shared_ini_file_loader__WEBPACK_IMPORTED_MODULE_0__.parseKnownFiles)(init);
        return (0, _resolveProcessCredentials__WEBPACK_IMPORTED_MODULE_1__.resolveProcessCredentials)((0, _smithy_shared_ini_file_loader__WEBPACK_IMPORTED_MODULE_0__.getProfileName)(init), profiles);
    };
}),
"./node_modules/.pnpm/@aws-sdk+credential-provider-process@3.489.0/node_modules/@aws-sdk/credential-provider-process/dist-es/getValidatedProcessCredentials.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getValidatedProcessCredentials: function() { return getValidatedProcessCredentials; }
});
const getValidatedProcessCredentials = (profileName, data)=>{
    if (data.Version !== 1) throw Error(`Profile ${profileName} credential_process did not return Version 1.`);
    if (data.AccessKeyId === undefined || data.SecretAccessKey === undefined) throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);
    if (data.Expiration) {
        const currentTime = new Date();
        const expireTime = new Date(data.Expiration);
        if (expireTime < currentTime) throw Error(`Profile ${profileName} credential_process returned expired credentials.`);
    }
    return {
        accessKeyId: data.AccessKeyId,
        secretAccessKey: data.SecretAccessKey,
        ...data.SessionToken && {
            sessionToken: data.SessionToken
        },
        ...data.Expiration && {
            expiration: new Date(data.Expiration)
        },
        ...data.CredentialScope && {
            credentialScope: data.CredentialScope
        }
    };
};
}),
"./node_modules/.pnpm/@aws-sdk+credential-provider-process@3.489.0/node_modules/@aws-sdk/credential-provider-process/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  fromProcess: function() { return /* reexport safe */ _fromProcess__WEBPACK_IMPORTED_MODULE_0__.fromProcess; }
});
/* harmony import */var _fromProcess__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fromProcess */"./node_modules/.pnpm/@aws-sdk+credential-provider-process@3.489.0/node_modules/@aws-sdk/credential-provider-process/dist-es/fromProcess.js");

}),
"./node_modules/.pnpm/@aws-sdk+credential-provider-process@3.489.0/node_modules/@aws-sdk/credential-provider-process/dist-es/resolveProcessCredentials.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  resolveProcessCredentials: function() { return resolveProcessCredentials; }
});
/* harmony import */var _smithy_property_provider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @smithy/property-provider */"./node_modules/.pnpm/@smithy+property-provider@2.1.1/node_modules/@smithy/property-provider/dist-es/CredentialsProviderError.js");
/* harmony import */var child_process__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! child_process */"child_process");
/* harmony import */var child_process__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(child_process__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */var util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! util */"util");
/* harmony import */var util__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(util__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */var _getValidatedProcessCredentials__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getValidatedProcessCredentials */"./node_modules/.pnpm/@aws-sdk+credential-provider-process@3.489.0/node_modules/@aws-sdk/credential-provider-process/dist-es/getValidatedProcessCredentials.js");




const resolveProcessCredentials = async (profileName, profiles)=>{
    const profile = profiles[profileName];
    if (profiles[profileName]) {
        const credentialProcess = profile["credential_process"];
        if (credentialProcess !== undefined) {
            const execPromise = (0, util__WEBPACK_IMPORTED_MODULE_1__.promisify)(child_process__WEBPACK_IMPORTED_MODULE_0__.exec);
            try {
                const { stdout } = await execPromise(credentialProcess);
                let data;
                try {
                    data = JSON.parse(stdout.trim());
                } catch  {
                    throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);
                }
                return (0, _getValidatedProcessCredentials__WEBPACK_IMPORTED_MODULE_2__.getValidatedProcessCredentials)(profileName, data);
            } catch (error) {
                throw new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_3__.CredentialsProviderError(error.message);
            }
        } else throw new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_3__.CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`);
    } else throw new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_3__.CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`);
};
}),
"./node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.490.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/fromSSO.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  fromSSO: function() { return fromSSO; }
});
/* harmony import */var _smithy_property_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @smithy/property-provider */"./node_modules/.pnpm/@smithy+property-provider@2.1.1/node_modules/@smithy/property-provider/dist-es/CredentialsProviderError.js");
/* harmony import */var _smithy_shared_ini_file_loader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/shared-ini-file-loader */"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/index.js");
/* harmony import */var _isSsoProfile__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./isSsoProfile */"./node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.490.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/isSsoProfile.js");
/* harmony import */var _resolveSSOCredentials__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./resolveSSOCredentials */"./node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.490.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/resolveSSOCredentials.js");
/* harmony import */var _validateSsoProfile__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./validateSsoProfile */"./node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.490.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/validateSsoProfile.js");





const fromSSO = (init = {})=>async ()=>{
        const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, ssoSession } = init;
        const profileName = (0, _smithy_shared_ini_file_loader__WEBPACK_IMPORTED_MODULE_0__.getProfileName)(init);
        if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {
            const profiles = await (0, _smithy_shared_ini_file_loader__WEBPACK_IMPORTED_MODULE_0__.parseKnownFiles)(init);
            const profile = profiles[profileName];
            if (!profile) throw new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_2__.CredentialsProviderError(`Profile ${profileName} was not found.`);
            if (!(0, _isSsoProfile__WEBPACK_IMPORTED_MODULE_3__.isSsoProfile)(profile)) throw new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_2__.CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`);
            if (profile?.sso_session) {
                const ssoSessions = await (0, _smithy_shared_ini_file_loader__WEBPACK_IMPORTED_MODULE_0__.loadSsoSessionData)(init);
                const session = ssoSessions[profile.sso_session];
                const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;
                if (ssoRegion && ssoRegion !== session.sso_region) throw new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_2__.CredentialsProviderError(`Conflicting SSO region` + conflictMsg, false);
                if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) throw new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_2__.CredentialsProviderError(`Conflicting SSO start_url` + conflictMsg, false);
                profile.sso_region = session.sso_region;
                profile.sso_start_url = session.sso_start_url;
            }
            const { sso_start_url, sso_account_id, sso_region, sso_role_name, sso_session } = (0, _validateSsoProfile__WEBPACK_IMPORTED_MODULE_4__.validateSsoProfile)(profile);
            return (0, _resolveSSOCredentials__WEBPACK_IMPORTED_MODULE_1__.resolveSSOCredentials)({
                ssoStartUrl: sso_start_url,
                ssoSession: sso_session,
                ssoAccountId: sso_account_id,
                ssoRegion: sso_region,
                ssoRoleName: sso_role_name,
                ssoClient: ssoClient,
                profile: profileName
            });
        } else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) throw new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_2__.CredentialsProviderError('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"');
        else return (0, _resolveSSOCredentials__WEBPACK_IMPORTED_MODULE_1__.resolveSSOCredentials)({
            ssoStartUrl,
            ssoSession,
            ssoAccountId,
            ssoRegion,
            ssoRoleName,
            ssoClient,
            profile: profileName
        });
    };
}),
"./node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.490.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  fromSSO: function() { return /* reexport safe */ _fromSSO__WEBPACK_IMPORTED_MODULE_0__.fromSSO; },
  isSsoProfile: function() { return /* reexport safe */ _isSsoProfile__WEBPACK_IMPORTED_MODULE_1__.isSsoProfile; },
  validateSsoProfile: function() { return /* reexport safe */ _validateSsoProfile__WEBPACK_IMPORTED_MODULE_3__.validateSsoProfile; }
});
/* harmony import */var _fromSSO__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fromSSO */"./node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.490.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/fromSSO.js");
/* harmony import */var _isSsoProfile__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isSsoProfile */"./node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.490.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/isSsoProfile.js");
/* harmony import */var _validateSsoProfile__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./validateSsoProfile */"./node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.490.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/validateSsoProfile.js");




}),
"./node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.490.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/isSsoProfile.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  isSsoProfile: function() { return isSsoProfile; }
});
const isSsoProfile = (arg)=>arg && (typeof arg.sso_start_url === "string" || typeof arg.sso_account_id === "string" || typeof arg.sso_session === "string" || typeof arg.sso_region === "string" || typeof arg.sso_role_name === "string");
}),
"./node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.490.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/resolveSSOCredentials.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  resolveSSOCredentials: function() { return resolveSSOCredentials; }
});
/* harmony import */var _aws_sdk_client_sso__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/client-sso */"./node_modules/.pnpm/@aws-sdk+client-sso@3.490.0/node_modules/@aws-sdk/client-sso/dist-es/SSOClient.js");
/* harmony import */var _aws_sdk_client_sso__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @aws-sdk/client-sso */"./node_modules/.pnpm/@aws-sdk+client-sso@3.490.0/node_modules/@aws-sdk/client-sso/dist-es/commands/GetRoleCredentialsCommand.js");
/* harmony import */var _aws_sdk_token_providers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/token-providers */"./node_modules/.pnpm/@aws-sdk+token-providers@3.489.0/node_modules/@aws-sdk/token-providers/dist-es/fromSso.js");
/* harmony import */var _smithy_property_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @smithy/property-provider */"./node_modules/.pnpm/@smithy+property-provider@2.1.1/node_modules/@smithy/property-provider/dist-es/CredentialsProviderError.js");
/* harmony import */var _smithy_shared_ini_file_loader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/shared-ini-file-loader */"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/index.js");




const SHOULD_FAIL_CREDENTIAL_CHAIN = false;
const resolveSSOCredentials = async ({ ssoStartUrl, ssoSession, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, profile })=>{
    let token;
    const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;
    if (ssoSession) try {
        const _token = await (0, _aws_sdk_token_providers__WEBPACK_IMPORTED_MODULE_1__.fromSso)({
            profile
        })();
        token = {
            accessToken: _token.token,
            expiresAt: new Date(_token.expiration).toISOString()
        };
    } catch (e) {
        throw new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_2__.CredentialsProviderError(e.message, SHOULD_FAIL_CREDENTIAL_CHAIN);
    }
    else try {
        token = await (0, _smithy_shared_ini_file_loader__WEBPACK_IMPORTED_MODULE_0__.getSSOTokenFromFile)(ssoStartUrl);
    } catch (e1) {
        throw new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_2__.CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);
    }
    if (new Date(token.expiresAt).getTime() - Date.now() <= 0) throw new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_2__.CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);
    const { accessToken } = token;
    const sso = ssoClient || new _aws_sdk_client_sso__WEBPACK_IMPORTED_MODULE_3__.SSOClient({
        region: ssoRegion
    });
    let ssoResp;
    try {
        ssoResp = await sso.send(new _aws_sdk_client_sso__WEBPACK_IMPORTED_MODULE_4__.GetRoleCredentialsCommand({
            accountId: ssoAccountId,
            roleName: ssoRoleName,
            accessToken
        }));
    } catch (e2) {
        throw _smithy_property_provider__WEBPACK_IMPORTED_MODULE_2__.CredentialsProviderError.from(e2, SHOULD_FAIL_CREDENTIAL_CHAIN);
    }
    const { roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration } = {} } = ssoResp;
    const credentialScope = ssoResp?.roleCredentials?.credentialScope;
    if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) throw new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_2__.CredentialsProviderError("SSO returns an invalid temporary credential.", SHOULD_FAIL_CREDENTIAL_CHAIN);
    return {
        accessKeyId,
        secretAccessKey,
        sessionToken,
        expiration: new Date(expiration),
        credentialScope
    };
};
}),
"./node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.490.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/validateSsoProfile.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  validateSsoProfile: function() { return validateSsoProfile; }
});
/* harmony import */var _smithy_property_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/property-provider */"./node_modules/.pnpm/@smithy+property-provider@2.1.1/node_modules/@smithy/property-provider/dist-es/CredentialsProviderError.js");

const validateSsoProfile = (profile)=>{
    const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;
    if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) throw new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_0__.CredentialsProviderError(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", ` + `"sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(profile).join(", ")}\nReference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`, false);
    return profile;
};
}),
"./node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.489.0/node_modules/@aws-sdk/credential-provider-web-identity/dist-es/fromTokenFile.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  fromTokenFile: function() { return fromTokenFile; }
});
/* harmony import */var _smithy_property_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/property-provider */"./node_modules/.pnpm/@smithy+property-provider@2.1.1/node_modules/@smithy/property-provider/dist-es/CredentialsProviderError.js");
/* harmony import */var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */"fs");
/* harmony import */var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */var _fromWebToken__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fromWebToken */"./node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.489.0/node_modules/@aws-sdk/credential-provider-web-identity/dist-es/fromWebToken.js");



const ENV_TOKEN_FILE = "AWS_WEB_IDENTITY_TOKEN_FILE";
const ENV_ROLE_ARN = "AWS_ROLE_ARN";
const ENV_ROLE_SESSION_NAME = "AWS_ROLE_SESSION_NAME";
const fromTokenFile = (init = {})=>async ()=>{
        const webIdentityTokenFile = init?.webIdentityTokenFile ?? process.env[ENV_TOKEN_FILE];
        const roleArn = init?.roleArn ?? process.env[ENV_ROLE_ARN];
        const roleSessionName = init?.roleSessionName ?? process.env[ENV_ROLE_SESSION_NAME];
        if (!webIdentityTokenFile || !roleArn) throw new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_1__.CredentialsProviderError("Web identity configuration not specified");
        return (0, _fromWebToken__WEBPACK_IMPORTED_MODULE_2__.fromWebToken)({
            ...init,
            webIdentityToken: (0, fs__WEBPACK_IMPORTED_MODULE_0__.readFileSync)(webIdentityTokenFile, {
                encoding: "ascii"
            }),
            roleArn,
            roleSessionName
        })();
    };
}),
"./node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.489.0/node_modules/@aws-sdk/credential-provider-web-identity/dist-es/fromWebToken.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  fromWebToken: function() { return fromWebToken; }
});
/* harmony import */var _smithy_property_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/property-provider */"./node_modules/.pnpm/@smithy+property-provider@2.1.1/node_modules/@smithy/property-provider/dist-es/CredentialsProviderError.js");

const fromWebToken = (init)=>()=>{
        const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds, roleAssumerWithWebIdentity } = init;
        if (!roleAssumerWithWebIdentity) throw new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_0__.CredentialsProviderError(`Role Arn '${roleArn}' needs to be assumed with web identity,` + ` but no role assumption callback was provided.`, false);
        return roleAssumerWithWebIdentity({
            RoleArn: roleArn,
            RoleSessionName: roleSessionName ?? `aws-sdk-js-session-${Date.now()}`,
            WebIdentityToken: webIdentityToken,
            ProviderId: providerId,
            PolicyArns: policyArns,
            Policy: policy,
            DurationSeconds: durationSeconds
        });
    };
}),
"./node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.489.0/node_modules/@aws-sdk/credential-provider-web-identity/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  fromTokenFile: function() { return /* reexport safe */ _fromTokenFile__WEBPACK_IMPORTED_MODULE_0__.fromTokenFile; }
});
/* harmony import */var _fromTokenFile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fromTokenFile */"./node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.489.0/node_modules/@aws-sdk/credential-provider-web-identity/dist-es/fromTokenFile.js");


}),
"./node_modules/.pnpm/@aws-sdk+middleware-host-header@3.489.0/node_modules/@aws-sdk/middleware-host-header/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getHostHeaderPlugin: function() { return getHostHeaderPlugin; },
  resolveHostHeaderConfig: function() { return resolveHostHeaderConfig; }
});
/* harmony import */var _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/protocol-http */"./node_modules/.pnpm/@smithy+protocol-http@3.1.1/node_modules/@smithy/protocol-http/dist-es/index.js");

function resolveHostHeaderConfig(input) {
    return input;
}
const hostHeaderMiddleware = (options)=>(next)=>async (args)=>{
            if (!_smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest.isInstance(args.request)) return next(args);
            const { request } = args;
            const { handlerProtocol = "" } = options.requestHandler.metadata || {};
            if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
                delete request.headers["host"];
                request.headers[":authority"] = request.hostname + (request.port ? ":" + request.port : "");
            } else if (!request.headers["host"]) {
                let host = request.hostname;
                if (request.port != null) host += `:${request.port}`;
                request.headers["host"] = host;
            }
            return next(args);
        };
const hostHeaderMiddlewareOptions = {
    name: "hostHeaderMiddleware",
    step: "build",
    priority: "low",
    tags: [
        "HOST"
    ],
    override: true
};
const getHostHeaderPlugin = (options)=>({
        applyToStack: (clientStack)=>{
            clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);
        }
    });
}),
"./node_modules/.pnpm/@aws-sdk+middleware-logger@3.489.0/node_modules/@aws-sdk/middleware-logger/dist-es/loggerMiddleware.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getLoggerPlugin: function() { return getLoggerPlugin; }
});
const loggerMiddleware = ()=>(next, context)=>async (args)=>{
            try {
                const response = await next(args);
                const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;
                const { overrideInputFilterSensitiveLog, overrideOutputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
                const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
                const outputFilterSensitiveLog = overrideOutputFilterSensitiveLog ?? context.outputFilterSensitiveLog;
                const { $metadata, ...outputWithoutMetadata } = response.output;
                logger?.info?.({
                    clientName,
                    commandName,
                    input: inputFilterSensitiveLog(args.input),
                    output: outputFilterSensitiveLog(outputWithoutMetadata),
                    metadata: $metadata
                });
                return response;
            } catch (error) {
                const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;
                const { overrideInputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
                const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
                logger?.error?.({
                    clientName,
                    commandName,
                    input: inputFilterSensitiveLog(args.input),
                    error,
                    metadata: error.$metadata
                });
                throw error;
            }
        };
const loggerMiddlewareOptions = {
    name: "loggerMiddleware",
    tags: [
        "LOGGER"
    ],
    step: "initialize",
    override: true
};
const getLoggerPlugin = (options)=>({
        applyToStack: (clientStack)=>{
            clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);
        }
    });
}),
"./node_modules/.pnpm/@aws-sdk+middleware-recursion-detection@3.489.0/node_modules/@aws-sdk/middleware-recursion-detection/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getRecursionDetectionPlugin: function() { return getRecursionDetectionPlugin; }
});
/* harmony import */var _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/protocol-http */"./node_modules/.pnpm/@smithy+protocol-http@3.1.1/node_modules/@smithy/protocol-http/dist-es/index.js");

const TRACE_ID_HEADER_NAME = "X-Amzn-Trace-Id";
const ENV_LAMBDA_FUNCTION_NAME = "AWS_LAMBDA_FUNCTION_NAME";
const ENV_TRACE_ID = "_X_AMZN_TRACE_ID";
const recursionDetectionMiddleware = (options)=>(next)=>async (args)=>{
            const { request } = args;
            if (!_smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest.isInstance(request) || options.runtime !== "node" || request.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)) return next(args);
            const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];
            const traceId = process.env[ENV_TRACE_ID];
            const nonEmptyString = (str)=>typeof str === "string" && str.length > 0;
            if (nonEmptyString(functionName) && nonEmptyString(traceId)) request.headers[TRACE_ID_HEADER_NAME] = traceId;
            return next({
                ...args,
                request
            });
        };
const addRecursionDetectionMiddlewareOptions = {
    step: "build",
    tags: [
        "RECURSION_DETECTION"
    ],
    name: "recursionDetectionMiddleware",
    override: true,
    priority: "low"
};
const getRecursionDetectionPlugin = (options)=>({
        applyToStack: (clientStack)=>{
            clientStack.add(recursionDetectionMiddleware(options), addRecursionDetectionMiddlewareOptions);
        }
    });
}),
"./node_modules/.pnpm/@aws-sdk+middleware-signing@3.489.0/node_modules/@aws-sdk/middleware-signing/dist-es/awsAuthConfiguration.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  resolveAwsAuthConfig: function() { return resolveAwsAuthConfig; }
});
/* harmony import */var _smithy_property_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @smithy/property-provider */"./node_modules/.pnpm/@smithy+property-provider@2.1.1/node_modules/@smithy/property-provider/dist-es/memoize.js");
/* harmony import */var _smithy_signature_v4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/signature-v4 */"./node_modules/.pnpm/@smithy+signature-v4@2.1.1/node_modules/@smithy/signature-v4/dist-es/index.js");
/* harmony import */var _smithy_util_middleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/util-middleware */"./node_modules/.pnpm/@smithy+util-middleware@2.1.1/node_modules/@smithy/util-middleware/dist-es/index.js");



const CREDENTIAL_EXPIRE_WINDOW = 300000;
const resolveAwsAuthConfig = (input)=>{
    const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
    const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
    let signer;
    if (input.signer) signer = (0, _smithy_util_middleware__WEBPACK_IMPORTED_MODULE_1__.normalizeProvider)(input.signer);
    else if (input.regionInfoProvider) signer = ()=>(0, _smithy_util_middleware__WEBPACK_IMPORTED_MODULE_1__.normalizeProvider)(input.region)().then(async (region)=>[
                await input.regionInfoProvider(region, {
                    useFipsEndpoint: await input.useFipsEndpoint(),
                    useDualstackEndpoint: await input.useDualstackEndpoint()
                }) || {},
                region
            ]).then(([regionInfo, region])=>{
            const { signingRegion, signingService } = regionInfo;
            input.signingRegion = input.signingRegion || signingRegion || region;
            input.signingName = input.signingName || signingService || input.serviceId;
            const params = {
                ...input,
                credentials: normalizedCreds,
                region: input.signingRegion,
                service: input.signingName,
                sha256,
                uriEscapePath: signingEscapePath
            };
            const SignerCtor = input.signerConstructor || _smithy_signature_v4__WEBPACK_IMPORTED_MODULE_0__.SignatureV4;
            return new SignerCtor(params);
        });
    else signer = async (authScheme)=>{
        authScheme = Object.assign({}, {
            name: "sigv4",
            signingName: input.signingName || input.defaultSigningName,
            signingRegion: await (0, _smithy_util_middleware__WEBPACK_IMPORTED_MODULE_1__.normalizeProvider)(input.region)(),
            properties: {}
        }, authScheme);
        const signingRegion = authScheme.signingRegion;
        const signingService = authScheme.signingName;
        input.signingRegion = input.signingRegion || signingRegion;
        input.signingName = input.signingName || signingService || input.serviceId;
        const params = {
            ...input,
            credentials: normalizedCreds,
            region: input.signingRegion,
            service: input.signingName,
            sha256,
            uriEscapePath: signingEscapePath
        };
        const SignerCtor = input.signerConstructor || _smithy_signature_v4__WEBPACK_IMPORTED_MODULE_0__.SignatureV4;
        return new SignerCtor(params);
    };
    return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
    };
};
const resolveSigV4AuthConfig = (input)=>{
    const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
    const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
    let signer;
    if (input.signer) signer = normalizeProvider(input.signer);
    else signer = normalizeProvider(new SignatureV4({
        credentials: normalizedCreds,
        region: input.region,
        service: input.signingName,
        sha256,
        uriEscapePath: signingEscapePath
    }));
    return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
    };
};
const normalizeCredentialProvider = (credentials)=>{
    if (typeof credentials === "function") return (0, _smithy_property_provider__WEBPACK_IMPORTED_MODULE_2__.memoize)(credentials, (credentials)=>credentials.expiration !== undefined && credentials.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW, (credentials)=>credentials.expiration !== undefined);
    return (0, _smithy_util_middleware__WEBPACK_IMPORTED_MODULE_1__.normalizeProvider)(credentials);
};
}),
"./node_modules/.pnpm/@aws-sdk+middleware-signing@3.489.0/node_modules/@aws-sdk/middleware-signing/dist-es/awsAuthMiddleware.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getAwsAuthPlugin: function() { return getAwsAuthPlugin; }
});
/* harmony import */var _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/protocol-http */"./node_modules/.pnpm/@smithy+protocol-http@3.1.1/node_modules/@smithy/protocol-http/dist-es/index.js");
/* harmony import */var _utils_getSkewCorrectedDate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/getSkewCorrectedDate */"./node_modules/.pnpm/@aws-sdk+middleware-signing@3.489.0/node_modules/@aws-sdk/middleware-signing/dist-es/utils/getSkewCorrectedDate.js");
/* harmony import */var _utils_getUpdatedSystemClockOffset__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/getUpdatedSystemClockOffset */"./node_modules/.pnpm/@aws-sdk+middleware-signing@3.489.0/node_modules/@aws-sdk/middleware-signing/dist-es/utils/getUpdatedSystemClockOffset.js");



const awsAuthMiddleware = (options)=>(next, context)=>async function(args) {
            if (!_smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest.isInstance(args.request)) return next(args);
            const authScheme = context.endpointV2?.properties?.authSchemes?.[0];
            const multiRegionOverride = authScheme?.name === "sigv4a" ? authScheme?.signingRegionSet?.join(",") : undefined;
            const signer = await options.signer(authScheme);
            let signedRequest;
            const signingOptions = {
                signingDate: (0, _utils_getSkewCorrectedDate__WEBPACK_IMPORTED_MODULE_1__.getSkewCorrectedDate)(options.systemClockOffset),
                signingRegion: multiRegionOverride || context["signing_region"],
                signingService: context["signing_service"]
            };
            if (context.s3ExpressIdentity) {
                const sigV4MultiRegion = signer;
                signedRequest = await sigV4MultiRegion.signWithCredentials(args.request, context.s3ExpressIdentity, signingOptions);
                if (signedRequest.headers["X-Amz-Security-Token"] || signedRequest.headers["x-amz-security-token"]) throw new Error("X-Amz-Security-Token must not be set for s3-express requests.");
            } else signedRequest = await signer.sign(args.request, signingOptions);
            const output = await next({
                ...args,
                request: signedRequest
            }).catch((error)=>{
                const serverTime = error.ServerTime ?? getDateHeader(error.$response);
                if (serverTime) options.systemClockOffset = (0, _utils_getUpdatedSystemClockOffset__WEBPACK_IMPORTED_MODULE_2__.getUpdatedSystemClockOffset)(serverTime, options.systemClockOffset);
                throw error;
            });
            const dateHeader = getDateHeader(output.response);
            if (dateHeader) options.systemClockOffset = (0, _utils_getUpdatedSystemClockOffset__WEBPACK_IMPORTED_MODULE_2__.getUpdatedSystemClockOffset)(dateHeader, options.systemClockOffset);
            return output;
        };
const getDateHeader = (response)=>_smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpResponse.isInstance(response) ? response.headers?.date ?? response.headers?.Date : undefined;
const awsAuthMiddlewareOptions = {
    name: "awsAuthMiddleware",
    tags: [
        "SIGNATURE",
        "AWSAUTH"
    ],
    relation: "after",
    toMiddleware: "retryMiddleware",
    override: true
};
const getAwsAuthPlugin = (options)=>({
        applyToStack: (clientStack)=>{
            clientStack.addRelativeTo(awsAuthMiddleware(options), awsAuthMiddlewareOptions);
        }
    });
const getSigV4AuthPlugin = (/* unused pure expression or super */ null && (getAwsAuthPlugin));
}),
"./node_modules/.pnpm/@aws-sdk+middleware-signing@3.489.0/node_modules/@aws-sdk/middleware-signing/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getAwsAuthPlugin: function() { return /* reexport safe */ _awsAuthMiddleware__WEBPACK_IMPORTED_MODULE_1__.getAwsAuthPlugin; },
  resolveAwsAuthConfig: function() { return /* reexport safe */ _awsAuthConfiguration__WEBPACK_IMPORTED_MODULE_0__.resolveAwsAuthConfig; }
});
/* harmony import */var _awsAuthConfiguration__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./awsAuthConfiguration */"./node_modules/.pnpm/@aws-sdk+middleware-signing@3.489.0/node_modules/@aws-sdk/middleware-signing/dist-es/awsAuthConfiguration.js");
/* harmony import */var _awsAuthMiddleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./awsAuthMiddleware */"./node_modules/.pnpm/@aws-sdk+middleware-signing@3.489.0/node_modules/@aws-sdk/middleware-signing/dist-es/awsAuthMiddleware.js");


}),
"./node_modules/.pnpm/@aws-sdk+middleware-signing@3.489.0/node_modules/@aws-sdk/middleware-signing/dist-es/utils/getSkewCorrectedDate.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getSkewCorrectedDate: function() { return getSkewCorrectedDate; }
});
const getSkewCorrectedDate = (systemClockOffset)=>new Date(Date.now() + systemClockOffset);
}),
"./node_modules/.pnpm/@aws-sdk+middleware-signing@3.489.0/node_modules/@aws-sdk/middleware-signing/dist-es/utils/getUpdatedSystemClockOffset.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getUpdatedSystemClockOffset: function() { return getUpdatedSystemClockOffset; }
});
/* harmony import */var _isClockSkewed__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isClockSkewed */"./node_modules/.pnpm/@aws-sdk+middleware-signing@3.489.0/node_modules/@aws-sdk/middleware-signing/dist-es/utils/isClockSkewed.js");

const getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset)=>{
    const clockTimeInMs = Date.parse(clockTime);
    if ((0, _isClockSkewed__WEBPACK_IMPORTED_MODULE_0__.isClockSkewed)(clockTimeInMs, currentSystemClockOffset)) return clockTimeInMs - Date.now();
    return currentSystemClockOffset;
};
}),
"./node_modules/.pnpm/@aws-sdk+middleware-signing@3.489.0/node_modules/@aws-sdk/middleware-signing/dist-es/utils/isClockSkewed.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  isClockSkewed: function() { return isClockSkewed; }
});
/* harmony import */var _getSkewCorrectedDate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getSkewCorrectedDate */"./node_modules/.pnpm/@aws-sdk+middleware-signing@3.489.0/node_modules/@aws-sdk/middleware-signing/dist-es/utils/getSkewCorrectedDate.js");

const isClockSkewed = (clockTime, systemClockOffset)=>Math.abs((0, _getSkewCorrectedDate__WEBPACK_IMPORTED_MODULE_0__.getSkewCorrectedDate)(systemClockOffset).getTime() - clockTime) >= 300000;
}),
"./node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.489.0/node_modules/@aws-sdk/middleware-user-agent/dist-es/configurations.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  resolveUserAgentConfig: function() { return resolveUserAgentConfig; }
});
function resolveUserAgentConfig(input) {
    return {
        ...input,
        customUserAgent: typeof input.customUserAgent === "string" ? [
            [
                input.customUserAgent
            ]
        ] : input.customUserAgent
    };
}
}),
"./node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.489.0/node_modules/@aws-sdk/middleware-user-agent/dist-es/constants.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  SPACE: function() { return SPACE; },
  UA_ESCAPE_CHAR: function() { return UA_ESCAPE_CHAR; },
  UA_NAME_ESCAPE_REGEX: function() { return UA_NAME_ESCAPE_REGEX; },
  UA_NAME_SEPARATOR: function() { return UA_NAME_SEPARATOR; },
  UA_VALUE_ESCAPE_REGEX: function() { return UA_VALUE_ESCAPE_REGEX; },
  USER_AGENT: function() { return USER_AGENT; },
  X_AMZ_USER_AGENT: function() { return X_AMZ_USER_AGENT; }
});
const USER_AGENT = "user-agent";
const X_AMZ_USER_AGENT = "x-amz-user-agent";
const SPACE = " ";
const UA_NAME_SEPARATOR = "/";
const UA_NAME_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
const UA_VALUE_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w\#]/g;
const UA_ESCAPE_CHAR = "-";
}),
"./node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.489.0/node_modules/@aws-sdk/middleware-user-agent/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getUserAgentPlugin: function() { return /* reexport safe */ _user_agent_middleware__WEBPACK_IMPORTED_MODULE_1__.getUserAgentPlugin; },
  resolveUserAgentConfig: function() { return /* reexport safe */ _configurations__WEBPACK_IMPORTED_MODULE_0__.resolveUserAgentConfig; }
});
/* harmony import */var _configurations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./configurations */"./node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.489.0/node_modules/@aws-sdk/middleware-user-agent/dist-es/configurations.js");
/* harmony import */var _user_agent_middleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./user-agent-middleware */"./node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.489.0/node_modules/@aws-sdk/middleware-user-agent/dist-es/user-agent-middleware.js");


}),
"./node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.489.0/node_modules/@aws-sdk/middleware-user-agent/dist-es/user-agent-middleware.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getUserAgentPlugin: function() { return getUserAgentPlugin; }
});
/* harmony import */var _aws_sdk_util_endpoints__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-endpoints */"./node_modules/.pnpm/@aws-sdk+util-endpoints@3.489.0/node_modules/@aws-sdk/util-endpoints/dist-es/index.js");
/* harmony import */var _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/protocol-http */"./node_modules/.pnpm/@smithy+protocol-http@3.1.1/node_modules/@smithy/protocol-http/dist-es/index.js");
/* harmony import */var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */"./node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.489.0/node_modules/@aws-sdk/middleware-user-agent/dist-es/constants.js");



const userAgentMiddleware = (options)=>(next, context)=>async (args)=>{
            const { request } = args;
            if (!_smithy_protocol_http__WEBPACK_IMPORTED_MODULE_1__.HttpRequest.isInstance(request)) return next(args);
            const { headers } = request;
            const userAgent = context?.userAgent?.map(escapeUserAgent) || [];
            const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
            const customUserAgent = options?.customUserAgent?.map(escapeUserAgent) || [];
            const prefix = (0, _aws_sdk_util_endpoints__WEBPACK_IMPORTED_MODULE_0__.getUserAgentPrefix)();
            const sdkUserAgentValue = (prefix ? [
                prefix
            ] : []).concat([
                ...defaultUserAgent,
                ...userAgent,
                ...customUserAgent
            ]).join(_constants__WEBPACK_IMPORTED_MODULE_2__.SPACE);
            const normalUAValue = [
                ...defaultUserAgent.filter((section)=>section.startsWith("aws-sdk-")),
                ...customUserAgent
            ].join(_constants__WEBPACK_IMPORTED_MODULE_2__.SPACE);
            if (options.runtime !== "browser") {
                if (normalUAValue) headers[_constants__WEBPACK_IMPORTED_MODULE_2__.X_AMZ_USER_AGENT] = headers[_constants__WEBPACK_IMPORTED_MODULE_2__.X_AMZ_USER_AGENT] ? `${headers[_constants__WEBPACK_IMPORTED_MODULE_2__.USER_AGENT]} ${normalUAValue}` : normalUAValue;
                headers[_constants__WEBPACK_IMPORTED_MODULE_2__.USER_AGENT] = sdkUserAgentValue;
            } else headers[_constants__WEBPACK_IMPORTED_MODULE_2__.X_AMZ_USER_AGENT] = sdkUserAgentValue;
            return next({
                ...args,
                request
            });
        };
const escapeUserAgent = (userAgentPair)=>{
    const name = userAgentPair[0].split(_constants__WEBPACK_IMPORTED_MODULE_2__.UA_NAME_SEPARATOR).map((part)=>part.replace(_constants__WEBPACK_IMPORTED_MODULE_2__.UA_NAME_ESCAPE_REGEX, _constants__WEBPACK_IMPORTED_MODULE_2__.UA_ESCAPE_CHAR)).join(_constants__WEBPACK_IMPORTED_MODULE_2__.UA_NAME_SEPARATOR);
    const version = userAgentPair[1]?.replace(_constants__WEBPACK_IMPORTED_MODULE_2__.UA_VALUE_ESCAPE_REGEX, _constants__WEBPACK_IMPORTED_MODULE_2__.UA_ESCAPE_CHAR);
    const prefixSeparatorIndex = name.indexOf(_constants__WEBPACK_IMPORTED_MODULE_2__.UA_NAME_SEPARATOR);
    const prefix = name.substring(0, prefixSeparatorIndex);
    let uaName = name.substring(prefixSeparatorIndex + 1);
    if (prefix === "api") uaName = uaName.toLowerCase();
    return [
        prefix,
        uaName,
        version
    ].filter((item)=>item && item.length > 0).reduce((acc, item, index)=>{
        switch(index){
            case 0:
                return item;
            case 1:
                return `${acc}/${item}`;
            default:
                return `${acc}#${item}`;
        }
    }, "");
};
const getUserAgentMiddlewareOptions = {
    name: "getUserAgentMiddleware",
    step: "build",
    priority: "low",
    tags: [
        "SET_USER_AGENT",
        "USER_AGENT"
    ],
    override: true
};
const getUserAgentPlugin = (config)=>({
        applyToStack: (clientStack)=>{
            clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);
        }
    });
}),
"./node_modules/.pnpm/@aws-sdk+region-config-resolver@3.489.0/node_modules/@aws-sdk/region-config-resolver/dist-es/extensions/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getAwsRegionExtensionConfiguration: function() { return getAwsRegionExtensionConfiguration; },
  resolveAwsRegionExtensionConfiguration: function() { return resolveAwsRegionExtensionConfiguration; }
});
const getAwsRegionExtensionConfiguration = (runtimeConfig)=>{
    let runtimeConfigRegion = async ()=>{
        if (runtimeConfig.region === undefined) throw new Error("Region is missing from runtimeConfig");
        const region = runtimeConfig.region;
        if (typeof region === "string") return region;
        return region();
    };
    return {
        setRegion (region) {
            runtimeConfigRegion = region;
        },
        region () {
            return runtimeConfigRegion;
        }
    };
};
const resolveAwsRegionExtensionConfiguration = (awsRegionExtensionConfiguration)=>{
    return {
        region: awsRegionExtensionConfiguration.region()
    };
};
}),
"./node_modules/.pnpm/@aws-sdk+token-providers@3.489.0/node_modules/@aws-sdk/token-providers/dist-es/bundle/client-sso-oidc-node.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  CreateTokenCommand: function() { return CreateTokenCommand; },
  SSOOIDCClient: function() { return SSOOIDCClient; }
});
/* harmony import */var _aws_sdk_middleware_host_header__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-host-header */"./node_modules/.pnpm/@aws-sdk+middleware-host-header@3.489.0/node_modules/@aws-sdk/middleware-host-header/dist-es/index.js");
/* harmony import */var _aws_sdk_middleware_logger__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @aws-sdk/middleware-logger */"./node_modules/.pnpm/@aws-sdk+middleware-logger@3.489.0/node_modules/@aws-sdk/middleware-logger/dist-es/loggerMiddleware.js");
/* harmony import */var _aws_sdk_middleware_recursion_detection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-recursion-detection */"./node_modules/.pnpm/@aws-sdk+middleware-recursion-detection@3.489.0/node_modules/@aws-sdk/middleware-recursion-detection/dist-es/index.js");
/* harmony import */var _aws_sdk_middleware_user_agent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-user-agent */"./node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.489.0/node_modules/@aws-sdk/middleware-user-agent/dist-es/index.js");
/* harmony import */var _smithy_config_resolver__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @smithy/config-resolver */"./node_modules/.pnpm/@smithy+config-resolver@2.1.1/node_modules/@smithy/config-resolver/dist-es/index.js");
/* harmony import */var _smithy_middleware_content_length__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @smithy/middleware-content-length */"./node_modules/.pnpm/@smithy+middleware-content-length@2.1.1/node_modules/@smithy/middleware-content-length/dist-es/index.js");
/* harmony import */var _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @smithy/middleware-endpoint */"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/index.js");
/* harmony import */var _smithy_middleware_retry__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @smithy/middleware-retry */"./node_modules/.pnpm/@smithy+middleware-retry@2.1.1/node_modules/@smithy/middleware-retry/dist-es/index.js");
/* harmony import */var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @smithy/smithy-client */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/index.js");
/* harmony import */var _aws_sdk_util_user_agent_node__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @aws-sdk/util-user-agent-node */"./node_modules/.pnpm/@aws-sdk+util-user-agent-node@3.489.0/node_modules/@aws-sdk/util-user-agent-node/dist-es/index.js");
/* harmony import */var _smithy_hash_node__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @smithy/hash-node */"./node_modules/.pnpm/@smithy+hash-node@2.1.1/node_modules/@smithy/hash-node/dist-es/index.js");
/* harmony import */var _smithy_node_config_provider__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @smithy/node-config-provider */"./node_modules/.pnpm/@smithy+node-config-provider@2.2.1/node_modules/@smithy/node-config-provider/dist-es/index.js");
/* harmony import */var _smithy_node_http_handler__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @smithy/node-http-handler */"./node_modules/.pnpm/@smithy+node-http-handler@2.3.1/node_modules/@smithy/node-http-handler/dist-es/index.js");
/* harmony import */var _smithy_util_body_length_node__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @smithy/util-body-length-node */"./node_modules/.pnpm/@smithy+util-body-length-node@2.2.1/node_modules/@smithy/util-body-length-node/dist-es/index.js");
/* harmony import */var _smithy_util_retry__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @smithy/util-retry */"./node_modules/.pnpm/@smithy+util-retry@2.1.1/node_modules/@smithy/util-retry/dist-es/index.js");
/* harmony import */var _smithy_url_parser__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @smithy/url-parser */"./node_modules/.pnpm/@smithy+url-parser@2.1.1/node_modules/@smithy/url-parser/dist-es/index.js");
/* harmony import */var _smithy_util_base64__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @smithy/util-base64 */"./node_modules/.pnpm/@smithy+util-base64@2.1.1/node_modules/@smithy/util-base64/dist-es/index.js");
/* harmony import */var _smithy_util_utf8__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @smithy/util-utf8 */"./node_modules/.pnpm/@smithy+util-utf8@2.1.1/node_modules/@smithy/util-utf8/dist-es/index.js");
/* harmony import */var _smithy_util_endpoints__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @smithy/util-endpoints */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/index.js");
/* harmony import */var _smithy_util_defaults_mode_node__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @smithy/util-defaults-mode-node */"./node_modules/.pnpm/@smithy+util-defaults-mode-node@2.1.1/node_modules/@smithy/util-defaults-mode-node/dist-es/index.js");
/* harmony import */var _aws_sdk_region_config_resolver__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @aws-sdk/region-config-resolver */"./node_modules/.pnpm/@aws-sdk+region-config-resolver@3.489.0/node_modules/@aws-sdk/region-config-resolver/dist-es/extensions/index.js");
/* harmony import */var _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @smithy/protocol-http */"./node_modules/.pnpm/@smithy+protocol-http@3.1.1/node_modules/@smithy/protocol-http/dist-es/index.js");
/* harmony import */var _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @smithy/middleware-serde */"./node_modules/.pnpm/@smithy+middleware-serde@2.1.1/node_modules/@smithy/middleware-serde/dist-es/serdePlugin.js");
/* harmony import */var _smithy_types__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @smithy/types */"./node_modules/.pnpm/@smithy+types@2.9.1/node_modules/@smithy/types/dist-es/index.js");









var resolveClientEndpointParameters = (options)=>{
    return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "awsssooidc"
    };
};
var package_default = {
    version: "3.429.0"
};













var s = "required";
var t = "fn";
var u = "argv";
var v = "ref";
var a = "isSet";
var b = "tree";
var c = "error";
var d = "endpoint";
var e = "PartitionResult";
var f = "getAttr";
var g = {
    [s]: false,
    type: "String"
};
var h = {
    [s]: true,
    default: false,
    type: "Boolean"
};
var i = {
    [v]: "Endpoint"
};
var j = {
    [t]: "booleanEquals",
    [u]: [
        {
            [v]: "UseFIPS"
        },
        true
    ]
};
var k = {
    [t]: "booleanEquals",
    [u]: [
        {
            [v]: "UseDualStack"
        },
        true
    ]
};
var l = {};
var m = {
    [t]: "booleanEquals",
    [u]: [
        true,
        {
            [t]: f,
            [u]: [
                {
                    [v]: e
                },
                "supportsFIPS"
            ]
        }
    ]
};
var n = {
    [v]: e
};
var o = {
    [t]: "booleanEquals",
    [u]: [
        true,
        {
            [t]: f,
            [u]: [
                n,
                "supportsDualStack"
            ]
        }
    ]
};
var p = [
    j
];
var q = [
    k
];
var r = [
    {
        [v]: "Region"
    }
];
var _data = {
    version: "1.0",
    parameters: {
        Region: g,
        UseDualStack: h,
        UseFIPS: h,
        Endpoint: g
    },
    rules: [
        {
            conditions: [
                {
                    [t]: a,
                    [u]: [
                        i
                    ]
                }
            ],
            type: b,
            rules: [
                {
                    conditions: p,
                    error: "Invalid Configuration: FIPS and custom endpoint are not supported",
                    type: c
                },
                {
                    conditions: q,
                    error: "Invalid Configuration: Dualstack and custom endpoint are not supported",
                    type: c
                },
                {
                    endpoint: {
                        url: i,
                        properties: l,
                        headers: l
                    },
                    type: d
                }
            ]
        },
        {
            conditions: [
                {
                    [t]: a,
                    [u]: r
                }
            ],
            type: b,
            rules: [
                {
                    conditions: [
                        {
                            [t]: "aws.partition",
                            [u]: r,
                            assign: e
                        }
                    ],
                    type: b,
                    rules: [
                        {
                            conditions: [
                                j,
                                k
                            ],
                            type: b,
                            rules: [
                                {
                                    conditions: [
                                        m,
                                        o
                                    ],
                                    type: b,
                                    rules: [
                                        {
                                            endpoint: {
                                                url: "https://oidc-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                                properties: l,
                                                headers: l
                                            },
                                            type: d
                                        }
                                    ]
                                },
                                {
                                    error: "FIPS and DualStack are enabled, but this partition does not support one or both",
                                    type: c
                                }
                            ]
                        },
                        {
                            conditions: p,
                            type: b,
                            rules: [
                                {
                                    conditions: [
                                        m
                                    ],
                                    type: b,
                                    rules: [
                                        {
                                            conditions: [
                                                {
                                                    [t]: "stringEquals",
                                                    [u]: [
                                                        "aws-us-gov",
                                                        {
                                                            [t]: f,
                                                            [u]: [
                                                                n,
                                                                "name"
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ],
                                            endpoint: {
                                                url: "https://oidc.{Region}.amazonaws.com",
                                                properties: l,
                                                headers: l
                                            },
                                            type: d
                                        },
                                        {
                                            endpoint: {
                                                url: "https://oidc-fips.{Region}.{PartitionResult#dnsSuffix}",
                                                properties: l,
                                                headers: l
                                            },
                                            type: d
                                        }
                                    ]
                                },
                                {
                                    error: "FIPS is enabled but this partition does not support FIPS",
                                    type: c
                                }
                            ]
                        },
                        {
                            conditions: q,
                            type: b,
                            rules: [
                                {
                                    conditions: [
                                        o
                                    ],
                                    type: b,
                                    rules: [
                                        {
                                            endpoint: {
                                                url: "https://oidc.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                                properties: l,
                                                headers: l
                                            },
                                            type: d
                                        }
                                    ]
                                },
                                {
                                    error: "DualStack is enabled but this partition does not support DualStack",
                                    type: c
                                }
                            ]
                        },
                        {
                            endpoint: {
                                url: "https://oidc.{Region}.{PartitionResult#dnsSuffix}",
                                properties: l,
                                headers: l
                            },
                            type: d
                        }
                    ]
                }
            ]
        },
        {
            error: "Invalid Configuration: Missing Region",
            type: c
        }
    ]
};
var ruleSet = _data;
var defaultEndpointResolver = (endpointParams, context = {})=>{
    return (0, _smithy_util_endpoints__WEBPACK_IMPORTED_MODULE_16__.resolveEndpoint)(ruleSet, {
        endpointParams,
        logger: context.logger
    });
};
var getRuntimeConfig = (config)=>({
        apiVersion: "2019-06-10",
        base64Decoder: config?.base64Decoder ?? _smithy_util_base64__WEBPACK_IMPORTED_MODULE_14__.fromBase64,
        base64Encoder: config?.base64Encoder ?? _smithy_util_base64__WEBPACK_IMPORTED_MODULE_14__.toBase64,
        disableHostPrefix: config?.disableHostPrefix ?? false,
        endpointProvider: config?.endpointProvider ?? defaultEndpointResolver,
        extensions: config?.extensions ?? [],
        logger: config?.logger ?? new _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.NoOpLogger(),
        serviceId: config?.serviceId ?? "SSO OIDC",
        urlParser: config?.urlParser ?? _smithy_url_parser__WEBPACK_IMPORTED_MODULE_20__.parseUrl,
        utf8Decoder: config?.utf8Decoder ?? _smithy_util_utf8__WEBPACK_IMPORTED_MODULE_15__.fromUtf8,
        utf8Encoder: config?.utf8Encoder ?? _smithy_util_utf8__WEBPACK_IMPORTED_MODULE_15__.toUtf8
    });



var getRuntimeConfig2 = (config)=>{
    (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.emitWarningIfUnsupportedVersion)(process.version);
    const defaultsMode = (0, _smithy_util_defaults_mode_node__WEBPACK_IMPORTED_MODULE_17__.resolveDefaultsModeConfig)(config);
    const defaultConfigProvider = ()=>defaultsMode().then(_smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.loadConfigsForDefaultMode);
    const clientSharedValues = getRuntimeConfig(config);
    return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? _smithy_util_body_length_node__WEBPACK_IMPORTED_MODULE_12__.calculateBodyLength,
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, _aws_sdk_util_user_agent_node__WEBPACK_IMPORTED_MODULE_8__.defaultUserAgent)({
            serviceId: clientSharedValues.serviceId,
            clientVersion: package_default.version
        }),
        maxAttempts: config?.maxAttempts ?? (0, _smithy_node_config_provider__WEBPACK_IMPORTED_MODULE_10__.loadConfig)(_smithy_middleware_retry__WEBPACK_IMPORTED_MODULE_6__.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, _smithy_node_config_provider__WEBPACK_IMPORTED_MODULE_10__.loadConfig)(_smithy_config_resolver__WEBPACK_IMPORTED_MODULE_3__.NODE_REGION_CONFIG_OPTIONS, _smithy_config_resolver__WEBPACK_IMPORTED_MODULE_3__.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new _smithy_node_http_handler__WEBPACK_IMPORTED_MODULE_11__.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, _smithy_node_config_provider__WEBPACK_IMPORTED_MODULE_10__.loadConfig)({
            ..._smithy_middleware_retry__WEBPACK_IMPORTED_MODULE_6__.NODE_RETRY_MODE_CONFIG_OPTIONS,
            default: async ()=>(await defaultConfigProvider()).retryMode || _smithy_util_retry__WEBPACK_IMPORTED_MODULE_13__.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? _smithy_hash_node__WEBPACK_IMPORTED_MODULE_9__.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? _smithy_node_http_handler__WEBPACK_IMPORTED_MODULE_11__.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, _smithy_node_config_provider__WEBPACK_IMPORTED_MODULE_10__.loadConfig)(_smithy_config_resolver__WEBPACK_IMPORTED_MODULE_3__.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, _smithy_node_config_provider__WEBPACK_IMPORTED_MODULE_10__.loadConfig)(_smithy_config_resolver__WEBPACK_IMPORTED_MODULE_3__.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
    };
};



var asPartial = (t2)=>t2;
var resolveRuntimeExtensions = (runtimeConfig, extensions)=>{
    const extensionConfiguration = {
        ...asPartial((0, _aws_sdk_region_config_resolver__WEBPACK_IMPORTED_MODULE_21__.getAwsRegionExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.getDefaultExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_18__.getHttpHandlerExtensionConfiguration)(runtimeConfig))
    };
    extensions.forEach((extension)=>extension.configure(extensionConfiguration));
    return {
        ...runtimeConfig,
        ...(0, _aws_sdk_region_config_resolver__WEBPACK_IMPORTED_MODULE_21__.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
        ...(0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.resolveDefaultRuntimeConfig)(extensionConfiguration),
        ...(0, _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_18__.resolveHttpHandlerRuntimeConfig)(extensionConfiguration)
    };
};
var SSOOIDCClient = class extends _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.Client {
    constructor(...[configuration]){
        const _config_0 = getRuntimeConfig2(configuration || {});
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = (0, _smithy_config_resolver__WEBPACK_IMPORTED_MODULE_3__.resolveRegionConfig)(_config_1);
        const _config_3 = (0, _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_5__.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, _smithy_middleware_retry__WEBPACK_IMPORTED_MODULE_6__.resolveRetryConfig)(_config_3);
        const _config_5 = (0, _aws_sdk_middleware_host_header__WEBPACK_IMPORTED_MODULE_0__.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, _aws_sdk_middleware_user_agent__WEBPACK_IMPORTED_MODULE_2__.resolveUserAgentConfig)(_config_5);
        const _config_7 = resolveRuntimeExtensions(_config_6, configuration?.extensions || []);
        super(_config_7);
        this.config = _config_7;
        this.middlewareStack.use((0, _smithy_middleware_retry__WEBPACK_IMPORTED_MODULE_6__.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, _smithy_middleware_content_length__WEBPACK_IMPORTED_MODULE_4__.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, _aws_sdk_middleware_host_header__WEBPACK_IMPORTED_MODULE_0__.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, _aws_sdk_middleware_logger__WEBPACK_IMPORTED_MODULE_22__.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, _aws_sdk_middleware_recursion_detection__WEBPACK_IMPORTED_MODULE_1__.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, _aws_sdk_middleware_user_agent__WEBPACK_IMPORTED_MODULE_2__.getUserAgentPlugin)(this.config));
    }
    destroy() {
        super.destroy();
    }
};








var SSOOIDCServiceException = class _SSOOIDCServiceException extends _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.ServiceException {
    constructor(options){
        super(options);
        Object.setPrototypeOf(this, _SSOOIDCServiceException.prototype);
    }
};
var AccessDeniedException = class _AccessDeniedException extends SSOOIDCServiceException {
    constructor(opts){
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AccessDeniedException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
    }
};
var AuthorizationPendingException = class _AuthorizationPendingException extends SSOOIDCServiceException {
    constructor(opts){
        super({
            name: "AuthorizationPendingException",
            $fault: "client",
            ...opts
        });
        this.name = "AuthorizationPendingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AuthorizationPendingException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
    }
};
var ExpiredTokenException = class _ExpiredTokenException extends SSOOIDCServiceException {
    constructor(opts){
        super({
            name: "ExpiredTokenException",
            $fault: "client",
            ...opts
        });
        this.name = "ExpiredTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ExpiredTokenException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
    }
};
var InternalServerException = class _InternalServerException extends SSOOIDCServiceException {
    constructor(opts){
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _InternalServerException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
    }
};
var InvalidClientException = class _InvalidClientException extends SSOOIDCServiceException {
    constructor(opts){
        super({
            name: "InvalidClientException",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidClientException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
    }
};
var InvalidGrantException = class _InvalidGrantException extends SSOOIDCServiceException {
    constructor(opts){
        super({
            name: "InvalidGrantException",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidGrantException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidGrantException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
    }
};
var InvalidRequestException = class _InvalidRequestException extends SSOOIDCServiceException {
    constructor(opts){
        super({
            name: "InvalidRequestException",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRequestException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
    }
};
var InvalidScopeException = class _InvalidScopeException extends SSOOIDCServiceException {
    constructor(opts){
        super({
            name: "InvalidScopeException",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidScopeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidScopeException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
    }
};
var SlowDownException = class _SlowDownException extends SSOOIDCServiceException {
    constructor(opts){
        super({
            name: "SlowDownException",
            $fault: "client",
            ...opts
        });
        this.name = "SlowDownException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _SlowDownException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
    }
};
var UnauthorizedClientException = class _UnauthorizedClientException extends SSOOIDCServiceException {
    constructor(opts){
        super({
            name: "UnauthorizedClientException",
            $fault: "client",
            ...opts
        });
        this.name = "UnauthorizedClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnauthorizedClientException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
    }
};
var UnsupportedGrantTypeException = class _UnsupportedGrantTypeException extends SSOOIDCServiceException {
    constructor(opts){
        super({
            name: "UnsupportedGrantTypeException",
            $fault: "client",
            ...opts
        });
        this.name = "UnsupportedGrantTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnsupportedGrantTypeException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
    }
};
var InvalidClientMetadataException = class _InvalidClientMetadataException extends SSOOIDCServiceException {
    constructor(opts){
        super({
            name: "InvalidClientMetadataException",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidClientMetadataException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidClientMetadataException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
    }
};
var se_CreateTokenCommand = async (input, context)=>{
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json"
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/token`;
    let body;
    body = JSON.stringify((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.take)(input, {
        clientId: [],
        clientSecret: [],
        code: [],
        deviceCode: [],
        grantType: [],
        redirectUri: [],
        refreshToken: [],
        scope: (_)=>(0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__._json)(_)
    }));
    return new _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_18__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
    });
};
var se_RegisterClientCommand = async (input, context)=>{
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json"
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/client/register`;
    let body;
    body = JSON.stringify((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.take)(input, {
        clientName: [],
        clientType: [],
        scopes: (_)=>(0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__._json)(_)
    }));
    return new _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_18__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
    });
};
var se_StartDeviceAuthorizationCommand = async (input, context)=>{
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json"
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/device_authorization`;
    let body;
    body = JSON.stringify((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.take)(input, {
        clientId: [],
        clientSecret: [],
        startUrl: []
    }));
    return new _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_18__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
    });
};
var de_CreateTokenCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_CreateTokenCommandError(output, context);
    const contents = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectNonNull)((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.take)(data, {
        accessToken: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectString,
        expiresIn: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectInt32,
        idToken: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectString,
        refreshToken: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectString,
        tokenType: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectString
    });
    Object.assign(contents, doc);
    return contents;
};
var de_CreateTokenCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "AccessDeniedException":
        case "com.amazonaws.ssooidc#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AuthorizationPendingException":
        case "com.amazonaws.ssooidc#AuthorizationPendingException":
            throw await de_AuthorizationPendingExceptionRes(parsedOutput, context);
        case "ExpiredTokenException":
        case "com.amazonaws.ssooidc#ExpiredTokenException":
            throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidClientException":
        case "com.amazonaws.ssooidc#InvalidClientException":
            throw await de_InvalidClientExceptionRes(parsedOutput, context);
        case "InvalidGrantException":
        case "com.amazonaws.ssooidc#InvalidGrantException":
            throw await de_InvalidGrantExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "InvalidScopeException":
        case "com.amazonaws.ssooidc#InvalidScopeException":
            throw await de_InvalidScopeExceptionRes(parsedOutput, context);
        case "SlowDownException":
        case "com.amazonaws.ssooidc#SlowDownException":
            throw await de_SlowDownExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.ssooidc#UnauthorizedClientException":
            throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        case "UnsupportedGrantTypeException":
        case "com.amazonaws.ssooidc#UnsupportedGrantTypeException":
            throw await de_UnsupportedGrantTypeExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
var de_RegisterClientCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_RegisterClientCommandError(output, context);
    const contents = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectNonNull)((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.take)(data, {
        authorizationEndpoint: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectString,
        clientId: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectString,
        clientIdIssuedAt: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectLong,
        clientSecret: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectString,
        clientSecretExpiresAt: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectLong,
        tokenEndpoint: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectString
    });
    Object.assign(contents, doc);
    return contents;
};
var de_RegisterClientCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidClientMetadataException":
        case "com.amazonaws.ssooidc#InvalidClientMetadataException":
            throw await de_InvalidClientMetadataExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "InvalidScopeException":
        case "com.amazonaws.ssooidc#InvalidScopeException":
            throw await de_InvalidScopeExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
var de_StartDeviceAuthorizationCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_StartDeviceAuthorizationCommandError(output, context);
    const contents = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectNonNull)((0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.take)(data, {
        deviceCode: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectString,
        expiresIn: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectInt32,
        interval: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectInt32,
        userCode: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectString,
        verificationUri: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectString,
        verificationUriComplete: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectString
    });
    Object.assign(contents, doc);
    return contents;
};
var de_StartDeviceAuthorizationCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidClientException":
        case "com.amazonaws.ssooidc#InvalidClientException":
            throw await de_InvalidClientExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "SlowDownException":
        case "com.amazonaws.ssooidc#SlowDownException":
            throw await de_SlowDownExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.ssooidc#UnauthorizedClientException":
            throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
var throwDefaultError = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.withBaseException)(SSOOIDCServiceException);
var de_AccessDeniedExceptionRes = async (parsedOutput, context)=>{
    const contents = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.map)({});
    const data = parsedOutput.body;
    const doc = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.take)(data, {
        error: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectString,
        error_description: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectString
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.decorateServiceException)(exception, parsedOutput.body);
};
var de_AuthorizationPendingExceptionRes = async (parsedOutput, context)=>{
    const contents = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.map)({});
    const data = parsedOutput.body;
    const doc = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.take)(data, {
        error: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectString,
        error_description: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectString
    });
    Object.assign(contents, doc);
    const exception = new AuthorizationPendingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.decorateServiceException)(exception, parsedOutput.body);
};
var de_ExpiredTokenExceptionRes = async (parsedOutput, context)=>{
    const contents = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.map)({});
    const data = parsedOutput.body;
    const doc = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.take)(data, {
        error: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectString,
        error_description: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectString
    });
    Object.assign(contents, doc);
    const exception = new ExpiredTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.decorateServiceException)(exception, parsedOutput.body);
};
var de_InternalServerExceptionRes = async (parsedOutput, context)=>{
    const contents = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.map)({});
    const data = parsedOutput.body;
    const doc = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.take)(data, {
        error: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectString,
        error_description: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectString
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.decorateServiceException)(exception, parsedOutput.body);
};
var de_InvalidClientExceptionRes = async (parsedOutput, context)=>{
    const contents = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.map)({});
    const data = parsedOutput.body;
    const doc = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.take)(data, {
        error: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectString,
        error_description: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectString
    });
    Object.assign(contents, doc);
    const exception = new InvalidClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.decorateServiceException)(exception, parsedOutput.body);
};
var de_InvalidClientMetadataExceptionRes = async (parsedOutput, context)=>{
    const contents = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.map)({});
    const data = parsedOutput.body;
    const doc = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.take)(data, {
        error: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectString,
        error_description: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectString
    });
    Object.assign(contents, doc);
    const exception = new InvalidClientMetadataException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.decorateServiceException)(exception, parsedOutput.body);
};
var de_InvalidGrantExceptionRes = async (parsedOutput, context)=>{
    const contents = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.map)({});
    const data = parsedOutput.body;
    const doc = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.take)(data, {
        error: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectString,
        error_description: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectString
    });
    Object.assign(contents, doc);
    const exception = new InvalidGrantException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.decorateServiceException)(exception, parsedOutput.body);
};
var de_InvalidRequestExceptionRes = async (parsedOutput, context)=>{
    const contents = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.map)({});
    const data = parsedOutput.body;
    const doc = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.take)(data, {
        error: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectString,
        error_description: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectString
    });
    Object.assign(contents, doc);
    const exception = new InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.decorateServiceException)(exception, parsedOutput.body);
};
var de_InvalidScopeExceptionRes = async (parsedOutput, context)=>{
    const contents = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.map)({});
    const data = parsedOutput.body;
    const doc = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.take)(data, {
        error: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectString,
        error_description: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectString
    });
    Object.assign(contents, doc);
    const exception = new InvalidScopeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.decorateServiceException)(exception, parsedOutput.body);
};
var de_SlowDownExceptionRes = async (parsedOutput, context)=>{
    const contents = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.map)({});
    const data = parsedOutput.body;
    const doc = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.take)(data, {
        error: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectString,
        error_description: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectString
    });
    Object.assign(contents, doc);
    const exception = new SlowDownException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.decorateServiceException)(exception, parsedOutput.body);
};
var de_UnauthorizedClientExceptionRes = async (parsedOutput, context)=>{
    const contents = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.map)({});
    const data = parsedOutput.body;
    const doc = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.take)(data, {
        error: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectString,
        error_description: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectString
    });
    Object.assign(contents, doc);
    const exception = new UnauthorizedClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.decorateServiceException)(exception, parsedOutput.body);
};
var de_UnsupportedGrantTypeExceptionRes = async (parsedOutput, context)=>{
    const contents = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.map)({});
    const data = parsedOutput.body;
    const doc = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.take)(data, {
        error: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectString,
        error_description: _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.expectString
    });
    Object.assign(contents, doc);
    const exception = new UnsupportedGrantTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.decorateServiceException)(exception, parsedOutput.body);
};
var deserializeMetadata = (output)=>({
        httpStatusCode: output.statusCode,
        requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
    });
var collectBodyString = (streamBody, context)=>(0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.collectBody)(streamBody, context).then((body)=>context.utf8Encoder(body));
var parseBody = (streamBody, context)=>collectBodyString(streamBody, context).then((encoded)=>{
        if (encoded.length) return JSON.parse(encoded);
        return {};
    });
var parseErrorBody = async (errorBody, context)=>{
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
var loadRestJsonErrorCode = (output, data)=>{
    const findKey = (object, key)=>Object.keys(object).find((k2)=>k2.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue)=>{
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") cleanValue = cleanValue.toString();
        if (cleanValue.indexOf(",") >= 0) cleanValue = cleanValue.split(",")[0];
        if (cleanValue.indexOf(":") >= 0) cleanValue = cleanValue.split(":")[0];
        if (cleanValue.indexOf("#") >= 0) cleanValue = cleanValue.split("#")[1];
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== void 0) return sanitizeErrorCode(output.headers[headerKey]);
    if (data.code !== void 0) return sanitizeErrorCode(data.code);
    if (data["__type"] !== void 0) return sanitizeErrorCode(data["__type"]);
};
class CreateTokenCommand extends _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.Command {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_23__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_5__.getEndpointPlugin)(configuration, _CreateTokenCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOOIDCClient";
        const commandName = "CreateTokenCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_,
            [_smithy_types__WEBPACK_IMPORTED_MODULE_19__.SMITHY_CONTEXT_KEY]: {
                service: "AWSSSOOIDCService",
                operation: "CreateToken"
            }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return se_CreateTokenCommand(input, context);
    }
    deserialize(output, context) {
        return de_CreateTokenCommand(output, context);
    }
}




class RegisterClientCommand extends _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.Command {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_23__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_5__.getEndpointPlugin)(configuration, _RegisterClientCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOOIDCClient";
        const commandName = "RegisterClientCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_,
            [_smithy_types__WEBPACK_IMPORTED_MODULE_19__.SMITHY_CONTEXT_KEY]: {
                service: "AWSSSOOIDCService",
                operation: "RegisterClient"
            }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return se_RegisterClientCommand(input, context);
    }
    deserialize(output, context) {
        return de_RegisterClientCommand(output, context);
    }
}




class StartDeviceAuthorizationCommand extends _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.Command {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_23__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_5__.getEndpointPlugin)(configuration, _StartDeviceAuthorizationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOOIDCClient";
        const commandName = "StartDeviceAuthorizationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_,
            [_smithy_types__WEBPACK_IMPORTED_MODULE_19__.SMITHY_CONTEXT_KEY]: {
                service: "AWSSSOOIDCService",
                operation: "StartDeviceAuthorization"
            }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return se_StartDeviceAuthorizationCommand(input, context);
    }
    deserialize(output, context) {
        return de_StartDeviceAuthorizationCommand(output, context);
    }
}
var commands = {
    CreateTokenCommand,
    RegisterClientCommand,
    StartDeviceAuthorizationCommand
};
var SSOOIDC = class extends SSOOIDCClient {
};
(0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_7__.createAggregatedClient)(commands, SSOOIDC);

}),
"./node_modules/.pnpm/@aws-sdk+token-providers@3.489.0/node_modules/@aws-sdk/token-providers/dist-es/constants.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  EXPIRE_WINDOW_MS: function() { return EXPIRE_WINDOW_MS; },
  REFRESH_MESSAGE: function() { return REFRESH_MESSAGE; }
});
const EXPIRE_WINDOW_MS = 300000;
const REFRESH_MESSAGE = `To refresh this SSO session run 'aws sso login' with the corresponding profile.`;
}),
"./node_modules/.pnpm/@aws-sdk+token-providers@3.489.0/node_modules/@aws-sdk/token-providers/dist-es/fromSso.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  fromSso: function() { return fromSso; }
});
/* harmony import */var _smithy_property_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/property-provider */"./node_modules/.pnpm/@smithy+property-provider@2.1.1/node_modules/@smithy/property-provider/dist-es/TokenProviderError.js");
/* harmony import */var _smithy_shared_ini_file_loader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/shared-ini-file-loader */"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/index.js");
/* harmony import */var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */"./node_modules/.pnpm/@aws-sdk+token-providers@3.489.0/node_modules/@aws-sdk/token-providers/dist-es/constants.js");
/* harmony import */var _getNewSsoOidcToken__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./getNewSsoOidcToken */"./node_modules/.pnpm/@aws-sdk+token-providers@3.489.0/node_modules/@aws-sdk/token-providers/dist-es/getNewSsoOidcToken.js");
/* harmony import */var _validateTokenExpiry__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./validateTokenExpiry */"./node_modules/.pnpm/@aws-sdk+token-providers@3.489.0/node_modules/@aws-sdk/token-providers/dist-es/validateTokenExpiry.js");
/* harmony import */var _validateTokenKey__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./validateTokenKey */"./node_modules/.pnpm/@aws-sdk+token-providers@3.489.0/node_modules/@aws-sdk/token-providers/dist-es/validateTokenKey.js");
/* harmony import */var _writeSSOTokenToFile__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./writeSSOTokenToFile */"./node_modules/.pnpm/@aws-sdk+token-providers@3.489.0/node_modules/@aws-sdk/token-providers/dist-es/writeSSOTokenToFile.js");







const lastRefreshAttemptTime = new Date(0);
const fromSso = (init = {})=>async ()=>{
        const profiles = await (0, _smithy_shared_ini_file_loader__WEBPACK_IMPORTED_MODULE_0__.parseKnownFiles)(init);
        const profileName = (0, _smithy_shared_ini_file_loader__WEBPACK_IMPORTED_MODULE_0__.getProfileName)(init);
        const profile = profiles[profileName];
        if (!profile) throw new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_1__.TokenProviderError(`Profile '${profileName}' could not be found in shared credentials file.`, false);
        else if (!profile["sso_session"]) throw new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_1__.TokenProviderError(`Profile '${profileName}' is missing required property 'sso_session'.`);
        const ssoSessionName = profile["sso_session"];
        const ssoSessions = await (0, _smithy_shared_ini_file_loader__WEBPACK_IMPORTED_MODULE_0__.loadSsoSessionData)(init);
        const ssoSession = ssoSessions[ssoSessionName];
        if (!ssoSession) throw new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_1__.TokenProviderError(`Sso session '${ssoSessionName}' could not be found in shared credentials file.`, false);
        for (const ssoSessionRequiredKey of [
            "sso_start_url",
            "sso_region"
        ]){
            if (!ssoSession[ssoSessionRequiredKey]) throw new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_1__.TokenProviderError(`Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`, false);
        }
        const ssoStartUrl = ssoSession["sso_start_url"];
        const ssoRegion = ssoSession["sso_region"];
        let ssoToken;
        try {
            ssoToken = await (0, _smithy_shared_ini_file_loader__WEBPACK_IMPORTED_MODULE_0__.getSSOTokenFromFile)(ssoSessionName);
        } catch (e) {
            throw new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_1__.TokenProviderError(`The SSO session token associated with profile=${profileName} was not found or is invalid. ${_constants__WEBPACK_IMPORTED_MODULE_2__.REFRESH_MESSAGE}`, false);
        }
        (0, _validateTokenKey__WEBPACK_IMPORTED_MODULE_3__.validateTokenKey)("accessToken", ssoToken.accessToken);
        (0, _validateTokenKey__WEBPACK_IMPORTED_MODULE_3__.validateTokenKey)("expiresAt", ssoToken.expiresAt);
        const { accessToken, expiresAt } = ssoToken;
        const existingToken = {
            token: accessToken,
            expiration: new Date(expiresAt)
        };
        if (existingToken.expiration.getTime() - Date.now() > _constants__WEBPACK_IMPORTED_MODULE_2__.EXPIRE_WINDOW_MS) return existingToken;
        if (Date.now() - lastRefreshAttemptTime.getTime() < 30000) {
            (0, _validateTokenExpiry__WEBPACK_IMPORTED_MODULE_4__.validateTokenExpiry)(existingToken);
            return existingToken;
        }
        (0, _validateTokenKey__WEBPACK_IMPORTED_MODULE_3__.validateTokenKey)("clientId", ssoToken.clientId, true);
        (0, _validateTokenKey__WEBPACK_IMPORTED_MODULE_3__.validateTokenKey)("clientSecret", ssoToken.clientSecret, true);
        (0, _validateTokenKey__WEBPACK_IMPORTED_MODULE_3__.validateTokenKey)("refreshToken", ssoToken.refreshToken, true);
        try {
            lastRefreshAttemptTime.setTime(Date.now());
            const newSsoOidcToken = await (0, _getNewSsoOidcToken__WEBPACK_IMPORTED_MODULE_5__.getNewSsoOidcToken)(ssoToken, ssoRegion);
            (0, _validateTokenKey__WEBPACK_IMPORTED_MODULE_3__.validateTokenKey)("accessToken", newSsoOidcToken.accessToken);
            (0, _validateTokenKey__WEBPACK_IMPORTED_MODULE_3__.validateTokenKey)("expiresIn", newSsoOidcToken.expiresIn);
            const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1000);
            try {
                await (0, _writeSSOTokenToFile__WEBPACK_IMPORTED_MODULE_6__.writeSSOTokenToFile)(ssoSessionName, {
                    ...ssoToken,
                    accessToken: newSsoOidcToken.accessToken,
                    expiresAt: newTokenExpiration.toISOString(),
                    refreshToken: newSsoOidcToken.refreshToken
                });
            } catch (error) {}
            return {
                token: newSsoOidcToken.accessToken,
                expiration: newTokenExpiration
            };
        } catch (error) {
            (0, _validateTokenExpiry__WEBPACK_IMPORTED_MODULE_4__.validateTokenExpiry)(existingToken);
            return existingToken;
        }
    };
}),
"./node_modules/.pnpm/@aws-sdk+token-providers@3.489.0/node_modules/@aws-sdk/token-providers/dist-es/getNewSsoOidcToken.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getNewSsoOidcToken: function() { return getNewSsoOidcToken; }
});
/* harmony import */var _bundle_client_sso_oidc_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bundle/client-sso-oidc-node */"./node_modules/.pnpm/@aws-sdk+token-providers@3.489.0/node_modules/@aws-sdk/token-providers/dist-es/bundle/client-sso-oidc-node.js");
/* harmony import */var _getSsoOidcClient__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getSsoOidcClient */"./node_modules/.pnpm/@aws-sdk+token-providers@3.489.0/node_modules/@aws-sdk/token-providers/dist-es/getSsoOidcClient.js");


const getNewSsoOidcToken = (ssoToken, ssoRegion)=>{
    const ssoOidcClient = (0, _getSsoOidcClient__WEBPACK_IMPORTED_MODULE_0__.getSsoOidcClient)(ssoRegion);
    return ssoOidcClient.send(new _bundle_client_sso_oidc_node__WEBPACK_IMPORTED_MODULE_1__.CreateTokenCommand({
        clientId: ssoToken.clientId,
        clientSecret: ssoToken.clientSecret,
        refreshToken: ssoToken.refreshToken,
        grantType: "refresh_token"
    }));
};
}),
"./node_modules/.pnpm/@aws-sdk+token-providers@3.489.0/node_modules/@aws-sdk/token-providers/dist-es/getSsoOidcClient.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getSsoOidcClient: function() { return getSsoOidcClient; }
});
/* harmony import */var _bundle_client_sso_oidc_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bundle/client-sso-oidc-node */"./node_modules/.pnpm/@aws-sdk+token-providers@3.489.0/node_modules/@aws-sdk/token-providers/dist-es/bundle/client-sso-oidc-node.js");

const ssoOidcClientsHash = {};
const getSsoOidcClient = (ssoRegion)=>{
    if (ssoOidcClientsHash[ssoRegion]) return ssoOidcClientsHash[ssoRegion];
    const ssoOidcClient = new _bundle_client_sso_oidc_node__WEBPACK_IMPORTED_MODULE_0__.SSOOIDCClient({
        region: ssoRegion
    });
    ssoOidcClientsHash[ssoRegion] = ssoOidcClient;
    return ssoOidcClient;
};
}),
"./node_modules/.pnpm/@aws-sdk+token-providers@3.489.0/node_modules/@aws-sdk/token-providers/dist-es/validateTokenExpiry.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  validateTokenExpiry: function() { return validateTokenExpiry; }
});
/* harmony import */var _smithy_property_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/property-provider */"./node_modules/.pnpm/@smithy+property-provider@2.1.1/node_modules/@smithy/property-provider/dist-es/TokenProviderError.js");
/* harmony import */var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */"./node_modules/.pnpm/@aws-sdk+token-providers@3.489.0/node_modules/@aws-sdk/token-providers/dist-es/constants.js");


const validateTokenExpiry = (token)=>{
    if (token.expiration && token.expiration.getTime() < Date.now()) throw new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_0__.TokenProviderError(`Token is expired. ${_constants__WEBPACK_IMPORTED_MODULE_1__.REFRESH_MESSAGE}`, false);
};
}),
"./node_modules/.pnpm/@aws-sdk+token-providers@3.489.0/node_modules/@aws-sdk/token-providers/dist-es/validateTokenKey.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  validateTokenKey: function() { return validateTokenKey; }
});
/* harmony import */var _smithy_property_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/property-provider */"./node_modules/.pnpm/@smithy+property-provider@2.1.1/node_modules/@smithy/property-provider/dist-es/TokenProviderError.js");
/* harmony import */var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */"./node_modules/.pnpm/@aws-sdk+token-providers@3.489.0/node_modules/@aws-sdk/token-providers/dist-es/constants.js");


const validateTokenKey = (key, value, forRefresh = false)=>{
    if (typeof value === "undefined") throw new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_0__.TokenProviderError(`Value not present for '${key}' in SSO Token${forRefresh ? ". Cannot refresh" : ""}. ${_constants__WEBPACK_IMPORTED_MODULE_1__.REFRESH_MESSAGE}`, false);
};
}),
"./node_modules/.pnpm/@aws-sdk+token-providers@3.489.0/node_modules/@aws-sdk/token-providers/dist-es/writeSSOTokenToFile.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  writeSSOTokenToFile: function() { return writeSSOTokenToFile; }
});
/* harmony import */var _smithy_shared_ini_file_loader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/shared-ini-file-loader */"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/index.js");
/* harmony import */var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */"fs");
/* harmony import */var fs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_1__);


const { writeFile } = fs__WEBPACK_IMPORTED_MODULE_1__.promises;
const writeSSOTokenToFile = (id, ssoToken)=>{
    const tokenFilepath = (0, _smithy_shared_ini_file_loader__WEBPACK_IMPORTED_MODULE_0__.getSSOTokenFilepath)(id);
    const tokenString = JSON.stringify(ssoToken, null, 2);
    return writeFile(tokenFilepath, tokenString);
};
}),
"./node_modules/.pnpm/@aws-sdk+util-endpoints@3.489.0/node_modules/@aws-sdk/util-endpoints/dist-es/aws.js": (function (__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) {
"use strict";
/* harmony import */var _smithy_util_endpoints__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/util-endpoints */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/index.js");
/* harmony import */var _lib_aws_isVirtualHostableS3Bucket__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/aws/isVirtualHostableS3Bucket */"./node_modules/.pnpm/@aws-sdk+util-endpoints@3.489.0/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/isVirtualHostableS3Bucket.js");
/* harmony import */var _lib_aws_parseArn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/aws/parseArn */"./node_modules/.pnpm/@aws-sdk+util-endpoints@3.489.0/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/parseArn.js");
/* harmony import */var _lib_aws_partition__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/aws/partition */"./node_modules/.pnpm/@aws-sdk+util-endpoints@3.489.0/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partition.js");




const awsEndpointFunctions = {
    isVirtualHostableS3Bucket: _lib_aws_isVirtualHostableS3Bucket__WEBPACK_IMPORTED_MODULE_1__.isVirtualHostableS3Bucket,
    parseArn: _lib_aws_parseArn__WEBPACK_IMPORTED_MODULE_3__.parseArn,
    partition: _lib_aws_partition__WEBPACK_IMPORTED_MODULE_2__.partition
};
_smithy_util_endpoints__WEBPACK_IMPORTED_MODULE_0__.customEndpointFunctions.aws = awsEndpointFunctions;
}),
"./node_modules/.pnpm/@aws-sdk+util-endpoints@3.489.0/node_modules/@aws-sdk/util-endpoints/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getUserAgentPrefix: function() { return /* reexport safe */ _lib_aws_partition__WEBPACK_IMPORTED_MODULE_1__.getUserAgentPrefix; }
});
/* harmony import */var _aws__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./aws */"./node_modules/.pnpm/@aws-sdk+util-endpoints@3.489.0/node_modules/@aws-sdk/util-endpoints/dist-es/aws.js");
/* harmony import */var _lib_aws_partition__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/aws/partition */"./node_modules/.pnpm/@aws-sdk+util-endpoints@3.489.0/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partition.js");
/* harmony import */var _lib_isIpAddress__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/isIpAddress */"./node_modules/.pnpm/@aws-sdk+util-endpoints@3.489.0/node_modules/@aws-sdk/util-endpoints/dist-es/lib/isIpAddress.js");
/* harmony import */var _resolveEndpoint__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./resolveEndpoint */"./node_modules/.pnpm/@aws-sdk+util-endpoints@3.489.0/node_modules/@aws-sdk/util-endpoints/dist-es/resolveEndpoint.js");
/* harmony import */var _types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./types */"./node_modules/.pnpm/@aws-sdk+util-endpoints@3.489.0/node_modules/@aws-sdk/util-endpoints/dist-es/types/index.js");





}),
"./node_modules/.pnpm/@aws-sdk+util-endpoints@3.489.0/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/isVirtualHostableS3Bucket.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  isVirtualHostableS3Bucket: function() { return isVirtualHostableS3Bucket; }
});
/* harmony import */var _smithy_util_endpoints__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/util-endpoints */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/index.js");
/* harmony import */var _isIpAddress__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../isIpAddress */"./node_modules/.pnpm/@aws-sdk+util-endpoints@3.489.0/node_modules/@aws-sdk/util-endpoints/dist-es/lib/isIpAddress.js");


const isVirtualHostableS3Bucket = (value, allowSubDomains = false)=>{
    if (allowSubDomains) {
        for (const label of value.split(".")){
            if (!isVirtualHostableS3Bucket(label)) return false;
        }
        return true;
    }
    if (!(0, _smithy_util_endpoints__WEBPACK_IMPORTED_MODULE_0__.isValidHostLabel)(value)) return false;
    if (value.length < 3 || value.length > 63) return false;
    if (value !== value.toLowerCase()) return false;
    if ((0, _isIpAddress__WEBPACK_IMPORTED_MODULE_1__.isIpAddress)(value)) return false;
    return true;
};
}),
"./node_modules/.pnpm/@aws-sdk+util-endpoints@3.489.0/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/parseArn.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  parseArn: function() { return parseArn; }
});
const parseArn = (value)=>{
    const segments = value.split(":");
    if (segments.length < 6) return null;
    const [arn, partition, service, region, accountId, ...resourceId] = segments;
    if (arn !== "arn" || partition === "" || service === "" || resourceId[0] === "") return null;
    return {
        partition,
        service,
        region,
        accountId,
        resourceId: resourceId[0].includes("/") ? resourceId[0].split("/") : resourceId
    };
};
}),
"./node_modules/.pnpm/@aws-sdk+util-endpoints@3.489.0/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partition.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getUserAgentPrefix: function() { return getUserAgentPrefix; },
  partition: function() { return partition; }
});
/* harmony import */var _partitions_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./partitions.json */"./node_modules/.pnpm/@aws-sdk+util-endpoints@3.489.0/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partitions.json");

let selectedPartitionsInfo = _partitions_json__WEBPACK_IMPORTED_MODULE_0__;
let selectedUserAgentPrefix = "";
const partition = (value)=>{
    const { partitions } = selectedPartitionsInfo;
    for (const partition of partitions){
        const { regions, outputs } = partition;
        for (const [region, regionData] of Object.entries(regions)){
            if (region === value) return {
                ...outputs,
                ...regionData
            };
        }
    }
    for (const partition of partitions){
        const { regionRegex, outputs } = partition;
        if (new RegExp(regionRegex).test(value)) return {
            ...outputs
        };
    }
    const DEFAULT_PARTITION = partitions.find((partition)=>partition.id === "aws");
    if (!DEFAULT_PARTITION) throw new Error("Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist.");
    return {
        ...DEFAULT_PARTITION.outputs
    };
};
const setPartitionInfo = (partitionsInfo, userAgentPrefix = "")=>{
    selectedPartitionsInfo = partitionsInfo;
    selectedUserAgentPrefix = userAgentPrefix;
};
const useDefaultPartitionInfo = ()=>{
    setPartitionInfo(partitionsInfo, "");
};
const getUserAgentPrefix = ()=>selectedUserAgentPrefix;
}),
"./node_modules/.pnpm/@aws-sdk+util-endpoints@3.489.0/node_modules/@aws-sdk/util-endpoints/dist-es/lib/isIpAddress.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  isIpAddress: function() { return /* reexport safe */ _smithy_util_endpoints__WEBPACK_IMPORTED_MODULE_0__.isIpAddress; }
});
/* harmony import */var _smithy_util_endpoints__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/util-endpoints */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/index.js");

}),
"./node_modules/.pnpm/@aws-sdk+util-endpoints@3.489.0/node_modules/@aws-sdk/util-endpoints/dist-es/resolveEndpoint.js": (function (__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) {
"use strict";
/* harmony import */var _smithy_util_endpoints__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/util-endpoints */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/index.js");

}),
"./node_modules/.pnpm/@aws-sdk+util-endpoints@3.489.0/node_modules/@aws-sdk/util-endpoints/dist-es/types/EndpointError.js": (function (__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) {
"use strict";
/* harmony import */var _smithy_util_endpoints__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/util-endpoints */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/index.js");

}),
"./node_modules/.pnpm/@aws-sdk+util-endpoints@3.489.0/node_modules/@aws-sdk/util-endpoints/dist-es/types/index.js": (function (__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) {
"use strict";
/* harmony import */var _EndpointError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EndpointError */"./node_modules/.pnpm/@aws-sdk+util-endpoints@3.489.0/node_modules/@aws-sdk/util-endpoints/dist-es/types/EndpointError.js");






}),
"./node_modules/.pnpm/@aws-sdk+util-user-agent-node@3.489.0/node_modules/@aws-sdk/util-user-agent-node/dist-es/crt-availability.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  crtAvailability: function() { return crtAvailability; }
});
const crtAvailability = {
    isCrtAvailable: false
};
}),
"./node_modules/.pnpm/@aws-sdk+util-user-agent-node@3.489.0/node_modules/@aws-sdk/util-user-agent-node/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  defaultUserAgent: function() { return defaultUserAgent; }
});
/* harmony import */var _smithy_node_config_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/node-config-provider */"./node_modules/.pnpm/@smithy+node-config-provider@2.2.1/node_modules/@smithy/node-config-provider/dist-es/index.js");
/* harmony import */var os__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! os */"os");
/* harmony import */var os__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(os__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */var process__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! process */"process");
/* harmony import */var process__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(process__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */var _is_crt_available__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./is-crt-available */"./node_modules/.pnpm/@aws-sdk+util-user-agent-node@3.489.0/node_modules/@aws-sdk/util-user-agent-node/dist-es/is-crt-available.js");





const UA_APP_ID_ENV_NAME = "AWS_SDK_UA_APP_ID";
const UA_APP_ID_INI_NAME = "sdk-ua-app-id";
const defaultUserAgent = ({ serviceId, clientVersion })=>{
    const sections = [
        [
            "aws-sdk-js",
            clientVersion
        ],
        [
            "ua",
            "2.0"
        ],
        [
            `os/${(0, os__WEBPACK_IMPORTED_MODULE_1__.platform)()}`,
            (0, os__WEBPACK_IMPORTED_MODULE_1__.release)()
        ],
        [
            "lang/js"
        ],
        [
            "md/nodejs",
            `${process__WEBPACK_IMPORTED_MODULE_2__.versions.node}`
        ]
    ];
    const crtAvailable = (0, _is_crt_available__WEBPACK_IMPORTED_MODULE_4__.isCrtAvailable)();
    if (crtAvailable) sections.push(crtAvailable);
    if (serviceId) sections.push([
        `api/${serviceId}`,
        clientVersion
    ]);
    if (process__WEBPACK_IMPORTED_MODULE_2__.env.AWS_EXECUTION_ENV) sections.push([
        `exec-env/${process__WEBPACK_IMPORTED_MODULE_2__.env.AWS_EXECUTION_ENV}`
    ]);
    const appIdPromise = (0, _smithy_node_config_provider__WEBPACK_IMPORTED_MODULE_0__.loadConfig)({
        environmentVariableSelector: (env)=>env[UA_APP_ID_ENV_NAME],
        configFileSelector: (profile)=>profile[UA_APP_ID_INI_NAME],
        default: undefined
    })();
    let resolvedUserAgent = undefined;
    return async ()=>{
        if (!resolvedUserAgent) {
            const appId = await appIdPromise;
            resolvedUserAgent = appId ? [
                ...sections,
                [
                    `app/${appId}`
                ]
            ] : [
                ...sections
            ];
        }
        return resolvedUserAgent;
    };
};
}),
"./node_modules/.pnpm/@aws-sdk+util-user-agent-node@3.489.0/node_modules/@aws-sdk/util-user-agent-node/dist-es/is-crt-available.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  isCrtAvailable: function() { return isCrtAvailable; }
});
/* harmony import */var _crt_availability__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./crt-availability */"./node_modules/.pnpm/@aws-sdk+util-user-agent-node@3.489.0/node_modules/@aws-sdk/util-user-agent-node/dist-es/crt-availability.js");

const isCrtAvailable = ()=>{
    if (_crt_availability__WEBPACK_IMPORTED_MODULE_0__.crtAvailability.isCrtAvailable) return [
        "md/crt-avail"
    ];
    return null;
};
}),
"./node_modules/.pnpm/@aws-sdk+util-utf8-browser@3.259.0/node_modules/@aws-sdk/util-utf8-browser/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  fromUtf8: function() { return fromUtf8; },
  toUtf8: function() { return toUtf8; }
});
/* harmony import */var _pureJs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pureJs */"./node_modules/.pnpm/@aws-sdk+util-utf8-browser@3.259.0/node_modules/@aws-sdk/util-utf8-browser/dist-es/pureJs.js");
/* harmony import */var _whatwgEncodingApi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./whatwgEncodingApi */"./node_modules/.pnpm/@aws-sdk+util-utf8-browser@3.259.0/node_modules/@aws-sdk/util-utf8-browser/dist-es/whatwgEncodingApi.js");


const fromUtf8 = (input)=>typeof TextEncoder === "function" ? (0, _whatwgEncodingApi__WEBPACK_IMPORTED_MODULE_0__.fromUtf8)(input) : (0, _pureJs__WEBPACK_IMPORTED_MODULE_1__.fromUtf8)(input);
const toUtf8 = (input)=>typeof TextDecoder === "function" ? (0, _whatwgEncodingApi__WEBPACK_IMPORTED_MODULE_0__.toUtf8)(input) : (0, _pureJs__WEBPACK_IMPORTED_MODULE_1__.toUtf8)(input);
}),
"./node_modules/.pnpm/@aws-sdk+util-utf8-browser@3.259.0/node_modules/@aws-sdk/util-utf8-browser/dist-es/pureJs.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  fromUtf8: function() { return fromUtf8; },
  toUtf8: function() { return toUtf8; }
});
const fromUtf8 = (input)=>{
    const bytes = [];
    for(let i = 0, len = input.length; i < len; i++){
        const value = input.charCodeAt(i);
        if (value < 0x80) bytes.push(value);
        else if (value < 0x800) bytes.push(value >> 6 | 0b11000000, value & 0b111111 | 0b10000000);
        else if (i + 1 < input.length && (value & 0xfc00) === 0xd800 && (input.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
            const surrogatePair = 0x10000 + ((value & 0b1111111111) << 10) + (input.charCodeAt(++i) & 0b1111111111);
            bytes.push(surrogatePair >> 18 | 0b11110000, surrogatePair >> 12 & 0b111111 | 0b10000000, surrogatePair >> 6 & 0b111111 | 0b10000000, surrogatePair & 0b111111 | 0b10000000);
        } else bytes.push(value >> 12 | 0b11100000, value >> 6 & 0b111111 | 0b10000000, value & 0b111111 | 0b10000000);
    }
    return Uint8Array.from(bytes);
};
const toUtf8 = (input)=>{
    let decoded = "";
    for(let i = 0, len = input.length; i < len; i++){
        const byte = input[i];
        if (byte < 0x80) decoded += String.fromCharCode(byte);
        else if (0b11000000 <= byte && byte < 0b11100000) {
            const nextByte = input[++i];
            decoded += String.fromCharCode((byte & 0b11111) << 6 | nextByte & 0b111111);
        } else if (0b11110000 <= byte && byte < 0b101101101) {
            const surrogatePair = [
                byte,
                input[++i],
                input[++i],
                input[++i]
            ];
            const encoded = "%" + surrogatePair.map((byteValue)=>byteValue.toString(16)).join("%");
            decoded += decodeURIComponent(encoded);
        } else decoded += String.fromCharCode((byte & 0b1111) << 12 | (input[++i] & 0b111111) << 6 | input[++i] & 0b111111);
    }
    return decoded;
};
}),
"./node_modules/.pnpm/@aws-sdk+util-utf8-browser@3.259.0/node_modules/@aws-sdk/util-utf8-browser/dist-es/whatwgEncodingApi.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  fromUtf8: function() { return fromUtf8; },
  toUtf8: function() { return toUtf8; }
});
function fromUtf8(input) {
    return new TextEncoder().encode(input);
}
function toUtf8(input) {
    return new TextDecoder("utf-8").decode(input);
}
}),
"./node_modules/.pnpm/@smithy+config-resolver@2.1.1/node_modules/@smithy/config-resolver/dist-es/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS: function() { return NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS; }
});
/* harmony import */var _smithy_util_config_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/util-config-provider */"./node_modules/.pnpm/@smithy+util-config-provider@2.2.1/node_modules/@smithy/util-config-provider/dist-es/index.js");

const ENV_USE_DUALSTACK_ENDPOINT = "AWS_USE_DUALSTACK_ENDPOINT";
const CONFIG_USE_DUALSTACK_ENDPOINT = "use_dualstack_endpoint";
const DEFAULT_USE_DUALSTACK_ENDPOINT = false;
const NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {
    environmentVariableSelector: (env)=>(0, _smithy_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.booleanSelector)(env, ENV_USE_DUALSTACK_ENDPOINT, _smithy_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.SelectorType.ENV),
    configFileSelector: (profile)=>(0, _smithy_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.booleanSelector)(profile, CONFIG_USE_DUALSTACK_ENDPOINT, _smithy_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.SelectorType.CONFIG),
    default: false
};
}),
"./node_modules/.pnpm/@smithy+config-resolver@2.1.1/node_modules/@smithy/config-resolver/dist-es/endpointsConfig/NodeUseFipsEndpointConfigOptions.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS: function() { return NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS; }
});
/* harmony import */var _smithy_util_config_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/util-config-provider */"./node_modules/.pnpm/@smithy+util-config-provider@2.2.1/node_modules/@smithy/util-config-provider/dist-es/index.js");

const ENV_USE_FIPS_ENDPOINT = "AWS_USE_FIPS_ENDPOINT";
const CONFIG_USE_FIPS_ENDPOINT = "use_fips_endpoint";
const DEFAULT_USE_FIPS_ENDPOINT = false;
const NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {
    environmentVariableSelector: (env)=>(0, _smithy_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.booleanSelector)(env, ENV_USE_FIPS_ENDPOINT, _smithy_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.SelectorType.ENV),
    configFileSelector: (profile)=>(0, _smithy_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.booleanSelector)(profile, CONFIG_USE_FIPS_ENDPOINT, _smithy_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.SelectorType.CONFIG),
    default: false
};
}),
"./node_modules/.pnpm/@smithy+config-resolver@2.1.1/node_modules/@smithy/config-resolver/dist-es/endpointsConfig/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS: function() { return /* reexport safe */ _NodeUseDualstackEndpointConfigOptions__WEBPACK_IMPORTED_MODULE_0__.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS; },
  NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS: function() { return /* reexport safe */ _NodeUseFipsEndpointConfigOptions__WEBPACK_IMPORTED_MODULE_1__.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS; }
});
/* harmony import */var _NodeUseDualstackEndpointConfigOptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NodeUseDualstackEndpointConfigOptions */"./node_modules/.pnpm/@smithy+config-resolver@2.1.1/node_modules/@smithy/config-resolver/dist-es/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js");
/* harmony import */var _NodeUseFipsEndpointConfigOptions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./NodeUseFipsEndpointConfigOptions */"./node_modules/.pnpm/@smithy+config-resolver@2.1.1/node_modules/@smithy/config-resolver/dist-es/endpointsConfig/NodeUseFipsEndpointConfigOptions.js");
/* harmony import */var _resolveCustomEndpointsConfig__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./resolveCustomEndpointsConfig */"./node_modules/.pnpm/@smithy+config-resolver@2.1.1/node_modules/@smithy/config-resolver/dist-es/endpointsConfig/resolveCustomEndpointsConfig.js");
/* harmony import */var _resolveEndpointsConfig__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./resolveEndpointsConfig */"./node_modules/.pnpm/@smithy+config-resolver@2.1.1/node_modules/@smithy/config-resolver/dist-es/endpointsConfig/resolveEndpointsConfig.js");




}),
"./node_modules/.pnpm/@smithy+config-resolver@2.1.1/node_modules/@smithy/config-resolver/dist-es/endpointsConfig/resolveCustomEndpointsConfig.js": (function (__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) {
"use strict";
/* harmony import */var _smithy_util_middleware__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/util-middleware */"./node_modules/.pnpm/@smithy+util-middleware@2.1.1/node_modules/@smithy/util-middleware/dist-es/index.js");

const resolveCustomEndpointsConfig = (input)=>{
    const { endpoint, urlParser } = input;
    return {
        ...input,
        tls: input.tls ?? true,
        endpoint: normalizeProvider(typeof endpoint === "string" ? urlParser(endpoint) : endpoint),
        isCustomEndpoint: true,
        useDualstackEndpoint: normalizeProvider(input.useDualstackEndpoint ?? false)
    };
};
}),
"./node_modules/.pnpm/@smithy+config-resolver@2.1.1/node_modules/@smithy/config-resolver/dist-es/endpointsConfig/resolveEndpointsConfig.js": (function (__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) {
"use strict";
/* harmony import */var _smithy_util_middleware__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/util-middleware */"./node_modules/.pnpm/@smithy+util-middleware@2.1.1/node_modules/@smithy/util-middleware/dist-es/index.js");


const resolveEndpointsConfig = (input)=>{
    const useDualstackEndpoint = normalizeProvider(input.useDualstackEndpoint ?? false);
    const { endpoint, useFipsEndpoint, urlParser } = input;
    return {
        ...input,
        tls: input.tls ?? true,
        endpoint: endpoint ? normalizeProvider(typeof endpoint === "string" ? urlParser(endpoint) : endpoint) : ()=>getEndpointFromRegion({
                ...input,
                useDualstackEndpoint,
                useFipsEndpoint
            }),
        isCustomEndpoint: !!endpoint,
        useDualstackEndpoint
    };
};
}),
"./node_modules/.pnpm/@smithy+config-resolver@2.1.1/node_modules/@smithy/config-resolver/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  NODE_REGION_CONFIG_FILE_OPTIONS: function() { return /* reexport safe */ _regionConfig__WEBPACK_IMPORTED_MODULE_1__.NODE_REGION_CONFIG_FILE_OPTIONS; },
  NODE_REGION_CONFIG_OPTIONS: function() { return /* reexport safe */ _regionConfig__WEBPACK_IMPORTED_MODULE_1__.NODE_REGION_CONFIG_OPTIONS; },
  NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS: function() { return /* reexport safe */ _endpointsConfig__WEBPACK_IMPORTED_MODULE_0__.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS; },
  NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS: function() { return /* reexport safe */ _endpointsConfig__WEBPACK_IMPORTED_MODULE_0__.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS; },
  resolveRegionConfig: function() { return /* reexport safe */ _regionConfig__WEBPACK_IMPORTED_MODULE_1__.resolveRegionConfig; }
});
/* harmony import */var _endpointsConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./endpointsConfig */"./node_modules/.pnpm/@smithy+config-resolver@2.1.1/node_modules/@smithy/config-resolver/dist-es/endpointsConfig/index.js");
/* harmony import */var _regionConfig__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./regionConfig */"./node_modules/.pnpm/@smithy+config-resolver@2.1.1/node_modules/@smithy/config-resolver/dist-es/regionConfig/index.js");



}),
"./node_modules/.pnpm/@smithy+config-resolver@2.1.1/node_modules/@smithy/config-resolver/dist-es/regionConfig/config.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  NODE_REGION_CONFIG_FILE_OPTIONS: function() { return NODE_REGION_CONFIG_FILE_OPTIONS; },
  NODE_REGION_CONFIG_OPTIONS: function() { return NODE_REGION_CONFIG_OPTIONS; }
});
const REGION_ENV_NAME = "AWS_REGION";
const REGION_INI_NAME = "region";
const NODE_REGION_CONFIG_OPTIONS = {
    environmentVariableSelector: (env)=>env[REGION_ENV_NAME],
    configFileSelector: (profile)=>profile[REGION_INI_NAME],
    default: ()=>{
        throw new Error("Region is missing");
    }
};
const NODE_REGION_CONFIG_FILE_OPTIONS = {
    preferredFile: "credentials"
};
}),
"./node_modules/.pnpm/@smithy+config-resolver@2.1.1/node_modules/@smithy/config-resolver/dist-es/regionConfig/getRealRegion.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getRealRegion: function() { return getRealRegion; }
});
/* harmony import */var _isFipsRegion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isFipsRegion */"./node_modules/.pnpm/@smithy+config-resolver@2.1.1/node_modules/@smithy/config-resolver/dist-es/regionConfig/isFipsRegion.js");

const getRealRegion = (region)=>(0, _isFipsRegion__WEBPACK_IMPORTED_MODULE_0__.isFipsRegion)(region) ? [
        "fips-aws-global",
        "aws-fips"
    ].includes(region) ? "us-east-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "") : region;
}),
"./node_modules/.pnpm/@smithy+config-resolver@2.1.1/node_modules/@smithy/config-resolver/dist-es/regionConfig/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  NODE_REGION_CONFIG_FILE_OPTIONS: function() { return /* reexport safe */ _config__WEBPACK_IMPORTED_MODULE_0__.NODE_REGION_CONFIG_FILE_OPTIONS; },
  NODE_REGION_CONFIG_OPTIONS: function() { return /* reexport safe */ _config__WEBPACK_IMPORTED_MODULE_0__.NODE_REGION_CONFIG_OPTIONS; },
  resolveRegionConfig: function() { return /* reexport safe */ _resolveRegionConfig__WEBPACK_IMPORTED_MODULE_1__.resolveRegionConfig; }
});
/* harmony import */var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */"./node_modules/.pnpm/@smithy+config-resolver@2.1.1/node_modules/@smithy/config-resolver/dist-es/regionConfig/config.js");
/* harmony import */var _resolveRegionConfig__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./resolveRegionConfig */"./node_modules/.pnpm/@smithy+config-resolver@2.1.1/node_modules/@smithy/config-resolver/dist-es/regionConfig/resolveRegionConfig.js");


}),
"./node_modules/.pnpm/@smithy+config-resolver@2.1.1/node_modules/@smithy/config-resolver/dist-es/regionConfig/isFipsRegion.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  isFipsRegion: function() { return isFipsRegion; }
});
const isFipsRegion = (region)=>typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips"));
}),
"./node_modules/.pnpm/@smithy+config-resolver@2.1.1/node_modules/@smithy/config-resolver/dist-es/regionConfig/resolveRegionConfig.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  resolveRegionConfig: function() { return resolveRegionConfig; }
});
/* harmony import */var _getRealRegion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getRealRegion */"./node_modules/.pnpm/@smithy+config-resolver@2.1.1/node_modules/@smithy/config-resolver/dist-es/regionConfig/getRealRegion.js");
/* harmony import */var _isFipsRegion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isFipsRegion */"./node_modules/.pnpm/@smithy+config-resolver@2.1.1/node_modules/@smithy/config-resolver/dist-es/regionConfig/isFipsRegion.js");


const resolveRegionConfig = (input)=>{
    const { region, useFipsEndpoint } = input;
    if (!region) throw new Error("Region is missing");
    return {
        ...input,
        region: async ()=>{
            if (typeof region === "string") return (0, _getRealRegion__WEBPACK_IMPORTED_MODULE_0__.getRealRegion)(region);
            const providedRegion = await region();
            return (0, _getRealRegion__WEBPACK_IMPORTED_MODULE_0__.getRealRegion)(providedRegion);
        },
        useFipsEndpoint: async ()=>{
            const providedRegion = typeof region === "string" ? region : await region();
            if ((0, _isFipsRegion__WEBPACK_IMPORTED_MODULE_1__.isFipsRegion)(providedRegion)) return true;
            return typeof useFipsEndpoint !== "function" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();
        }
    };
};
}),
"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/getSmithyContext.js": (function (__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) {
"use strict";
/* harmony import */var _smithy_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/types */"./node_modules/.pnpm/@smithy+types@2.9.1/node_modules/@smithy/types/dist-es/index.js");

const getSmithyContext = (context)=>context[SMITHY_CONTEXT_KEY] || (context[SMITHY_CONTEXT_KEY] = {});
}),
"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  DefaultIdentityProviderConfig: function() { return /* reexport safe */ _util_identity_and_auth__WEBPACK_IMPORTED_MODULE_2__.DefaultIdentityProviderConfig; },
  NoAuthSigner: function() { return /* reexport safe */ _util_identity_and_auth__WEBPACK_IMPORTED_MODULE_2__.NoAuthSigner; },
  createPaginator: function() { return /* reexport safe */ _pagination_createPaginator__WEBPACK_IMPORTED_MODULE_6__.createPaginator; },
  doesIdentityRequireRefresh: function() { return /* reexport safe */ _util_identity_and_auth__WEBPACK_IMPORTED_MODULE_2__.doesIdentityRequireRefresh; },
  getHttpAuthSchemeEndpointRuleSetPlugin: function() { return /* reexport safe */ _middleware_http_auth_scheme__WEBPACK_IMPORTED_MODULE_0__.getHttpAuthSchemeEndpointRuleSetPlugin; },
  getHttpSigningPlugin: function() { return /* reexport safe */ _middleware_http_signing__WEBPACK_IMPORTED_MODULE_1__.getHttpSigningPlugin; },
  isIdentityExpired: function() { return /* reexport safe */ _util_identity_and_auth__WEBPACK_IMPORTED_MODULE_2__.isIdentityExpired; },
  memoizeIdentityProvider: function() { return /* reexport safe */ _util_identity_and_auth__WEBPACK_IMPORTED_MODULE_2__.memoizeIdentityProvider; },
  normalizeProvider: function() { return /* reexport safe */ _normalizeProvider__WEBPACK_IMPORTED_MODULE_4__.normalizeProvider; },
  requestBuilder: function() { return /* reexport safe */ _protocols_requestBuilder__WEBPACK_IMPORTED_MODULE_5__.requestBuilder; }
});
/* harmony import */var _middleware_http_auth_scheme__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./middleware-http-auth-scheme */"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/index.js");
/* harmony import */var _middleware_http_signing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./middleware-http-signing */"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/middleware-http-signing/index.js");
/* harmony import */var _util_identity_and_auth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util-identity-and-auth */"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/util-identity-and-auth/index.js");
/* harmony import */var _getSmithyContext__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getSmithyContext */"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/getSmithyContext.js");
/* harmony import */var _normalizeProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./normalizeProvider */"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/normalizeProvider.js");
/* harmony import */var _protocols_requestBuilder__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./protocols/requestBuilder */"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/protocols/requestBuilder.js");
/* harmony import */var _pagination_createPaginator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./pagination/createPaginator */"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/pagination/createPaginator.js");







}),
"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemeEndpointRuleSetPlugin.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getHttpAuthSchemeEndpointRuleSetPlugin: function() { return getHttpAuthSchemeEndpointRuleSetPlugin; }
});
/* harmony import */var _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/middleware-endpoint */"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/index.js");
/* harmony import */var _httpAuthSchemeMiddleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./httpAuthSchemeMiddleware */"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/httpAuthSchemeMiddleware.js");


const httpAuthSchemeEndpointRuleSetMiddlewareOptions = {
    step: "serialize",
    tags: [
        "HTTP_AUTH_SCHEME"
    ],
    name: "httpAuthSchemeMiddleware",
    override: true,
    relation: "before",
    toMiddleware: _smithy_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.endpointMiddlewareOptions.name
};
const getHttpAuthSchemeEndpointRuleSetPlugin = (config, { httpAuthSchemeParametersProvider, identityProviderConfigProvider })=>({
        applyToStack: (clientStack)=>{
            clientStack.addRelativeTo((0, _httpAuthSchemeMiddleware__WEBPACK_IMPORTED_MODULE_1__.httpAuthSchemeMiddleware)(config, {
                httpAuthSchemeParametersProvider,
                identityProviderConfigProvider
            }), httpAuthSchemeEndpointRuleSetMiddlewareOptions);
        }
    });
}),
"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemePlugin.js": (function (__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) {
"use strict";
/* harmony import */var _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/middleware-serde */"./node_modules/.pnpm/@smithy+middleware-serde@2.1.1/node_modules/@smithy/middleware-serde/dist-es/serdePlugin.js");
/* harmony import */var _httpAuthSchemeMiddleware__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./httpAuthSchemeMiddleware */"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/httpAuthSchemeMiddleware.js");


const httpAuthSchemeMiddlewareOptions = {
    step: "serialize",
    tags: [
        "HTTP_AUTH_SCHEME"
    ],
    name: "httpAuthSchemeMiddleware",
    override: true,
    relation: "before",
    toMiddleware: _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.serializerMiddlewareOption.name
};
const getHttpAuthSchemePlugin = (config, { httpAuthSchemeParametersProvider, identityProviderConfigProvider })=>({
        applyToStack: (clientStack)=>{
            clientStack.addRelativeTo(httpAuthSchemeMiddleware(config, {
                httpAuthSchemeParametersProvider,
                identityProviderConfigProvider
            }), httpAuthSchemeMiddlewareOptions);
        }
    });
}),
"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/httpAuthSchemeMiddleware.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  httpAuthSchemeMiddleware: function() { return httpAuthSchemeMiddleware; }
});
/* harmony import */var _smithy_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/types */"./node_modules/.pnpm/@smithy+types@2.9.1/node_modules/@smithy/types/dist-es/index.js");
/* harmony import */var _smithy_util_middleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/util-middleware */"./node_modules/.pnpm/@smithy+util-middleware@2.1.1/node_modules/@smithy/util-middleware/dist-es/index.js");


function convertHttpAuthSchemesToMap(httpAuthSchemes) {
    const map = new Map();
    for (const scheme of httpAuthSchemes)map.set(scheme.schemeId, scheme);
    return map;
}
const httpAuthSchemeMiddleware = (config, mwOptions)=>(next, context)=>async (args)=>{
            const options = config.httpAuthSchemeProvider(await mwOptions.httpAuthSchemeParametersProvider(config, context, args.input));
            const authSchemes = convertHttpAuthSchemesToMap(config.httpAuthSchemes);
            const smithyContext = (0, _smithy_util_middleware__WEBPACK_IMPORTED_MODULE_1__.getSmithyContext)(context);
            const failureReasons = [];
            for (const option of options){
                const scheme = authSchemes.get(option.schemeId);
                if (!scheme) {
                    failureReasons.push(`HttpAuthScheme \`${option.schemeId}\` was not enabled for this service.`);
                    continue;
                }
                const identityProvider = scheme.identityProvider(await mwOptions.identityProviderConfigProvider(config));
                if (!identityProvider) {
                    failureReasons.push(`HttpAuthScheme \`${option.schemeId}\` did not have an IdentityProvider configured.`);
                    continue;
                }
                const { identityProperties = {}, signingProperties = {} } = option.propertiesExtractor?.(config, context) || {};
                option.identityProperties = Object.assign(option.identityProperties || {}, identityProperties);
                option.signingProperties = Object.assign(option.signingProperties || {}, signingProperties);
                smithyContext.selectedHttpAuthScheme = {
                    httpAuthOption: option,
                    identity: await identityProvider(option.identityProperties),
                    signer: scheme.signer
                };
                break;
            }
            if (!smithyContext.selectedHttpAuthScheme) throw new Error(failureReasons.join("\n"));
            return next(args);
        };
}),
"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getHttpAuthSchemeEndpointRuleSetPlugin: function() { return /* reexport safe */ _getHttpAuthSchemeEndpointRuleSetPlugin__WEBPACK_IMPORTED_MODULE_1__.getHttpAuthSchemeEndpointRuleSetPlugin; }
});
/* harmony import */var _httpAuthSchemeMiddleware__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./httpAuthSchemeMiddleware */"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/httpAuthSchemeMiddleware.js");
/* harmony import */var _getHttpAuthSchemeEndpointRuleSetPlugin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getHttpAuthSchemeEndpointRuleSetPlugin */"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemeEndpointRuleSetPlugin.js");
/* harmony import */var _getHttpAuthSchemePlugin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getHttpAuthSchemePlugin */"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemePlugin.js");



}),
"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/middleware-http-signing/getHttpSigningMiddleware.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getHttpSigningPlugin: function() { return getHttpSigningPlugin; }
});
/* harmony import */var _smithy_middleware_retry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/middleware-retry */"./node_modules/.pnpm/@smithy+middleware-retry@2.1.1/node_modules/@smithy/middleware-retry/dist-es/index.js");
/* harmony import */var _httpSigningMiddleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./httpSigningMiddleware */"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/middleware-http-signing/httpSigningMiddleware.js");


const httpSigningMiddlewareOptions = {
    step: "finalizeRequest",
    tags: [
        "HTTP_SIGNING"
    ],
    name: "httpSigningMiddleware",
    aliases: [
        "apiKeyMiddleware",
        "tokenMiddleware",
        "awsAuthMiddleware"
    ],
    override: true,
    relation: "after",
    toMiddleware: _smithy_middleware_retry__WEBPACK_IMPORTED_MODULE_0__.retryMiddlewareOptions.name
};
const getHttpSigningPlugin = (config)=>({
        applyToStack: (clientStack)=>{
            clientStack.addRelativeTo((0, _httpSigningMiddleware__WEBPACK_IMPORTED_MODULE_1__.httpSigningMiddleware)(config), httpSigningMiddlewareOptions);
        }
    });
}),
"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/middleware-http-signing/httpSigningMiddleware.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  httpSigningMiddleware: function() { return httpSigningMiddleware; }
});
/* harmony import */var _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/protocol-http */"./node_modules/.pnpm/@smithy+protocol-http@3.1.1/node_modules/@smithy/protocol-http/dist-es/index.js");
/* harmony import */var _smithy_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/types */"./node_modules/.pnpm/@smithy+types@2.9.1/node_modules/@smithy/types/dist-es/index.js");
/* harmony import */var _smithy_util_middleware__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @smithy/util-middleware */"./node_modules/.pnpm/@smithy+util-middleware@2.1.1/node_modules/@smithy/util-middleware/dist-es/index.js");



const defaultErrorHandler = (signingProperties)=>(error)=>{
        throw error;
    };
const defaultSuccessHandler = (httpResponse, signingProperties)=>{};
const httpSigningMiddleware = (config)=>(next, context)=>async (args)=>{
            if (!_smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest.isInstance(args.request)) return next(args);
            const smithyContext = (0, _smithy_util_middleware__WEBPACK_IMPORTED_MODULE_2__.getSmithyContext)(context);
            const scheme = smithyContext.selectedHttpAuthScheme;
            if (!scheme) throw new Error(`No HttpAuthScheme was selected: unable to sign request`);
            const { httpAuthOption: { signingProperties = {} }, identity, signer } = scheme;
            const output = await next({
                ...args,
                request: await signer.sign(args.request, identity, signingProperties)
            }).catch((signer.errorHandler || defaultErrorHandler)(signingProperties));
            (signer.successHandler || defaultSuccessHandler)(output.response, signingProperties);
            return output;
        };
}),
"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/middleware-http-signing/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getHttpSigningPlugin: function() { return /* reexport safe */ _getHttpSigningMiddleware__WEBPACK_IMPORTED_MODULE_1__.getHttpSigningPlugin; }
});
/* harmony import */var _httpSigningMiddleware__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./httpSigningMiddleware */"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/middleware-http-signing/httpSigningMiddleware.js");
/* harmony import */var _getHttpSigningMiddleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getHttpSigningMiddleware */"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/middleware-http-signing/getHttpSigningMiddleware.js");


}),
"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/normalizeProvider.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  normalizeProvider: function() { return normalizeProvider; }
});
const normalizeProvider = (input)=>{
    if (typeof input === "function") return input;
    const promisified = Promise.resolve(input);
    return ()=>promisified;
};
}),
"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/pagination/createPaginator.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  createPaginator: function() { return createPaginator; }
});
const makePagedClientRequest = async (CommandCtor, client, input, ...args)=>{
    return await client.send(new CommandCtor(input), ...args);
};
function createPaginator(ClientCtor, CommandCtor, inputTokenName, outputTokenName, pageSizeTokenName) {
    return async function* paginateOperation(config, input, ...additionalArguments) {
        let token = config.startingToken || undefined;
        let hasNext = true;
        let page;
        while(hasNext){
            input[inputTokenName] = token;
            if (pageSizeTokenName) input[pageSizeTokenName] = input[pageSizeTokenName] ?? config.pageSize;
            if (config.client instanceof ClientCtor) page = await makePagedClientRequest(CommandCtor, config.client, input, ...additionalArguments);
            else throw new Error(`Invalid client, expected instance of ${ClientCtor.name}`);
            yield page;
            const prevToken = token;
            token = page[outputTokenName];
            hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
        }
        return undefined;
    };
}
}),
"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/protocols/requestBuilder.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  requestBuilder: function() { return requestBuilder; }
});
/* harmony import */var _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/protocol-http */"./node_modules/.pnpm/@smithy+protocol-http@3.1.1/node_modules/@smithy/protocol-http/dist-es/index.js");
/* harmony import */var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/smithy-client */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/index.js");


function requestBuilder(input, context) {
    return new RequestBuilder(input, context);
}
class RequestBuilder {
    constructor(input, context){
        this.input = input;
        this.context = context;
        this.query = {};
        this.method = "";
        this.headers = {};
        this.path = "";
        this.body = null;
        this.hostname = "";
        this.resolvePathStack = [];
    }
    async build() {
        const { hostname, protocol = "https", port, path: basePath } = await this.context.endpoint();
        this.path = basePath;
        for (const resolvePath of this.resolvePathStack)resolvePath(this.path);
        return new _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
            protocol,
            hostname: this.hostname || hostname,
            port,
            method: this.method,
            path: this.path,
            query: this.query,
            body: this.body,
            headers: this.headers
        });
    }
    hn(hostname) {
        this.hostname = hostname;
        return this;
    }
    bp(uriLabel) {
        this.resolvePathStack.push((basePath)=>{
            this.path = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + uriLabel;
        });
        return this;
    }
    p(memberName, labelValueProvider, uriLabel, isGreedyLabel) {
        this.resolvePathStack.push((path)=>{
            this.path = (0, _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(path, this.input, memberName, labelValueProvider, uriLabel, isGreedyLabel);
        });
        return this;
    }
    h(headers) {
        this.headers = headers;
        return this;
    }
    q(query) {
        this.query = query;
        return this;
    }
    b(body) {
        this.body = body;
        return this;
    }
    m(method) {
        this.method = method;
        return this;
    }
}
}),
"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/util-identity-and-auth/DefaultIdentityProviderConfig.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  DefaultIdentityProviderConfig: function() { return DefaultIdentityProviderConfig; }
});
class DefaultIdentityProviderConfig {
    constructor(config){
        this.authSchemes = new Map();
        for (const [key, value] of Object.entries(config))if (value !== undefined) this.authSchemes.set(key, value);
    }
    getIdentityProvider(schemeId) {
        return this.authSchemes.get(schemeId);
    }
}
}),
"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/httpApiKeyAuth.js": (function (__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) {
"use strict";
/* harmony import */var _smithy_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/types */"./node_modules/.pnpm/@smithy+types@2.9.1/node_modules/@smithy/types/dist-es/index.js");

class HttpApiKeyAuthSigner {
    async sign(httpRequest, identity, signingProperties) {
        if (!signingProperties) throw new Error("request could not be signed with `apiKey` since the `name` and `in` signer properties are missing");
        if (!signingProperties.name) throw new Error("request could not be signed with `apiKey` since the `name` signer property is missing");
        if (!signingProperties.in) throw new Error("request could not be signed with `apiKey` since the `in` signer property is missing");
        if (!identity.apiKey) throw new Error("request could not be signed with `apiKey` since the `apiKey` is not defined");
        const clonedRequest = httpRequest.clone();
        if (signingProperties.in === HttpApiKeyAuthLocation.QUERY) clonedRequest.query[signingProperties.name] = identity.apiKey;
        else if (signingProperties.in === HttpApiKeyAuthLocation.HEADER) clonedRequest.headers[signingProperties.name] = signingProperties.scheme ? `${signingProperties.scheme} ${identity.apiKey}` : identity.apiKey;
        else throw new Error("request can only be signed with `apiKey` locations `query` or `header`, but found: `" + signingProperties.in + "`");
        return clonedRequest;
    }
}
}),
"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  NoAuthSigner: function() { return /* reexport safe */ _noAuth__WEBPACK_IMPORTED_MODULE_2__.NoAuthSigner; }
});
/* harmony import */var _httpApiKeyAuth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./httpApiKeyAuth */"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/httpApiKeyAuth.js");
/* harmony import */var _noAuth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./noAuth */"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/noAuth.js");



}),
"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/noAuth.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  NoAuthSigner: function() { return NoAuthSigner; }
});
class NoAuthSigner {
    async sign(httpRequest, identity, signingProperties) {
        return httpRequest;
    }
}
}),
"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/util-identity-and-auth/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  DefaultIdentityProviderConfig: function() { return /* reexport safe */ _DefaultIdentityProviderConfig__WEBPACK_IMPORTED_MODULE_0__.DefaultIdentityProviderConfig; },
  NoAuthSigner: function() { return /* reexport safe */ _httpAuthSchemes__WEBPACK_IMPORTED_MODULE_1__.NoAuthSigner; },
  doesIdentityRequireRefresh: function() { return /* reexport safe */ _memoizeIdentityProvider__WEBPACK_IMPORTED_MODULE_2__.doesIdentityRequireRefresh; },
  isIdentityExpired: function() { return /* reexport safe */ _memoizeIdentityProvider__WEBPACK_IMPORTED_MODULE_2__.isIdentityExpired; },
  memoizeIdentityProvider: function() { return /* reexport safe */ _memoizeIdentityProvider__WEBPACK_IMPORTED_MODULE_2__.memoizeIdentityProvider; }
});
/* harmony import */var _DefaultIdentityProviderConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DefaultIdentityProviderConfig */"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/util-identity-and-auth/DefaultIdentityProviderConfig.js");
/* harmony import */var _httpAuthSchemes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./httpAuthSchemes */"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/index.js");
/* harmony import */var _memoizeIdentityProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./memoizeIdentityProvider */"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/util-identity-and-auth/memoizeIdentityProvider.js");



}),
"./node_modules/.pnpm/@smithy+core@1.3.1/node_modules/@smithy/core/dist-es/util-identity-and-auth/memoizeIdentityProvider.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  doesIdentityRequireRefresh: function() { return doesIdentityRequireRefresh; },
  isIdentityExpired: function() { return isIdentityExpired; },
  memoizeIdentityProvider: function() { return memoizeIdentityProvider; }
});
const createIsIdentityExpiredFunction = (expirationMs)=>(identity)=>doesIdentityRequireRefresh(identity) && identity.expiration.getTime() - Date.now() < expirationMs;
const EXPIRATION_MS = 300000;
const isIdentityExpired = createIsIdentityExpiredFunction(EXPIRATION_MS);
const doesIdentityRequireRefresh = (identity)=>identity.expiration !== undefined;
const memoizeIdentityProvider = (provider, isExpired, requiresRefresh)=>{
    if (provider === undefined) return undefined;
    const normalizedProvider = typeof provider !== "function" ? async ()=>Promise.resolve(provider) : provider;
    let resolved;
    let pending;
    let hasResult;
    let isConstant = false;
    const coalesceProvider = async (options)=>{
        if (!pending) pending = normalizedProvider(options);
        try {
            resolved = await pending;
            hasResult = true;
            isConstant = false;
        } finally{
            pending = undefined;
        }
        return resolved;
    };
    if (isExpired === undefined) return async (options)=>{
        if (!hasResult || options?.forceRefresh) resolved = await coalesceProvider(options);
        return resolved;
    };
    return async (options)=>{
        if (!hasResult || options?.forceRefresh) resolved = await coalesceProvider(options);
        if (isConstant) return resolved;
        if (!requiresRefresh(resolved)) {
            isConstant = true;
            return resolved;
        }
        if (isExpired(resolved)) {
            await coalesceProvider(options);
            return resolved;
        }
        return resolved;
    };
};
}),
"./node_modules/.pnpm/@smithy+credential-provider-imds@2.2.1/node_modules/@smithy/credential-provider-imds/dist-es/config/Endpoint.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  Endpoint: function() { return Endpoint; }
});
var Endpoint;
(function(Endpoint) {
    Endpoint["IPv4"] = "http://169.254.169.254";
    Endpoint["IPv6"] = "http://[fd00:ec2::254]";
})(Endpoint || (Endpoint = {}));
}),
"./node_modules/.pnpm/@smithy+credential-provider-imds@2.2.1/node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointConfigOptions.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  ENDPOINT_CONFIG_OPTIONS: function() { return ENDPOINT_CONFIG_OPTIONS; }
});
const ENV_ENDPOINT_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT";
const CONFIG_ENDPOINT_NAME = "ec2_metadata_service_endpoint";
const ENDPOINT_CONFIG_OPTIONS = {
    environmentVariableSelector: (env)=>env[ENV_ENDPOINT_NAME],
    configFileSelector: (profile)=>profile[CONFIG_ENDPOINT_NAME],
    default: undefined
};
}),
"./node_modules/.pnpm/@smithy+credential-provider-imds@2.2.1/node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointMode.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  EndpointMode: function() { return EndpointMode; }
});
var EndpointMode;
(function(EndpointMode) {
    EndpointMode["IPv4"] = "IPv4";
    EndpointMode["IPv6"] = "IPv6";
})(EndpointMode || (EndpointMode = {}));
}),
"./node_modules/.pnpm/@smithy+credential-provider-imds@2.2.1/node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointModeConfigOptions.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  ENDPOINT_MODE_CONFIG_OPTIONS: function() { return ENDPOINT_MODE_CONFIG_OPTIONS; }
});
/* harmony import */var _EndpointMode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EndpointMode */"./node_modules/.pnpm/@smithy+credential-provider-imds@2.2.1/node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointMode.js");

const ENV_ENDPOINT_MODE_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE";
const CONFIG_ENDPOINT_MODE_NAME = "ec2_metadata_service_endpoint_mode";
const ENDPOINT_MODE_CONFIG_OPTIONS = {
    environmentVariableSelector: (env)=>env[ENV_ENDPOINT_MODE_NAME],
    configFileSelector: (profile)=>profile[CONFIG_ENDPOINT_MODE_NAME],
    default: _EndpointMode__WEBPACK_IMPORTED_MODULE_0__.EndpointMode.IPv4
};
}),
"./node_modules/.pnpm/@smithy+credential-provider-imds@2.2.1/node_modules/@smithy/credential-provider-imds/dist-es/error/InstanceMetadataV1FallbackError.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  InstanceMetadataV1FallbackError: function() { return InstanceMetadataV1FallbackError; }
});
/* harmony import */var _smithy_property_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/property-provider */"./node_modules/.pnpm/@smithy+property-provider@2.1.1/node_modules/@smithy/property-provider/dist-es/CredentialsProviderError.js");

class InstanceMetadataV1FallbackError extends _smithy_property_provider__WEBPACK_IMPORTED_MODULE_0__.CredentialsProviderError {
    constructor(message, tryNextLink = true){
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "InstanceMetadataV1FallbackError";
        Object.setPrototypeOf(this, InstanceMetadataV1FallbackError.prototype);
    }
}
}),
"./node_modules/.pnpm/@smithy+credential-provider-imds@2.2.1/node_modules/@smithy/credential-provider-imds/dist-es/fromContainerMetadata.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  ENV_CMDS_FULL_URI: function() { return ENV_CMDS_FULL_URI; },
  ENV_CMDS_RELATIVE_URI: function() { return ENV_CMDS_RELATIVE_URI; },
  fromContainerMetadata: function() { return fromContainerMetadata; }
});
/* harmony import */var _smithy_property_provider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @smithy/property-provider */"./node_modules/.pnpm/@smithy+property-provider@2.1.1/node_modules/@smithy/property-provider/dist-es/CredentialsProviderError.js");
/* harmony import */var url__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! url */"url");
/* harmony import */var url__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(url__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */var _remoteProvider_httpRequest__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./remoteProvider/httpRequest */"./node_modules/.pnpm/@smithy+credential-provider-imds@2.2.1/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/httpRequest.js");
/* harmony import */var _remoteProvider_ImdsCredentials__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./remoteProvider/ImdsCredentials */"./node_modules/.pnpm/@smithy+credential-provider-imds@2.2.1/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/ImdsCredentials.js");
/* harmony import */var _remoteProvider_RemoteProviderInit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./remoteProvider/RemoteProviderInit */"./node_modules/.pnpm/@smithy+credential-provider-imds@2.2.1/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/RemoteProviderInit.js");
/* harmony import */var _remoteProvider_retry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./remoteProvider/retry */"./node_modules/.pnpm/@smithy+credential-provider-imds@2.2.1/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/retry.js");






const ENV_CMDS_FULL_URI = "AWS_CONTAINER_CREDENTIALS_FULL_URI";
const ENV_CMDS_RELATIVE_URI = "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI";
const ENV_CMDS_AUTH_TOKEN = "AWS_CONTAINER_AUTHORIZATION_TOKEN";
const fromContainerMetadata = (init = {})=>{
    const { timeout, maxRetries } = (0, _remoteProvider_RemoteProviderInit__WEBPACK_IMPORTED_MODULE_2__.providerConfigFromInit)(init);
    return ()=>(0, _remoteProvider_retry__WEBPACK_IMPORTED_MODULE_3__.retry)(async ()=>{
            const requestOptions = await getCmdsUri();
            const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));
            if (!(0, _remoteProvider_ImdsCredentials__WEBPACK_IMPORTED_MODULE_4__.isImdsCredentials)(credsResponse)) throw new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_5__.CredentialsProviderError("Invalid response received from instance metadata service.");
            return (0, _remoteProvider_ImdsCredentials__WEBPACK_IMPORTED_MODULE_4__.fromImdsCredentials)(credsResponse);
        }, maxRetries);
};
const requestFromEcsImds = async (timeout, options)=>{
    if (process.env[ENV_CMDS_AUTH_TOKEN]) options.headers = {
        ...options.headers,
        Authorization: process.env[ENV_CMDS_AUTH_TOKEN]
    };
    const buffer = await (0, _remoteProvider_httpRequest__WEBPACK_IMPORTED_MODULE_1__.httpRequest)({
        ...options,
        timeout
    });
    return buffer.toString();
};
const CMDS_IP = "169.254.170.2";
const GREENGRASS_HOSTS = {
    localhost: true,
    "127.0.0.1": true
};
const GREENGRASS_PROTOCOLS = {
    "http:": true,
    "https:": true
};
const getCmdsUri = async ()=>{
    if (process.env[ENV_CMDS_RELATIVE_URI]) return {
        hostname: CMDS_IP,
        path: process.env[ENV_CMDS_RELATIVE_URI]
    };
    if (process.env[ENV_CMDS_FULL_URI]) {
        const parsed = (0, url__WEBPACK_IMPORTED_MODULE_0__.parse)(process.env[ENV_CMDS_FULL_URI]);
        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) throw new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_5__.CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, false);
        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) throw new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_5__.CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, false);
        return {
            ...parsed,
            port: parsed.port ? parseInt(parsed.port, 10) : undefined
        };
    }
    throw new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_5__.CredentialsProviderError("The container metadata credential provider cannot be used unless" + ` the ${ENV_CMDS_RELATIVE_URI} or ${ENV_CMDS_FULL_URI} environment` + " variable is set", false);
};
}),
"./node_modules/.pnpm/@smithy+credential-provider-imds@2.2.1/node_modules/@smithy/credential-provider-imds/dist-es/fromInstanceMetadata.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  fromInstanceMetadata: function() { return fromInstanceMetadata; }
});
/* harmony import */var _smithy_node_config_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/node-config-provider */"./node_modules/.pnpm/@smithy+node-config-provider@2.2.1/node_modules/@smithy/node-config-provider/dist-es/index.js");
/* harmony import */var _smithy_property_provider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @smithy/property-provider */"./node_modules/.pnpm/@smithy+property-provider@2.1.1/node_modules/@smithy/property-provider/dist-es/CredentialsProviderError.js");
/* harmony import */var _error_InstanceMetadataV1FallbackError__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./error/InstanceMetadataV1FallbackError */"./node_modules/.pnpm/@smithy+credential-provider-imds@2.2.1/node_modules/@smithy/credential-provider-imds/dist-es/error/InstanceMetadataV1FallbackError.js");
/* harmony import */var _remoteProvider_httpRequest__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./remoteProvider/httpRequest */"./node_modules/.pnpm/@smithy+credential-provider-imds@2.2.1/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/httpRequest.js");
/* harmony import */var _remoteProvider_ImdsCredentials__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./remoteProvider/ImdsCredentials */"./node_modules/.pnpm/@smithy+credential-provider-imds@2.2.1/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/ImdsCredentials.js");
/* harmony import */var _remoteProvider_RemoteProviderInit__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./remoteProvider/RemoteProviderInit */"./node_modules/.pnpm/@smithy+credential-provider-imds@2.2.1/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/RemoteProviderInit.js");
/* harmony import */var _remoteProvider_retry__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./remoteProvider/retry */"./node_modules/.pnpm/@smithy+credential-provider-imds@2.2.1/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/retry.js");
/* harmony import */var _utils_getInstanceMetadataEndpoint__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/getInstanceMetadataEndpoint */"./node_modules/.pnpm/@smithy+credential-provider-imds@2.2.1/node_modules/@smithy/credential-provider-imds/dist-es/utils/getInstanceMetadataEndpoint.js");
/* harmony import */var _utils_staticStabilityProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/staticStabilityProvider */"./node_modules/.pnpm/@smithy+credential-provider-imds@2.2.1/node_modules/@smithy/credential-provider-imds/dist-es/utils/staticStabilityProvider.js");









const IMDS_PATH = "/latest/meta-data/iam/security-credentials/";
const IMDS_TOKEN_PATH = "/latest/api/token";
const AWS_EC2_METADATA_V1_DISABLED = "AWS_EC2_METADATA_V1_DISABLED";
const PROFILE_AWS_EC2_METADATA_V1_DISABLED = "ec2_metadata_v1_disabled";
const X_AWS_EC2_METADATA_TOKEN = "x-aws-ec2-metadata-token";
const fromInstanceMetadata = (init = {})=>(0, _utils_staticStabilityProvider__WEBPACK_IMPORTED_MODULE_3__.staticStabilityProvider)(getInstanceImdsProvider(init), {
        logger: init.logger
    });
const getInstanceImdsProvider = (init)=>{
    let disableFetchToken = false;
    const { logger, profile } = init;
    const { timeout, maxRetries } = (0, _remoteProvider_RemoteProviderInit__WEBPACK_IMPORTED_MODULE_4__.providerConfigFromInit)(init);
    const getCredentials = async (maxRetries, options)=>{
        const isImdsV1Fallback = disableFetchToken || options.headers?.[X_AWS_EC2_METADATA_TOKEN] == null;
        if (isImdsV1Fallback) {
            let fallbackBlockedFromProfile = false;
            let fallbackBlockedFromProcessEnv = false;
            const configValue = await (0, _smithy_node_config_provider__WEBPACK_IMPORTED_MODULE_0__.loadConfig)({
                environmentVariableSelector: (env)=>{
                    const envValue = env[AWS_EC2_METADATA_V1_DISABLED];
                    fallbackBlockedFromProcessEnv = !!envValue && envValue !== "false";
                    if (envValue === undefined) throw new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_5__.CredentialsProviderError(`${AWS_EC2_METADATA_V1_DISABLED} not set in env, checking config file next.`);
                    return fallbackBlockedFromProcessEnv;
                },
                configFileSelector: (profile)=>{
                    const profileValue = profile[PROFILE_AWS_EC2_METADATA_V1_DISABLED];
                    fallbackBlockedFromProfile = !!profileValue && profileValue !== "false";
                    return fallbackBlockedFromProfile;
                },
                default: false
            }, {
                profile
            })();
            if (init.ec2MetadataV1Disabled || configValue) {
                const causes = [];
                if (init.ec2MetadataV1Disabled) causes.push("credential provider initialization (runtime option ec2MetadataV1Disabled)");
                if (fallbackBlockedFromProfile) causes.push(`config file profile (${PROFILE_AWS_EC2_METADATA_V1_DISABLED})`);
                if (fallbackBlockedFromProcessEnv) causes.push(`process environment variable (${AWS_EC2_METADATA_V1_DISABLED})`);
                throw new _error_InstanceMetadataV1FallbackError__WEBPACK_IMPORTED_MODULE_6__.InstanceMetadataV1FallbackError(`AWS EC2 Metadata v1 fallback has been blocked by AWS SDK configuration in the following: [${causes.join(", ")}].`);
            }
        }
        const imdsProfile = (await (0, _remoteProvider_retry__WEBPACK_IMPORTED_MODULE_7__.retry)(async ()=>{
            let profile;
            try {
                profile = await getProfile(options);
            } catch (err) {
                if (err.statusCode === 401) disableFetchToken = false;
                throw err;
            }
            return profile;
        }, maxRetries)).trim();
        return (0, _remoteProvider_retry__WEBPACK_IMPORTED_MODULE_7__.retry)(async ()=>{
            let creds;
            try {
                creds = await getCredentialsFromProfile(imdsProfile, options);
            } catch (err) {
                if (err.statusCode === 401) disableFetchToken = false;
                throw err;
            }
            return creds;
        }, maxRetries);
    };
    return async ()=>{
        const endpoint = await (0, _utils_getInstanceMetadataEndpoint__WEBPACK_IMPORTED_MODULE_2__.getInstanceMetadataEndpoint)();
        if (disableFetchToken) {
            logger?.debug("AWS SDK Instance Metadata", "using v1 fallback (no token fetch)");
            return getCredentials(maxRetries, {
                ...endpoint,
                timeout
            });
        } else {
            let token;
            try {
                token = (await getMetadataToken({
                    ...endpoint,
                    timeout
                })).toString();
            } catch (error) {
                if (error?.statusCode === 400) throw Object.assign(error, {
                    message: "EC2 Metadata token request returned error"
                });
                else if (error.message === "TimeoutError" || [
                    403,
                    404,
                    405
                ].includes(error.statusCode)) disableFetchToken = true;
                logger?.debug("AWS SDK Instance Metadata", "using v1 fallback (initial)");
                return getCredentials(maxRetries, {
                    ...endpoint,
                    timeout
                });
            }
            return getCredentials(maxRetries, {
                ...endpoint,
                headers: {
                    [X_AWS_EC2_METADATA_TOKEN]: token
                },
                timeout
            });
        }
    };
};
const getMetadataToken = async (options)=>(0, _remoteProvider_httpRequest__WEBPACK_IMPORTED_MODULE_1__.httpRequest)({
        ...options,
        path: IMDS_TOKEN_PATH,
        method: "PUT",
        headers: {
            "x-aws-ec2-metadata-token-ttl-seconds": "21600"
        }
    });
const getProfile = async (options)=>(await (0, _remoteProvider_httpRequest__WEBPACK_IMPORTED_MODULE_1__.httpRequest)({
        ...options,
        path: IMDS_PATH
    })).toString();
const getCredentialsFromProfile = async (profile, options)=>{
    const credsResponse = JSON.parse((await (0, _remoteProvider_httpRequest__WEBPACK_IMPORTED_MODULE_1__.httpRequest)({
        ...options,
        path: IMDS_PATH + profile
    })).toString());
    if (!(0, _remoteProvider_ImdsCredentials__WEBPACK_IMPORTED_MODULE_8__.isImdsCredentials)(credsResponse)) throw new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_5__.CredentialsProviderError("Invalid response received from instance metadata service.");
    return (0, _remoteProvider_ImdsCredentials__WEBPACK_IMPORTED_MODULE_8__.fromImdsCredentials)(credsResponse);
};
}),
"./node_modules/.pnpm/@smithy+credential-provider-imds@2.2.1/node_modules/@smithy/credential-provider-imds/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  ENV_CMDS_FULL_URI: function() { return /* reexport safe */ _fromContainerMetadata__WEBPACK_IMPORTED_MODULE_0__.ENV_CMDS_FULL_URI; },
  ENV_CMDS_RELATIVE_URI: function() { return /* reexport safe */ _fromContainerMetadata__WEBPACK_IMPORTED_MODULE_0__.ENV_CMDS_RELATIVE_URI; },
  fromContainerMetadata: function() { return /* reexport safe */ _fromContainerMetadata__WEBPACK_IMPORTED_MODULE_0__.fromContainerMetadata; },
  fromInstanceMetadata: function() { return /* reexport safe */ _fromInstanceMetadata__WEBPACK_IMPORTED_MODULE_1__.fromInstanceMetadata; },
  getInstanceMetadataEndpoint: function() { return /* reexport safe */ _utils_getInstanceMetadataEndpoint__WEBPACK_IMPORTED_MODULE_5__.getInstanceMetadataEndpoint; },
  httpRequest: function() { return /* reexport safe */ _remoteProvider_httpRequest__WEBPACK_IMPORTED_MODULE_4__.httpRequest; }
});
/* harmony import */var _fromContainerMetadata__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fromContainerMetadata */"./node_modules/.pnpm/@smithy+credential-provider-imds@2.2.1/node_modules/@smithy/credential-provider-imds/dist-es/fromContainerMetadata.js");
/* harmony import */var _fromInstanceMetadata__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fromInstanceMetadata */"./node_modules/.pnpm/@smithy+credential-provider-imds@2.2.1/node_modules/@smithy/credential-provider-imds/dist-es/fromInstanceMetadata.js");
/* harmony import */var _remoteProvider_httpRequest__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./remoteProvider/httpRequest */"./node_modules/.pnpm/@smithy+credential-provider-imds@2.2.1/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/httpRequest.js");
/* harmony import */var _utils_getInstanceMetadataEndpoint__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/getInstanceMetadataEndpoint */"./node_modules/.pnpm/@smithy+credential-provider-imds@2.2.1/node_modules/@smithy/credential-provider-imds/dist-es/utils/getInstanceMetadataEndpoint.js");






}),
"./node_modules/.pnpm/@smithy+credential-provider-imds@2.2.1/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/ImdsCredentials.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  fromImdsCredentials: function() { return fromImdsCredentials; },
  isImdsCredentials: function() { return isImdsCredentials; }
});
const isImdsCredentials = (arg)=>Boolean(arg) && typeof arg === "object" && typeof arg.AccessKeyId === "string" && typeof arg.SecretAccessKey === "string" && typeof arg.Token === "string" && typeof arg.Expiration === "string";
const fromImdsCredentials = (creds)=>({
        accessKeyId: creds.AccessKeyId,
        secretAccessKey: creds.SecretAccessKey,
        sessionToken: creds.Token,
        expiration: new Date(creds.Expiration)
    });
}),
"./node_modules/.pnpm/@smithy+credential-provider-imds@2.2.1/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/RemoteProviderInit.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  providerConfigFromInit: function() { return providerConfigFromInit; }
});
const DEFAULT_TIMEOUT = 1000;
const DEFAULT_MAX_RETRIES = 0;
const providerConfigFromInit = ({ maxRetries = DEFAULT_MAX_RETRIES, timeout = DEFAULT_TIMEOUT })=>({
        maxRetries,
        timeout
    });
}),
"./node_modules/.pnpm/@smithy+credential-provider-imds@2.2.1/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/httpRequest.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  httpRequest: function() { return httpRequest; }
});
/* harmony import */var _smithy_property_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @smithy/property-provider */"./node_modules/.pnpm/@smithy+property-provider@2.1.1/node_modules/@smithy/property-provider/dist-es/ProviderError.js");
/* harmony import */var buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer */"buffer");
/* harmony import */var buffer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(buffer__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */var http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! http */"http");
/* harmony import */var http__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(http__WEBPACK_IMPORTED_MODULE_1__);



function httpRequest(options) {
    return new Promise((resolve, reject)=>{
        const req = (0, http__WEBPACK_IMPORTED_MODULE_1__.request)({
            method: "GET",
            ...options,
            hostname: options.hostname?.replace(/^\[(.+)\]$/, "$1")
        });
        req.on("error", (err)=>{
            reject(Object.assign(new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_2__.ProviderError("Unable to connect to instance metadata service"), err));
            req.destroy();
        });
        req.on("timeout", ()=>{
            reject(new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_2__.ProviderError("TimeoutError from instance metadata service"));
            req.destroy();
        });
        req.on("response", (res)=>{
            const { statusCode = 400 } = res;
            if (statusCode < 200 || 300 <= statusCode) {
                reject(Object.assign(new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_2__.ProviderError("Error response received from instance metadata service"), {
                    statusCode
                }));
                req.destroy();
            }
            const chunks = [];
            res.on("data", (chunk)=>{
                chunks.push(chunk);
            });
            res.on("end", ()=>{
                resolve(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.concat(chunks));
                req.destroy();
            });
        });
        req.end();
    });
}
}),
"./node_modules/.pnpm/@smithy+credential-provider-imds@2.2.1/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/retry.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  retry: function() { return retry; }
});
const retry = (toRetry, maxRetries)=>{
    let promise = toRetry();
    for(let i = 0; i < maxRetries; i++)promise = promise.catch(toRetry);
    return promise;
};
}),
"./node_modules/.pnpm/@smithy+credential-provider-imds@2.2.1/node_modules/@smithy/credential-provider-imds/dist-es/utils/getExtendedInstanceMetadataCredentials.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getExtendedInstanceMetadataCredentials: function() { return getExtendedInstanceMetadataCredentials; }
});
const STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 300;
const STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 300;
const STATIC_STABILITY_DOC_URL = "https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html";
const getExtendedInstanceMetadataCredentials = (credentials, logger)=>{
    const refreshInterval = STATIC_STABILITY_REFRESH_INTERVAL_SECONDS + Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);
    const newExpiration = new Date(Date.now() + refreshInterval * 1000);
    logger.warn("Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(newExpiration)}.\nFor more information, please visit: " + STATIC_STABILITY_DOC_URL);
    const originalExpiration = credentials.originalExpiration ?? credentials.expiration;
    return {
        ...credentials,
        ...originalExpiration ? {
            originalExpiration
        } : {},
        expiration: newExpiration
    };
};
}),
"./node_modules/.pnpm/@smithy+credential-provider-imds@2.2.1/node_modules/@smithy/credential-provider-imds/dist-es/utils/getInstanceMetadataEndpoint.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getInstanceMetadataEndpoint: function() { return getInstanceMetadataEndpoint; }
});
/* harmony import */var _smithy_node_config_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/node-config-provider */"./node_modules/.pnpm/@smithy+node-config-provider@2.2.1/node_modules/@smithy/node-config-provider/dist-es/index.js");
/* harmony import */var _smithy_url_parser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @smithy/url-parser */"./node_modules/.pnpm/@smithy+url-parser@2.1.1/node_modules/@smithy/url-parser/dist-es/index.js");
/* harmony import */var _config_Endpoint__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config/Endpoint */"./node_modules/.pnpm/@smithy+credential-provider-imds@2.2.1/node_modules/@smithy/credential-provider-imds/dist-es/config/Endpoint.js");
/* harmony import */var _config_EndpointConfigOptions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../config/EndpointConfigOptions */"./node_modules/.pnpm/@smithy+credential-provider-imds@2.2.1/node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointConfigOptions.js");
/* harmony import */var _config_EndpointMode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../config/EndpointMode */"./node_modules/.pnpm/@smithy+credential-provider-imds@2.2.1/node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointMode.js");
/* harmony import */var _config_EndpointModeConfigOptions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../config/EndpointModeConfigOptions */"./node_modules/.pnpm/@smithy+credential-provider-imds@2.2.1/node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointModeConfigOptions.js");






const getInstanceMetadataEndpoint = async ()=>(0, _smithy_url_parser__WEBPACK_IMPORTED_MODULE_4__.parseUrl)(await getFromEndpointConfig() || await getFromEndpointModeConfig());
const getFromEndpointConfig = async ()=>(0, _smithy_node_config_provider__WEBPACK_IMPORTED_MODULE_0__.loadConfig)(_config_EndpointConfigOptions__WEBPACK_IMPORTED_MODULE_5__.ENDPOINT_CONFIG_OPTIONS)();
const getFromEndpointModeConfig = async ()=>{
    const endpointMode = await (0, _smithy_node_config_provider__WEBPACK_IMPORTED_MODULE_0__.loadConfig)(_config_EndpointModeConfigOptions__WEBPACK_IMPORTED_MODULE_3__.ENDPOINT_MODE_CONFIG_OPTIONS)();
    switch(endpointMode){
        case _config_EndpointMode__WEBPACK_IMPORTED_MODULE_2__.EndpointMode.IPv4:
            return _config_Endpoint__WEBPACK_IMPORTED_MODULE_1__.Endpoint.IPv4;
        case _config_EndpointMode__WEBPACK_IMPORTED_MODULE_2__.EndpointMode.IPv6:
            return _config_Endpoint__WEBPACK_IMPORTED_MODULE_1__.Endpoint.IPv6;
        default:
            throw new Error(`Unsupported endpoint mode: ${endpointMode}.` + ` Select from ${Object.values(_config_EndpointMode__WEBPACK_IMPORTED_MODULE_2__.EndpointMode)}`);
    }
};
}),
"./node_modules/.pnpm/@smithy+credential-provider-imds@2.2.1/node_modules/@smithy/credential-provider-imds/dist-es/utils/staticStabilityProvider.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  staticStabilityProvider: function() { return staticStabilityProvider; }
});
/* harmony import */var _getExtendedInstanceMetadataCredentials__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getExtendedInstanceMetadataCredentials */"./node_modules/.pnpm/@smithy+credential-provider-imds@2.2.1/node_modules/@smithy/credential-provider-imds/dist-es/utils/getExtendedInstanceMetadataCredentials.js");

const staticStabilityProvider = (provider, options = {})=>{
    const logger = options?.logger || console;
    let pastCredentials;
    return async ()=>{
        let credentials;
        try {
            credentials = await provider();
            if (credentials.expiration && credentials.expiration.getTime() < Date.now()) credentials = (0, _getExtendedInstanceMetadataCredentials__WEBPACK_IMPORTED_MODULE_0__.getExtendedInstanceMetadataCredentials)(credentials, logger);
        } catch (e) {
            if (pastCredentials) {
                logger.warn("Credential renew failed: ", e);
                credentials = (0, _getExtendedInstanceMetadataCredentials__WEBPACK_IMPORTED_MODULE_0__.getExtendedInstanceMetadataCredentials)(pastCredentials, logger);
            } else throw e;
        }
        pastCredentials = credentials;
        return credentials;
    };
};
}),
"./node_modules/.pnpm/@smithy+eventstream-codec@2.1.1/node_modules/@smithy/eventstream-codec/dist-es/EventStreamCodec.js": (function (__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) {
"use strict";
/* harmony import */var _aws_crypto_crc32__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-crypto/crc32 */"./node_modules/.pnpm/@aws-crypto+crc32@3.0.0/node_modules/@aws-crypto/crc32/build/index.js");
/* harmony import */var _HeaderMarshaller__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./HeaderMarshaller */"./node_modules/.pnpm/@smithy+eventstream-codec@2.1.1/node_modules/@smithy/eventstream-codec/dist-es/HeaderMarshaller.js");
/* harmony import */var _splitMessage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./splitMessage */"./node_modules/.pnpm/@smithy+eventstream-codec@2.1.1/node_modules/@smithy/eventstream-codec/dist-es/splitMessage.js");



class EventStreamCodec {
    constructor(toUtf8, fromUtf8){
        this.headerMarshaller = new HeaderMarshaller(toUtf8, fromUtf8);
        this.messageBuffer = [];
        this.isEndOfStream = false;
    }
    feed(message) {
        this.messageBuffer.push(this.decode(message));
    }
    endOfStream() {
        this.isEndOfStream = true;
    }
    getMessage() {
        const message = this.messageBuffer.pop();
        const isEndOfStream = this.isEndOfStream;
        return {
            getMessage () {
                return message;
            },
            isEndOfStream () {
                return isEndOfStream;
            }
        };
    }
    getAvailableMessages() {
        const messages = this.messageBuffer;
        this.messageBuffer = [];
        const isEndOfStream = this.isEndOfStream;
        return {
            getMessages () {
                return messages;
            },
            isEndOfStream () {
                return isEndOfStream;
            }
        };
    }
    encode({ headers: rawHeaders, body }) {
        const headers = this.headerMarshaller.format(rawHeaders);
        const length = headers.byteLength + body.byteLength + 16;
        const out = new Uint8Array(length);
        const view = new DataView(out.buffer, out.byteOffset, out.byteLength);
        const checksum = new Crc32();
        view.setUint32(0, length, false);
        view.setUint32(4, headers.byteLength, false);
        view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);
        out.set(headers, 12);
        out.set(body, headers.byteLength + 12);
        view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);
        return out;
    }
    decode(message) {
        const { headers, body } = splitMessage(message);
        return {
            headers: this.headerMarshaller.parse(headers),
            body
        };
    }
    formatHeaders(rawHeaders) {
        return this.headerMarshaller.format(rawHeaders);
    }
}
}),
"./node_modules/.pnpm/@smithy+eventstream-codec@2.1.1/node_modules/@smithy/eventstream-codec/dist-es/HeaderMarshaller.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  HeaderMarshaller: function() { return HeaderMarshaller; }
});
/* harmony import */var _smithy_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/util-hex-encoding */"./node_modules/.pnpm/@smithy+util-hex-encoding@2.1.1/node_modules/@smithy/util-hex-encoding/dist-es/index.js");
/* harmony import */var _Int64__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Int64 */"./node_modules/.pnpm/@smithy+eventstream-codec@2.1.1/node_modules/@smithy/eventstream-codec/dist-es/Int64.js");


class HeaderMarshaller {
    constructor(toUtf8, fromUtf8){
        this.toUtf8 = toUtf8;
        this.fromUtf8 = fromUtf8;
    }
    format(headers) {
        const chunks = [];
        for (const headerName of Object.keys(headers)){
            const bytes = this.fromUtf8(headerName);
            chunks.push(Uint8Array.from([
                bytes.byteLength
            ]), bytes, this.formatHeaderValue(headers[headerName]));
        }
        const out = new Uint8Array(chunks.reduce((carry, bytes)=>carry + bytes.byteLength, 0));
        let position = 0;
        for (const chunk of chunks){
            out.set(chunk, position);
            position += chunk.byteLength;
        }
        return out;
    }
    formatHeaderValue(header) {
        switch(header.type){
            case "boolean":
                return Uint8Array.from([
                    header.value ? 0 : 1
                ]);
            case "byte":
                return Uint8Array.from([
                    2,
                    header.value
                ]);
            case "short":
                const shortView = new DataView(new ArrayBuffer(3));
                shortView.setUint8(0, 3);
                shortView.setInt16(1, header.value, false);
                return new Uint8Array(shortView.buffer);
            case "integer":
                const intView = new DataView(new ArrayBuffer(5));
                intView.setUint8(0, 4);
                intView.setInt32(1, header.value, false);
                return new Uint8Array(intView.buffer);
            case "long":
                const longBytes = new Uint8Array(9);
                longBytes[0] = 5;
                longBytes.set(header.value.bytes, 1);
                return longBytes;
            case "binary":
                const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));
                binView.setUint8(0, 6);
                binView.setUint16(1, header.value.byteLength, false);
                const binBytes = new Uint8Array(binView.buffer);
                binBytes.set(header.value, 3);
                return binBytes;
            case "string":
                const utf8Bytes = this.fromUtf8(header.value);
                const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));
                strView.setUint8(0, 7);
                strView.setUint16(1, utf8Bytes.byteLength, false);
                const strBytes = new Uint8Array(strView.buffer);
                strBytes.set(utf8Bytes, 3);
                return strBytes;
            case "timestamp":
                const tsBytes = new Uint8Array(9);
                tsBytes[0] = 8;
                tsBytes.set(_Int64__WEBPACK_IMPORTED_MODULE_1__.Int64.fromNumber(header.value.valueOf()).bytes, 1);
                return tsBytes;
            case "uuid":
                if (!UUID_PATTERN.test(header.value)) throw new Error(`Invalid UUID received: ${header.value}`);
                const uuidBytes = new Uint8Array(17);
                uuidBytes[0] = 9;
                uuidBytes.set((0, _smithy_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__.fromHex)(header.value.replace(/\-/g, "")), 1);
                return uuidBytes;
        }
    }
    parse(headers) {
        const out = {};
        let position = 0;
        while(position < headers.byteLength){
            const nameLength = headers.getUint8(position++);
            const name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));
            position += nameLength;
            switch(headers.getUint8(position++)){
                case 0:
                    out[name] = {
                        type: BOOLEAN_TAG,
                        value: true
                    };
                    break;
                case 1:
                    out[name] = {
                        type: BOOLEAN_TAG,
                        value: false
                    };
                    break;
                case 2:
                    out[name] = {
                        type: BYTE_TAG,
                        value: headers.getInt8(position++)
                    };
                    break;
                case 3:
                    out[name] = {
                        type: SHORT_TAG,
                        value: headers.getInt16(position, false)
                    };
                    position += 2;
                    break;
                case 4:
                    out[name] = {
                        type: INT_TAG,
                        value: headers.getInt32(position, false)
                    };
                    position += 4;
                    break;
                case 5:
                    out[name] = {
                        type: LONG_TAG,
                        value: new _Int64__WEBPACK_IMPORTED_MODULE_1__.Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8))
                    };
                    position += 8;
                    break;
                case 6:
                    const binaryLength = headers.getUint16(position, false);
                    position += 2;
                    out[name] = {
                        type: BINARY_TAG,
                        value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength)
                    };
                    position += binaryLength;
                    break;
                case 7:
                    const stringLength = headers.getUint16(position, false);
                    position += 2;
                    out[name] = {
                        type: STRING_TAG,
                        value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength))
                    };
                    position += stringLength;
                    break;
                case 8:
                    out[name] = {
                        type: TIMESTAMP_TAG,
                        value: new Date(new _Int64__WEBPACK_IMPORTED_MODULE_1__.Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf())
                    };
                    position += 8;
                    break;
                case 9:
                    const uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);
                    position += 16;
                    out[name] = {
                        type: UUID_TAG,
                        value: `${(0, _smithy_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__.toHex)(uuidBytes.subarray(0, 4))}-${(0, _smithy_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__.toHex)(uuidBytes.subarray(4, 6))}-${(0, _smithy_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__.toHex)(uuidBytes.subarray(6, 8))}-${(0, _smithy_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__.toHex)(uuidBytes.subarray(8, 10))}-${(0, _smithy_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__.toHex)(uuidBytes.subarray(10))}`
                    };
                    break;
                default:
                    throw new Error(`Unrecognized header type tag`);
            }
        }
        return out;
    }
}
var HEADER_VALUE_TYPE;
(function(HEADER_VALUE_TYPE) {
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["boolTrue"] = 0] = "boolTrue";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["boolFalse"] = 1] = "boolFalse";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["byte"] = 2] = "byte";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["short"] = 3] = "short";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["integer"] = 4] = "integer";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["long"] = 5] = "long";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["byteArray"] = 6] = "byteArray";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["string"] = 7] = "string";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["timestamp"] = 8] = "timestamp";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["uuid"] = 9] = "uuid";
})(HEADER_VALUE_TYPE || (HEADER_VALUE_TYPE = {}));
const BOOLEAN_TAG = "boolean";
const BYTE_TAG = "byte";
const SHORT_TAG = "short";
const INT_TAG = "integer";
const LONG_TAG = "long";
const BINARY_TAG = "binary";
const STRING_TAG = "string";
const TIMESTAMP_TAG = "timestamp";
const UUID_TAG = "uuid";
const UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
}),
"./node_modules/.pnpm/@smithy+eventstream-codec@2.1.1/node_modules/@smithy/eventstream-codec/dist-es/Int64.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  Int64: function() { return Int64; }
});
/* harmony import */var _smithy_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/util-hex-encoding */"./node_modules/.pnpm/@smithy+util-hex-encoding@2.1.1/node_modules/@smithy/util-hex-encoding/dist-es/index.js");

class Int64 {
    constructor(bytes){
        this.bytes = bytes;
        if (bytes.byteLength !== 8) throw new Error("Int64 buffers must be exactly 8 bytes");
    }
    static fromNumber(number) {
        if (number > 9223372036854776000 || number < -9223372036854776000) throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);
        const bytes = new Uint8Array(8);
        for(let i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256)bytes[i] = remaining;
        if (number < 0) negate(bytes);
        return new Int64(bytes);
    }
    valueOf() {
        const bytes = this.bytes.slice(0);
        const negative = bytes[0] & 0b10000000;
        if (negative) negate(bytes);
        return parseInt((0, _smithy_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__.toHex)(bytes), 16) * (negative ? -1 : 1);
    }
    toString() {
        return String(this.valueOf());
    }
}
function negate(bytes) {
    for(let i = 0; i < 8; i++)bytes[i] ^= 0xff;
    for(let i = 7; i > -1; i--){
        bytes[i]++;
        if (bytes[i] !== 0) break;
    }
}
}),
"./node_modules/.pnpm/@smithy+eventstream-codec@2.1.1/node_modules/@smithy/eventstream-codec/dist-es/MessageDecoderStream.js": (function () {
"use strict";
class MessageDecoderStream {
    constructor(options){
        this.options = options;
    }
    [Symbol.asyncIterator]() {
        return this.asyncIterator();
    }
    async *asyncIterator() {
        for await (const bytes of this.options.inputStream){
            const decoded = this.options.decoder.decode(bytes);
            yield decoded;
        }
    }
}
}),
"./node_modules/.pnpm/@smithy+eventstream-codec@2.1.1/node_modules/@smithy/eventstream-codec/dist-es/MessageEncoderStream.js": (function () {
"use strict";
class MessageEncoderStream {
    constructor(options){
        this.options = options;
    }
    [Symbol.asyncIterator]() {
        return this.asyncIterator();
    }
    async *asyncIterator() {
        for await (const msg of this.options.messageStream){
            const encoded = this.options.encoder.encode(msg);
            yield encoded;
        }
        if (this.options.includeEndFrame) yield new Uint8Array(0);
    }
}
}),
"./node_modules/.pnpm/@smithy+eventstream-codec@2.1.1/node_modules/@smithy/eventstream-codec/dist-es/SmithyMessageDecoderStream.js": (function () {
"use strict";
class SmithyMessageDecoderStream {
    constructor(options){
        this.options = options;
    }
    [Symbol.asyncIterator]() {
        return this.asyncIterator();
    }
    async *asyncIterator() {
        for await (const message of this.options.messageStream){
            const deserialized = await this.options.deserializer(message);
            if (deserialized === undefined) continue;
            yield deserialized;
        }
    }
}
}),
"./node_modules/.pnpm/@smithy+eventstream-codec@2.1.1/node_modules/@smithy/eventstream-codec/dist-es/SmithyMessageEncoderStream.js": (function () {
"use strict";
class SmithyMessageEncoderStream {
    constructor(options){
        this.options = options;
    }
    [Symbol.asyncIterator]() {
        return this.asyncIterator();
    }
    async *asyncIterator() {
        for await (const chunk of this.options.inputStream){
            const payloadBuf = this.options.serializer(chunk);
            yield payloadBuf;
        }
    }
}
}),
"./node_modules/.pnpm/@smithy+eventstream-codec@2.1.1/node_modules/@smithy/eventstream-codec/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  HeaderMarshaller: function() { return /* reexport safe */ _HeaderMarshaller__WEBPACK_IMPORTED_MODULE_1__.HeaderMarshaller; }
});
/* harmony import */var _EventStreamCodec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventStreamCodec */"./node_modules/.pnpm/@smithy+eventstream-codec@2.1.1/node_modules/@smithy/eventstream-codec/dist-es/EventStreamCodec.js");
/* harmony import */var _HeaderMarshaller__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./HeaderMarshaller */"./node_modules/.pnpm/@smithy+eventstream-codec@2.1.1/node_modules/@smithy/eventstream-codec/dist-es/HeaderMarshaller.js");
/* harmony import */var _Int64__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Int64 */"./node_modules/.pnpm/@smithy+eventstream-codec@2.1.1/node_modules/@smithy/eventstream-codec/dist-es/Int64.js");
/* harmony import */var _MessageDecoderStream__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./MessageDecoderStream */"./node_modules/.pnpm/@smithy+eventstream-codec@2.1.1/node_modules/@smithy/eventstream-codec/dist-es/MessageDecoderStream.js");
/* harmony import */var _MessageEncoderStream__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./MessageEncoderStream */"./node_modules/.pnpm/@smithy+eventstream-codec@2.1.1/node_modules/@smithy/eventstream-codec/dist-es/MessageEncoderStream.js");
/* harmony import */var _SmithyMessageDecoderStream__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./SmithyMessageDecoderStream */"./node_modules/.pnpm/@smithy+eventstream-codec@2.1.1/node_modules/@smithy/eventstream-codec/dist-es/SmithyMessageDecoderStream.js");
/* harmony import */var _SmithyMessageEncoderStream__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./SmithyMessageEncoderStream */"./node_modules/.pnpm/@smithy+eventstream-codec@2.1.1/node_modules/@smithy/eventstream-codec/dist-es/SmithyMessageEncoderStream.js");








}),
"./node_modules/.pnpm/@smithy+eventstream-codec@2.1.1/node_modules/@smithy/eventstream-codec/dist-es/splitMessage.js": (function (__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) {
"use strict";
/* harmony import */var _aws_crypto_crc32__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-crypto/crc32 */"./node_modules/.pnpm/@aws-crypto+crc32@3.0.0/node_modules/@aws-crypto/crc32/build/index.js");

const PRELUDE_MEMBER_LENGTH = 4;
const PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;
const CHECKSUM_LENGTH = 4;
const MINIMUM_MESSAGE_LENGTH = (/* unused pure expression or super */ null && (PRELUDE_LENGTH + CHECKSUM_LENGTH * 2));
function splitMessage({ byteLength, byteOffset, buffer }) {
    if (byteLength < MINIMUM_MESSAGE_LENGTH) throw new Error("Provided message too short to accommodate event stream message overhead");
    const view = new DataView(buffer, byteOffset, byteLength);
    const messageLength = view.getUint32(0, false);
    if (byteLength !== messageLength) throw new Error("Reported message length does not match received message length");
    const headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);
    const expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);
    const expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);
    const checksummer = new Crc32().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));
    if (expectedPreludeChecksum !== checksummer.digest()) throw new Error(`The prelude checksum specified in the message (${expectedPreludeChecksum}) does not match the calculated CRC32 checksum (${checksummer.digest()})`);
    checksummer.update(new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH)));
    if (expectedMessageChecksum !== checksummer.digest()) throw new Error(`The message checksum (${checksummer.digest()}) did not match the expected value of ${expectedMessageChecksum}`);
    return {
        headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),
        body: new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength, messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH))
    };
}
}),
"./node_modules/.pnpm/@smithy+hash-node@2.1.1/node_modules/@smithy/hash-node/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  Hash: function() { return Hash; }
});
/* harmony import */var _smithy_util_buffer_from__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/util-buffer-from */"./node_modules/.pnpm/@smithy+util-buffer-from@2.1.1/node_modules/@smithy/util-buffer-from/dist-es/index.js");
/* harmony import */var _smithy_util_utf8__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/util-utf8 */"./node_modules/.pnpm/@smithy+util-utf8@2.1.1/node_modules/@smithy/util-utf8/dist-es/index.js");
/* harmony import */var buffer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! buffer */"buffer");
/* harmony import */var buffer__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(buffer__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */var crypto__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! crypto */"crypto");
/* harmony import */var crypto__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_3__);




class Hash {
    constructor(algorithmIdentifier, secret){
        this.algorithmIdentifier = algorithmIdentifier;
        this.secret = secret;
        this.reset();
    }
    update(toHash, encoding) {
        this.hash.update((0, _smithy_util_utf8__WEBPACK_IMPORTED_MODULE_1__.toUint8Array)(castSourceData(toHash, encoding)));
    }
    digest() {
        return Promise.resolve(this.hash.digest());
    }
    reset() {
        this.hash = this.secret ? (0, crypto__WEBPACK_IMPORTED_MODULE_3__.createHmac)(this.algorithmIdentifier, castSourceData(this.secret)) : (0, crypto__WEBPACK_IMPORTED_MODULE_3__.createHash)(this.algorithmIdentifier);
    }
}
function castSourceData(toCast, encoding) {
    if (buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.isBuffer(toCast)) return toCast;
    if (typeof toCast === "string") return (0, _smithy_util_buffer_from__WEBPACK_IMPORTED_MODULE_0__.fromString)(toCast, encoding);
    if (ArrayBuffer.isView(toCast)) return (0, _smithy_util_buffer_from__WEBPACK_IMPORTED_MODULE_0__.fromArrayBuffer)(toCast.buffer, toCast.byteOffset, toCast.byteLength);
    return (0, _smithy_util_buffer_from__WEBPACK_IMPORTED_MODULE_0__.fromArrayBuffer)(toCast);
}
}),
"./node_modules/.pnpm/@smithy+is-array-buffer@2.1.1/node_modules/@smithy/is-array-buffer/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  isArrayBuffer: function() { return isArrayBuffer; }
});
const isArrayBuffer = (arg)=>typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]";
}),
"./node_modules/.pnpm/@smithy+middleware-content-length@2.1.1/node_modules/@smithy/middleware-content-length/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getContentLengthPlugin: function() { return getContentLengthPlugin; }
});
/* harmony import */var _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/protocol-http */"./node_modules/.pnpm/@smithy+protocol-http@3.1.1/node_modules/@smithy/protocol-http/dist-es/index.js");

const CONTENT_LENGTH_HEADER = "content-length";
function contentLengthMiddleware(bodyLengthChecker) {
    return (next)=>async (args)=>{
            const request = args.request;
            if (_smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest.isInstance(request)) {
                const { body, headers } = request;
                if (body && Object.keys(headers).map((str)=>str.toLowerCase()).indexOf(CONTENT_LENGTH_HEADER) === -1) try {
                    const length = bodyLengthChecker(body);
                    request.headers = {
                        ...request.headers,
                        [CONTENT_LENGTH_HEADER]: String(length)
                    };
                } catch (error) {}
            }
            return next({
                ...args,
                request
            });
        };
}
const contentLengthMiddlewareOptions = {
    step: "build",
    tags: [
        "SET_CONTENT_LENGTH",
        "CONTENT_LENGTH"
    ],
    name: "contentLengthMiddleware",
    override: true
};
const getContentLengthPlugin = (options)=>({
        applyToStack: (clientStack)=>{
            clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), contentLengthMiddlewareOptions);
        }
    });
}),
"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/createConfigValueProvider.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  createConfigValueProvider: function() { return createConfigValueProvider; }
});
const createConfigValueProvider = (configKey, canonicalEndpointParamKey, config)=>{
    const configProvider = async ()=>{
        const configValue = config[configKey] ?? config[canonicalEndpointParamKey];
        if (typeof configValue === "function") return configValue();
        return configValue;
    };
    if (configKey === "credentialScope" || canonicalEndpointParamKey === "CredentialScope") return async ()=>{
        const credentials = typeof config.credentials === "function" ? await config.credentials() : config.credentials;
        const configValue = credentials?.credentialScope ?? credentials?.CredentialScope;
        return configValue;
    };
    if (configKey === "endpoint" || canonicalEndpointParamKey === "endpoint") return async ()=>{
        const endpoint = await configProvider();
        if (endpoint && typeof endpoint === "object") {
            if ("url" in endpoint) return endpoint.url.href;
            if ("hostname" in endpoint) {
                const { protocol, hostname, port, path } = endpoint;
                return `${protocol}//${hostname}${port ? ":" + port : ""}${path}`;
            }
        }
        return endpoint;
    };
    return configProvider;
};
}),
"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/getEndpointFromConfig.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getEndpointFromConfig: function() { return getEndpointFromConfig; }
});
/* harmony import */var _smithy_node_config_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/node-config-provider */"./node_modules/.pnpm/@smithy+node-config-provider@2.2.1/node_modules/@smithy/node-config-provider/dist-es/index.js");
/* harmony import */var _getEndpointUrlConfig__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getEndpointUrlConfig */"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/getEndpointUrlConfig.js");


const getEndpointFromConfig = async (serviceId)=>(0, _smithy_node_config_provider__WEBPACK_IMPORTED_MODULE_0__.loadConfig)((0, _getEndpointUrlConfig__WEBPACK_IMPORTED_MODULE_1__.getEndpointUrlConfig)(serviceId))();
}),
"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/getEndpointFromInstructions.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getEndpointFromInstructions: function() { return getEndpointFromInstructions; }
});
/* harmony import */var _service_customizations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../service-customizations */"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/service-customizations/s3.js");
/* harmony import */var _createConfigValueProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./createConfigValueProvider */"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/createConfigValueProvider.js");
/* harmony import */var _getEndpointFromConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getEndpointFromConfig */"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/getEndpointFromConfig.js");
/* harmony import */var _toEndpointV1__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toEndpointV1 */"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/toEndpointV1.js");




const getEndpointFromInstructions = async (commandInput, instructionsSupplier, clientConfig, context)=>{
    if (!clientConfig.endpoint) {
        const endpointFromConfig = await (0, _getEndpointFromConfig__WEBPACK_IMPORTED_MODULE_0__.getEndpointFromConfig)(clientConfig.serviceId || "");
        if (endpointFromConfig) clientConfig.endpoint = ()=>Promise.resolve((0, _toEndpointV1__WEBPACK_IMPORTED_MODULE_1__.toEndpointV1)(endpointFromConfig));
    }
    const endpointParams = await resolveParams(commandInput, instructionsSupplier, clientConfig);
    if (typeof clientConfig.endpointProvider !== "function") throw new Error("config.endpointProvider is not set.");
    const endpoint = clientConfig.endpointProvider(endpointParams, context);
    return endpoint;
};
const resolveParams = async (commandInput, instructionsSupplier, clientConfig)=>{
    const endpointParams = {};
    const instructions = instructionsSupplier?.getEndpointParameterInstructions?.() || {};
    for (const [name, instruction] of Object.entries(instructions))switch(instruction.type){
        case "staticContextParams":
            endpointParams[name] = instruction.value;
            break;
        case "contextParams":
            endpointParams[name] = commandInput[instruction.name];
            break;
        case "clientContextParams":
        case "builtInParams":
            endpointParams[name] = await (0, _createConfigValueProvider__WEBPACK_IMPORTED_MODULE_2__.createConfigValueProvider)(instruction.name, name, clientConfig)();
            break;
        default:
            throw new Error("Unrecognized endpoint parameter instruction: " + JSON.stringify(instruction));
    }
    if (Object.keys(instructions).length === 0) Object.assign(endpointParams, clientConfig);
    if (String(clientConfig.serviceId).toLowerCase() === "s3") await (0, _service_customizations__WEBPACK_IMPORTED_MODULE_3__.resolveParamsForS3)(endpointParams);
    return endpointParams;
};
}),
"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/getEndpointUrlConfig.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getEndpointUrlConfig: function() { return getEndpointUrlConfig; }
});
/* harmony import */var _smithy_shared_ini_file_loader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/shared-ini-file-loader */"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/index.js");

const ENV_ENDPOINT_URL = "AWS_ENDPOINT_URL";
const CONFIG_ENDPOINT_URL = "endpoint_url";
const getEndpointUrlConfig = (serviceId)=>({
        environmentVariableSelector: (env)=>{
            const serviceSuffixParts = serviceId.split(" ").map((w)=>w.toUpperCase());
            const serviceEndpointUrl = env[[
                ENV_ENDPOINT_URL,
                ...serviceSuffixParts
            ].join("_")];
            if (serviceEndpointUrl) return serviceEndpointUrl;
            const endpointUrl = env[ENV_ENDPOINT_URL];
            if (endpointUrl) return endpointUrl;
            return undefined;
        },
        configFileSelector: (profile, config)=>{
            if (config && profile.services) {
                const servicesSection = config[[
                    "services",
                    profile.services
                ].join(_smithy_shared_ini_file_loader__WEBPACK_IMPORTED_MODULE_0__.CONFIG_PREFIX_SEPARATOR)];
                if (servicesSection) {
                    const servicePrefixParts = serviceId.split(" ").map((w)=>w.toLowerCase());
                    const endpointUrl = servicesSection[[
                        servicePrefixParts.join("_"),
                        CONFIG_ENDPOINT_URL
                    ].join(_smithy_shared_ini_file_loader__WEBPACK_IMPORTED_MODULE_0__.CONFIG_PREFIX_SEPARATOR)];
                    if (endpointUrl) return endpointUrl;
                }
            }
            const endpointUrl = profile[CONFIG_ENDPOINT_URL];
            if (endpointUrl) return endpointUrl;
            return undefined;
        },
        default: undefined
    });
}),
"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/index.js": (function (__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) {
"use strict";
/* harmony import */var _getEndpointFromInstructions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getEndpointFromInstructions */"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/getEndpointFromInstructions.js");


}),
"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/toEndpointV1.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  toEndpointV1: function() { return toEndpointV1; }
});
/* harmony import */var _smithy_url_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/url-parser */"./node_modules/.pnpm/@smithy+url-parser@2.1.1/node_modules/@smithy/url-parser/dist-es/index.js");

const toEndpointV1 = (endpoint)=>{
    if (typeof endpoint === "object") {
        if ("url" in endpoint) return (0, _smithy_url_parser__WEBPACK_IMPORTED_MODULE_0__.parseUrl)(endpoint.url);
        return endpoint;
    }
    return (0, _smithy_url_parser__WEBPACK_IMPORTED_MODULE_0__.parseUrl)(endpoint);
};
}),
"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/endpointMiddleware.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  endpointMiddleware: function() { return endpointMiddleware; }
});
/* harmony import */var _smithy_util_middleware__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/util-middleware */"./node_modules/.pnpm/@smithy+util-middleware@2.1.1/node_modules/@smithy/util-middleware/dist-es/index.js");
/* harmony import */var _adaptors_getEndpointFromInstructions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./adaptors/getEndpointFromInstructions */"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/getEndpointFromInstructions.js");


const endpointMiddleware = ({ config, instructions })=>{
    return (next, context)=>async (args)=>{
            const endpoint = await (0, _adaptors_getEndpointFromInstructions__WEBPACK_IMPORTED_MODULE_1__.getEndpointFromInstructions)(args.input, {
                getEndpointParameterInstructions () {
                    return instructions;
                }
            }, {
                ...config
            }, context);
            context.endpointV2 = endpoint;
            context.authSchemes = endpoint.properties?.authSchemes;
            const authScheme = context.authSchemes?.[0];
            if (authScheme) {
                context["signing_region"] = authScheme.signingRegion;
                context["signing_service"] = authScheme.signingName;
                const smithyContext = (0, _smithy_util_middleware__WEBPACK_IMPORTED_MODULE_0__.getSmithyContext)(context);
                const httpAuthOption = smithyContext?.selectedHttpAuthScheme?.httpAuthOption;
                if (httpAuthOption) httpAuthOption.signingProperties = Object.assign(httpAuthOption.signingProperties || {}, {
                    signing_region: authScheme.signingRegion,
                    signingRegion: authScheme.signingRegion,
                    signing_service: authScheme.signingName,
                    signingName: authScheme.signingName,
                    signingRegionSet: authScheme.signingRegionSet
                }, authScheme.properties);
            }
            return next({
                ...args
            });
        };
};
}),
"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/getEndpointPlugin.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  endpointMiddlewareOptions: function() { return endpointMiddlewareOptions; },
  getEndpointPlugin: function() { return getEndpointPlugin; }
});
/* harmony import */var _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/middleware-serde */"./node_modules/.pnpm/@smithy+middleware-serde@2.1.1/node_modules/@smithy/middleware-serde/dist-es/serdePlugin.js");
/* harmony import */var _endpointMiddleware__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./endpointMiddleware */"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/endpointMiddleware.js");


const endpointMiddlewareOptions = {
    step: "serialize",
    tags: [
        "ENDPOINT_PARAMETERS",
        "ENDPOINT_V2",
        "ENDPOINT"
    ],
    name: "endpointV2Middleware",
    override: true,
    relation: "before",
    toMiddleware: _smithy_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.serializerMiddlewareOption.name
};
const getEndpointPlugin = (config, instructions)=>({
        applyToStack: (clientStack)=>{
            clientStack.addRelativeTo((0, _endpointMiddleware__WEBPACK_IMPORTED_MODULE_0__.endpointMiddleware)({
                config,
                instructions
            }), endpointMiddlewareOptions);
        }
    });
}),
"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  endpointMiddlewareOptions: function() { return /* reexport safe */ _getEndpointPlugin__WEBPACK_IMPORTED_MODULE_2__.endpointMiddlewareOptions; },
  getEndpointPlugin: function() { return /* reexport safe */ _getEndpointPlugin__WEBPACK_IMPORTED_MODULE_2__.getEndpointPlugin; },
  resolveEndpointConfig: function() { return /* reexport safe */ _resolveEndpointConfig__WEBPACK_IMPORTED_MODULE_3__.resolveEndpointConfig; }
});
/* harmony import */var _adaptors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./adaptors */"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/index.js");
/* harmony import */var _endpointMiddleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./endpointMiddleware */"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/endpointMiddleware.js");
/* harmony import */var _getEndpointPlugin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getEndpointPlugin */"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/getEndpointPlugin.js");
/* harmony import */var _resolveEndpointConfig__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./resolveEndpointConfig */"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/resolveEndpointConfig.js");





}),
"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/resolveEndpointConfig.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  resolveEndpointConfig: function() { return resolveEndpointConfig; }
});
/* harmony import */var _smithy_util_middleware__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/util-middleware */"./node_modules/.pnpm/@smithy+util-middleware@2.1.1/node_modules/@smithy/util-middleware/dist-es/index.js");
/* harmony import */var _adaptors_toEndpointV1__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./adaptors/toEndpointV1 */"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/toEndpointV1.js");


const resolveEndpointConfig = (input)=>{
    const tls = input.tls ?? true;
    const { endpoint } = input;
    const customEndpointProvider = endpoint != null ? async ()=>(0, _adaptors_toEndpointV1__WEBPACK_IMPORTED_MODULE_1__.toEndpointV1)(await (0, _smithy_util_middleware__WEBPACK_IMPORTED_MODULE_0__.normalizeProvider)(endpoint)()) : undefined;
    const isCustomEndpoint = !!endpoint;
    return {
        ...input,
        endpoint: customEndpointProvider,
        tls,
        isCustomEndpoint,
        useDualstackEndpoint: (0, _smithy_util_middleware__WEBPACK_IMPORTED_MODULE_0__.normalizeProvider)(input.useDualstackEndpoint ?? false),
        useFipsEndpoint: (0, _smithy_util_middleware__WEBPACK_IMPORTED_MODULE_0__.normalizeProvider)(input.useFipsEndpoint ?? false)
    };
};
}),
"./node_modules/.pnpm/@smithy+middleware-endpoint@2.4.1/node_modules/@smithy/middleware-endpoint/dist-es/service-customizations/s3.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  resolveParamsForS3: function() { return resolveParamsForS3; }
});
const resolveParamsForS3 = async (endpointParams)=>{
    const bucket = endpointParams?.Bucket || "";
    if (typeof endpointParams.Bucket === "string") endpointParams.Bucket = bucket.replace(/#/g, encodeURIComponent("#")).replace(/\?/g, encodeURIComponent("?"));
    if (isArnBucketName(bucket)) {
        if (endpointParams.ForcePathStyle === true) throw new Error("Path-style addressing cannot be used with ARN buckets");
    } else if (!isDnsCompatibleBucketName(bucket) || bucket.indexOf(".") !== -1 && !String(endpointParams.Endpoint).startsWith("http:") || bucket.toLowerCase() !== bucket || bucket.length < 3) endpointParams.ForcePathStyle = true;
    if (endpointParams.DisableMultiRegionAccessPoints) {
        endpointParams.disableMultiRegionAccessPoints = true;
        endpointParams.DisableMRAP = true;
    }
    return endpointParams;
};
const DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
const IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
const DOTS_PATTERN = /\.\./;
const DOT_PATTERN = /\./;
const S3_HOSTNAME_PATTERN = /^(.+\.)?s3(-fips)?(\.dualstack)?[.-]([a-z0-9-]+)\./;
const isDnsCompatibleBucketName = (bucketName)=>DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);
const isArnBucketName = (bucketName)=>{
    const [arn, partition, service, region, account, typeOrId] = bucketName.split(":");
    const isArn = arn === "arn" && bucketName.split(":").length >= 6;
    const isValidArn = [
        arn,
        partition,
        service,
        account,
        typeOrId
    ].filter(Boolean).length === 5;
    if (isArn && !isValidArn) throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);
    return arn === "arn" && !!partition && !!service && !!account && !!typeOrId;
};
}),
"./node_modules/.pnpm/@smithy+middleware-retry@2.1.1/node_modules/@smithy/middleware-retry/dist-es/AdaptiveRetryStrategy.js": (function (__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) {
"use strict";
/* harmony import */var _smithy_util_retry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/util-retry */"./node_modules/.pnpm/@smithy+util-retry@2.1.1/node_modules/@smithy/util-retry/dist-es/index.js");
/* harmony import */var _StandardRetryStrategy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./StandardRetryStrategy */"./node_modules/.pnpm/@smithy+middleware-retry@2.1.1/node_modules/@smithy/middleware-retry/dist-es/StandardRetryStrategy.js");


class AdaptiveRetryStrategy extends (/* unused pure expression or super */ null && (StandardRetryStrategy)) {
    constructor(maxAttemptsProvider, options){
        const { rateLimiter, ...superOptions } = options ?? {};
        super(maxAttemptsProvider, superOptions);
        this.rateLimiter = rateLimiter ?? new DefaultRateLimiter();
        this.mode = RETRY_MODES.ADAPTIVE;
    }
    async retry(next, args) {
        return super.retry(next, args, {
            beforeRequest: async ()=>{
                return this.rateLimiter.getSendToken();
            },
            afterRequest: (response)=>{
                this.rateLimiter.updateClientSendingRate(response);
            }
        });
    }
}
}),
"./node_modules/.pnpm/@smithy+middleware-retry@2.1.1/node_modules/@smithy/middleware-retry/dist-es/StandardRetryStrategy.js": (function (__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) {
"use strict";
/* harmony import */var _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/protocol-http */"./node_modules/.pnpm/@smithy+protocol-http@3.1.1/node_modules/@smithy/protocol-http/dist-es/index.js");
/* harmony import */var _smithy_util_retry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/util-retry */"./node_modules/.pnpm/@smithy+util-retry@2.1.1/node_modules/@smithy/util-retry/dist-es/index.js");
/* harmony import */var _defaultRetryQuota__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./defaultRetryQuota */"./node_modules/.pnpm/@smithy+middleware-retry@2.1.1/node_modules/@smithy/middleware-retry/dist-es/defaultRetryQuota.js");
/* harmony import */var _delayDecider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./delayDecider */"./node_modules/.pnpm/@smithy+middleware-retry@2.1.1/node_modules/@smithy/middleware-retry/dist-es/delayDecider.js");








class StandardRetryStrategy {
    constructor(maxAttemptsProvider, options){
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = RETRY_MODES.STANDARD;
        this.retryDecider = options?.retryDecider ?? defaultRetryDecider;
        this.delayDecider = options?.delayDecider ?? defaultDelayDecider;
        this.retryQuota = options?.retryQuota ?? getDefaultRetryQuota(INITIAL_RETRY_TOKENS);
    }
    shouldRetry(error, attempts, maxAttempts) {
        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
    }
    async getMaxAttempts() {
        let maxAttempts;
        try {
            maxAttempts = await this.maxAttemptsProvider();
        } catch (error) {
            maxAttempts = DEFAULT_MAX_ATTEMPTS;
        }
        return maxAttempts;
    }
    async retry(next, args, options) {
        let retryTokenAmount;
        let attempts = 0;
        let totalDelay = 0;
        const maxAttempts = await this.getMaxAttempts();
        const { request } = args;
        if (HttpRequest.isInstance(request)) request.headers[INVOCATION_ID_HEADER] = v4();
        while(true)try {
            if (HttpRequest.isInstance(request)) request.headers[REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            if (options?.beforeRequest) await options.beforeRequest();
            const { response, output } = await next(args);
            if (options?.afterRequest) options.afterRequest(response);
            this.retryQuota.releaseRetryTokens(retryTokenAmount);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalDelay;
            return {
                response,
                output
            };
        } catch (e) {
            const err = asSdkError(e);
            attempts++;
            if (this.shouldRetry(err, attempts, maxAttempts)) {
                retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);
                const delayFromDecider = this.delayDecider(isThrottlingError(err) ? THROTTLING_RETRY_DELAY_BASE : DEFAULT_RETRY_DELAY_BASE, attempts);
                const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);
                const delay = Math.max(delayFromResponse || 0, delayFromDecider);
                totalDelay += delay;
                await new Promise((resolve)=>setTimeout(resolve, delay));
                continue;
            }
            if (!err.$metadata) err.$metadata = {};
            err.$metadata.attempts = attempts;
            err.$metadata.totalRetryDelay = totalDelay;
            throw err;
        }
    }
}
const getDelayFromRetryAfterHeader = (response)=>{
    if (!HttpResponse.isInstance(response)) return;
    const retryAfterHeaderName = Object.keys(response.headers).find((key)=>key.toLowerCase() === "retry-after");
    if (!retryAfterHeaderName) return;
    const retryAfter = response.headers[retryAfterHeaderName];
    const retryAfterSeconds = Number(retryAfter);
    if (!Number.isNaN(retryAfterSeconds)) return retryAfterSeconds * 1000;
    const retryAfterDate = new Date(retryAfter);
    return retryAfterDate.getTime() - Date.now();
};
}),
"./node_modules/.pnpm/@smithy+middleware-retry@2.1.1/node_modules/@smithy/middleware-retry/dist-es/configurations.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  NODE_MAX_ATTEMPT_CONFIG_OPTIONS: function() { return NODE_MAX_ATTEMPT_CONFIG_OPTIONS; },
  NODE_RETRY_MODE_CONFIG_OPTIONS: function() { return NODE_RETRY_MODE_CONFIG_OPTIONS; },
  resolveRetryConfig: function() { return resolveRetryConfig; }
});
/* harmony import */var _smithy_util_middleware__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/util-middleware */"./node_modules/.pnpm/@smithy+util-middleware@2.1.1/node_modules/@smithy/util-middleware/dist-es/index.js");
/* harmony import */var _smithy_util_retry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/util-retry */"./node_modules/.pnpm/@smithy+util-retry@2.1.1/node_modules/@smithy/util-retry/dist-es/index.js");


const ENV_MAX_ATTEMPTS = "AWS_MAX_ATTEMPTS";
const CONFIG_MAX_ATTEMPTS = "max_attempts";
const NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {
    environmentVariableSelector: (env)=>{
        const value = env[ENV_MAX_ATTEMPTS];
        if (!value) return undefined;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) throw new Error(`Environment variable ${ENV_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        return maxAttempt;
    },
    configFileSelector: (profile)=>{
        const value = profile[CONFIG_MAX_ATTEMPTS];
        if (!value) return undefined;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) throw new Error(`Shared config file entry ${CONFIG_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        return maxAttempt;
    },
    default: _smithy_util_retry__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_MAX_ATTEMPTS
};
const resolveRetryConfig = (input)=>{
    const { retryStrategy } = input;
    const maxAttempts = (0, _smithy_util_middleware__WEBPACK_IMPORTED_MODULE_0__.normalizeProvider)(input.maxAttempts ?? _smithy_util_retry__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_MAX_ATTEMPTS);
    return {
        ...input,
        maxAttempts,
        retryStrategy: async ()=>{
            if (retryStrategy) return retryStrategy;
            const retryMode = await (0, _smithy_util_middleware__WEBPACK_IMPORTED_MODULE_0__.normalizeProvider)(input.retryMode)();
            if (retryMode === _smithy_util_retry__WEBPACK_IMPORTED_MODULE_1__.RETRY_MODES.ADAPTIVE) return new _smithy_util_retry__WEBPACK_IMPORTED_MODULE_1__.AdaptiveRetryStrategy(maxAttempts);
            return new _smithy_util_retry__WEBPACK_IMPORTED_MODULE_1__.StandardRetryStrategy(maxAttempts);
        }
    };
};
const ENV_RETRY_MODE = "AWS_RETRY_MODE";
const CONFIG_RETRY_MODE = "retry_mode";
const NODE_RETRY_MODE_CONFIG_OPTIONS = {
    environmentVariableSelector: (env)=>env[ENV_RETRY_MODE],
    configFileSelector: (profile)=>profile[CONFIG_RETRY_MODE],
    default: _smithy_util_retry__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_RETRY_MODE
};
}),
"./node_modules/.pnpm/@smithy+middleware-retry@2.1.1/node_modules/@smithy/middleware-retry/dist-es/defaultRetryQuota.js": (function (__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) {
"use strict";
/* harmony import */var _smithy_util_retry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/util-retry */"./node_modules/.pnpm/@smithy+util-retry@2.1.1/node_modules/@smithy/util-retry/dist-es/index.js");

const getDefaultRetryQuota = (initialRetryTokens, options)=>{
    const MAX_CAPACITY = initialRetryTokens;
    const noRetryIncrement = options?.noRetryIncrement ?? NO_RETRY_INCREMENT;
    const retryCost = options?.retryCost ?? RETRY_COST;
    const timeoutRetryCost = options?.timeoutRetryCost ?? TIMEOUT_RETRY_COST;
    let availableCapacity = initialRetryTokens;
    const getCapacityAmount = (error)=>error.name === "TimeoutError" ? timeoutRetryCost : retryCost;
    const hasRetryTokens = (error)=>getCapacityAmount(error) <= availableCapacity;
    const retrieveRetryTokens = (error)=>{
        if (!hasRetryTokens(error)) throw new Error("No retry token available");
        const capacityAmount = getCapacityAmount(error);
        availableCapacity -= capacityAmount;
        return capacityAmount;
    };
    const releaseRetryTokens = (capacityReleaseAmount)=>{
        availableCapacity += capacityReleaseAmount ?? noRetryIncrement;
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
    };
    return Object.freeze({
        hasRetryTokens,
        retrieveRetryTokens,
        releaseRetryTokens
    });
};
}),
"./node_modules/.pnpm/@smithy+middleware-retry@2.1.1/node_modules/@smithy/middleware-retry/dist-es/delayDecider.js": (function (__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) {
"use strict";
/* harmony import */var _smithy_util_retry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/util-retry */"./node_modules/.pnpm/@smithy+util-retry@2.1.1/node_modules/@smithy/util-retry/dist-es/index.js");

const defaultDelayDecider = (delayBase, attempts)=>Math.floor(Math.min(MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
}),
"./node_modules/.pnpm/@smithy+middleware-retry@2.1.1/node_modules/@smithy/middleware-retry/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  NODE_MAX_ATTEMPT_CONFIG_OPTIONS: function() { return /* reexport safe */ _configurations__WEBPACK_IMPORTED_MODULE_2__.NODE_MAX_ATTEMPT_CONFIG_OPTIONS; },
  NODE_RETRY_MODE_CONFIG_OPTIONS: function() { return /* reexport safe */ _configurations__WEBPACK_IMPORTED_MODULE_2__.NODE_RETRY_MODE_CONFIG_OPTIONS; },
  getRetryPlugin: function() { return /* reexport safe */ _retryMiddleware__WEBPACK_IMPORTED_MODULE_6__.getRetryPlugin; },
  resolveRetryConfig: function() { return /* reexport safe */ _configurations__WEBPACK_IMPORTED_MODULE_2__.resolveRetryConfig; },
  retryMiddlewareOptions: function() { return /* reexport safe */ _retryMiddleware__WEBPACK_IMPORTED_MODULE_6__.retryMiddlewareOptions; }
});
/* harmony import */var _AdaptiveRetryStrategy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AdaptiveRetryStrategy */"./node_modules/.pnpm/@smithy+middleware-retry@2.1.1/node_modules/@smithy/middleware-retry/dist-es/AdaptiveRetryStrategy.js");
/* harmony import */var _StandardRetryStrategy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./StandardRetryStrategy */"./node_modules/.pnpm/@smithy+middleware-retry@2.1.1/node_modules/@smithy/middleware-retry/dist-es/StandardRetryStrategy.js");
/* harmony import */var _configurations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./configurations */"./node_modules/.pnpm/@smithy+middleware-retry@2.1.1/node_modules/@smithy/middleware-retry/dist-es/configurations.js");
/* harmony import */var _delayDecider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./delayDecider */"./node_modules/.pnpm/@smithy+middleware-retry@2.1.1/node_modules/@smithy/middleware-retry/dist-es/delayDecider.js");
/* harmony import */var _omitRetryHeadersMiddleware__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./omitRetryHeadersMiddleware */"./node_modules/.pnpm/@smithy+middleware-retry@2.1.1/node_modules/@smithy/middleware-retry/dist-es/omitRetryHeadersMiddleware.js");
/* harmony import */var _retryMiddleware__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./retryMiddleware */"./node_modules/.pnpm/@smithy+middleware-retry@2.1.1/node_modules/@smithy/middleware-retry/dist-es/retryMiddleware.js");







}),
"./node_modules/.pnpm/@smithy+middleware-retry@2.1.1/node_modules/@smithy/middleware-retry/dist-es/isStreamingPayload/isStreamingPayload.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  isStreamingPayload: function() { return isStreamingPayload; }
});
/* harmony import */var stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! stream */"stream");
/* harmony import */var stream__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(stream__WEBPACK_IMPORTED_MODULE_0__);

const isStreamingPayload = (request)=>request?.body instanceof stream__WEBPACK_IMPORTED_MODULE_0__.Readable || typeof ReadableStream !== "undefined" && request?.body instanceof ReadableStream;
}),
"./node_modules/.pnpm/@smithy+middleware-retry@2.1.1/node_modules/@smithy/middleware-retry/dist-es/omitRetryHeadersMiddleware.js": (function (__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) {
"use strict";
/* harmony import */var _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/protocol-http */"./node_modules/.pnpm/@smithy+protocol-http@3.1.1/node_modules/@smithy/protocol-http/dist-es/index.js");
/* harmony import */var _smithy_util_retry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/util-retry */"./node_modules/.pnpm/@smithy+util-retry@2.1.1/node_modules/@smithy/util-retry/dist-es/index.js");


const omitRetryHeadersMiddleware = ()=>(next)=>async (args)=>{
            const { request } = args;
            if (HttpRequest.isInstance(request)) {
                delete request.headers[INVOCATION_ID_HEADER];
                delete request.headers[REQUEST_HEADER];
            }
            return next(args);
        };
const omitRetryHeadersMiddlewareOptions = (/* unused pure expression or super */ null && ({
    name: "omitRetryHeadersMiddleware",
    tags: [
        "RETRY",
        "HEADERS",
        "OMIT_RETRY_HEADERS"
    ],
    relation: "before",
    toMiddleware: "awsAuthMiddleware",
    override: true
}));
const getOmitRetryHeadersPlugin = (options)=>({
        applyToStack: (clientStack)=>{
            clientStack.addRelativeTo(omitRetryHeadersMiddleware(), omitRetryHeadersMiddlewareOptions);
        }
    });
}),
"./node_modules/.pnpm/@smithy+middleware-retry@2.1.1/node_modules/@smithy/middleware-retry/dist-es/retryMiddleware.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getRetryPlugin: function() { return getRetryPlugin; },
  retryMiddlewareOptions: function() { return retryMiddlewareOptions; }
});
/* harmony import */var _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/protocol-http */"./node_modules/.pnpm/@smithy+protocol-http@3.1.1/node_modules/@smithy/protocol-http/dist-es/index.js");
/* harmony import */var _smithy_service_error_classification__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @smithy/service-error-classification */"./node_modules/.pnpm/@smithy+service-error-classification@2.1.1/node_modules/@smithy/service-error-classification/dist-es/index.js");
/* harmony import */var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/smithy-client */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/index.js");
/* harmony import */var _smithy_util_retry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @smithy/util-retry */"./node_modules/.pnpm/@smithy+util-retry@2.1.1/node_modules/@smithy/util-retry/dist-es/index.js");
/* harmony import */var uuid__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! uuid */"./node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/v4.js");
/* harmony import */var _isStreamingPayload_isStreamingPayload__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./isStreamingPayload/isStreamingPayload */"./node_modules/.pnpm/@smithy+middleware-retry@2.1.1/node_modules/@smithy/middleware-retry/dist-es/isStreamingPayload/isStreamingPayload.js");
/* harmony import */var _util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./util */"./node_modules/.pnpm/@smithy+middleware-retry@2.1.1/node_modules/@smithy/middleware-retry/dist-es/util.js");







const retryMiddleware = (options)=>(next, context)=>async (args)=>{
            let retryStrategy = await options.retryStrategy();
            const maxAttempts = await options.maxAttempts();
            if (isRetryStrategyV2(retryStrategy)) {
                retryStrategy;
                let retryToken = await retryStrategy.acquireInitialRetryToken(context["partition_id"]);
                let lastError = new Error();
                let attempts = 0;
                let totalRetryDelay = 0;
                const { request } = args;
                const isRequest = _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest.isInstance(request);
                if (isRequest) request.headers[_smithy_util_retry__WEBPACK_IMPORTED_MODULE_2__.INVOCATION_ID_HEADER] = (0, uuid__WEBPACK_IMPORTED_MODULE_4__["default"])();
                while(true)try {
                    if (isRequest) request.headers[_smithy_util_retry__WEBPACK_IMPORTED_MODULE_2__.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
                    const { response, output } = await next(args);
                    retryStrategy.recordSuccess(retryToken);
                    output.$metadata.attempts = attempts + 1;
                    output.$metadata.totalRetryDelay = totalRetryDelay;
                    return {
                        response,
                        output
                    };
                } catch (e) {
                    const retryErrorInfo = getRetryErrorInfo(e);
                    lastError = (0, _util__WEBPACK_IMPORTED_MODULE_5__.asSdkError)(e);
                    if (isRequest && (0, _isStreamingPayload_isStreamingPayload__WEBPACK_IMPORTED_MODULE_3__.isStreamingPayload)(request)) {
                        (context.logger instanceof _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_1__.NoOpLogger ? console : context.logger)?.warn("An error was encountered in a non-retryable streaming request.");
                        throw lastError;
                    }
                    try {
                        retryToken = await retryStrategy.refreshRetryTokenForRetry(retryToken, retryErrorInfo);
                    } catch (refreshError) {
                        if (!lastError.$metadata) lastError.$metadata = {};
                        lastError.$metadata.attempts = attempts + 1;
                        lastError.$metadata.totalRetryDelay = totalRetryDelay;
                        throw lastError;
                    }
                    attempts = retryToken.getRetryCount();
                    const delay = retryToken.getRetryDelay();
                    totalRetryDelay += delay;
                    await new Promise((resolve)=>setTimeout(resolve, delay));
                }
            } else {
                retryStrategy;
                if (retryStrategy?.mode) context.userAgent = [
                    ...context.userAgent || [],
                    [
                        "cfg/retry-mode",
                        retryStrategy.mode
                    ]
                ];
                return retryStrategy.retry(next, args);
            }
        };
const isRetryStrategyV2 = (retryStrategy)=>typeof retryStrategy.acquireInitialRetryToken !== "undefined" && typeof retryStrategy.refreshRetryTokenForRetry !== "undefined" && typeof retryStrategy.recordSuccess !== "undefined";
const getRetryErrorInfo = (error)=>{
    const errorInfo = {
        errorType: getRetryErrorType(error)
    };
    const retryAfterHint = getRetryAfterHint(error.$response);
    if (retryAfterHint) errorInfo.retryAfterHint = retryAfterHint;
    return errorInfo;
};
const getRetryErrorType = (error)=>{
    if ((0, _smithy_service_error_classification__WEBPACK_IMPORTED_MODULE_6__.isThrottlingError)(error)) return "THROTTLING";
    if ((0, _smithy_service_error_classification__WEBPACK_IMPORTED_MODULE_6__.isTransientError)(error)) return "TRANSIENT";
    if ((0, _smithy_service_error_classification__WEBPACK_IMPORTED_MODULE_6__.isServerError)(error)) return "SERVER_ERROR";
    return "CLIENT_ERROR";
};
const retryMiddlewareOptions = {
    name: "retryMiddleware",
    tags: [
        "RETRY"
    ],
    step: "finalizeRequest",
    priority: "high",
    override: true
};
const getRetryPlugin = (options)=>({
        applyToStack: (clientStack)=>{
            clientStack.add(retryMiddleware(options), retryMiddlewareOptions);
        }
    });
const getRetryAfterHint = (response)=>{
    if (!_smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpResponse.isInstance(response)) return;
    const retryAfterHeaderName = Object.keys(response.headers).find((key)=>key.toLowerCase() === "retry-after");
    if (!retryAfterHeaderName) return;
    const retryAfter = response.headers[retryAfterHeaderName];
    const retryAfterSeconds = Number(retryAfter);
    if (!Number.isNaN(retryAfterSeconds)) return new Date(retryAfterSeconds * 1000);
    const retryAfterDate = new Date(retryAfter);
    return retryAfterDate;
};
}),
"./node_modules/.pnpm/@smithy+middleware-retry@2.1.1/node_modules/@smithy/middleware-retry/dist-es/util.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  asSdkError: function() { return asSdkError; }
});
const asSdkError = (error)=>{
    if (error instanceof Error) return error;
    if (error instanceof Object) return Object.assign(new Error(), error);
    if (typeof error === "string") return new Error(error);
    return new Error(`AWS SDK error wrapper for ${error}`);
};
}),
"./node_modules/.pnpm/@smithy+middleware-serde@2.1.1/node_modules/@smithy/middleware-serde/dist-es/deserializerMiddleware.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  deserializerMiddleware: function() { return deserializerMiddleware; }
});
const deserializerMiddleware = (options, deserializer)=>(next, context)=>async (args)=>{
            const { response } = await next(args);
            try {
                const parsed = await deserializer(response, options);
                return {
                    response,
                    output: parsed
                };
            } catch (error) {
                Object.defineProperty(error, "$response", {
                    value: response
                });
                if (!("$metadata" in error)) {
                    const hint = `Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.`;
                    error.message += "\n  " + hint;
                }
                throw error;
            }
        };
}),
"./node_modules/.pnpm/@smithy+middleware-serde@2.1.1/node_modules/@smithy/middleware-serde/dist-es/serdePlugin.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getSerdePlugin: function() { return getSerdePlugin; },
  serializerMiddlewareOption: function() { return serializerMiddlewareOption; }
});
/* harmony import */var _deserializerMiddleware__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deserializerMiddleware */"./node_modules/.pnpm/@smithy+middleware-serde@2.1.1/node_modules/@smithy/middleware-serde/dist-es/deserializerMiddleware.js");
/* harmony import */var _serializerMiddleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./serializerMiddleware */"./node_modules/.pnpm/@smithy+middleware-serde@2.1.1/node_modules/@smithy/middleware-serde/dist-es/serializerMiddleware.js");


const deserializerMiddlewareOption = {
    name: "deserializerMiddleware",
    step: "deserialize",
    tags: [
        "DESERIALIZER"
    ],
    override: true
};
const serializerMiddlewareOption = {
    name: "serializerMiddleware",
    step: "serialize",
    tags: [
        "SERIALIZER"
    ],
    override: true
};
function getSerdePlugin(config, serializer, deserializer) {
    return {
        applyToStack: (commandStack)=>{
            commandStack.add((0, _deserializerMiddleware__WEBPACK_IMPORTED_MODULE_0__.deserializerMiddleware)(config, deserializer), deserializerMiddlewareOption);
            commandStack.add((0, _serializerMiddleware__WEBPACK_IMPORTED_MODULE_1__.serializerMiddleware)(config, serializer), serializerMiddlewareOption);
        }
    };
}
}),
"./node_modules/.pnpm/@smithy+middleware-serde@2.1.1/node_modules/@smithy/middleware-serde/dist-es/serializerMiddleware.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  serializerMiddleware: function() { return serializerMiddleware; }
});
const serializerMiddleware = (options, serializer)=>(next, context)=>async (args)=>{
            const endpoint = context.endpointV2?.url && options.urlParser ? async ()=>options.urlParser(context.endpointV2.url) : options.endpoint;
            if (!endpoint) throw new Error("No valid endpoint provider available.");
            const request = await serializer(args.input, {
                ...options,
                endpoint
            });
            return next({
                ...args,
                request
            });
        };
}),
"./node_modules/.pnpm/@smithy+middleware-stack@2.1.1/node_modules/@smithy/middleware-stack/dist-es/MiddlewareStack.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  constructStack: function() { return constructStack; }
});
const getAllAliases = (name, aliases)=>{
    const _aliases = [];
    if (name) _aliases.push(name);
    if (aliases) for (const alias of aliases)_aliases.push(alias);
    return _aliases;
};
const getMiddlewareNameWithAliases = (name, aliases)=>{
    return `${name || "anonymous"}${aliases && aliases.length > 0 ? ` (a.k.a. ${aliases.join(",")})` : ""}`;
};
const constructStack = ()=>{
    let absoluteEntries = [];
    let relativeEntries = [];
    let identifyOnResolve = false;
    const entriesNameSet = new Set();
    const sort = (entries)=>entries.sort((a, b)=>stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || "normal"] - priorityWeights[a.priority || "normal"]);
    const removeByName = (toRemove)=>{
        let isRemoved = false;
        const filterCb = (entry)=>{
            const aliases = getAllAliases(entry.name, entry.aliases);
            if (aliases.includes(toRemove)) {
                isRemoved = true;
                for (const alias of aliases)entriesNameSet.delete(alias);
                return false;
            }
            return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
    };
    const removeByReference = (toRemove)=>{
        let isRemoved = false;
        const filterCb = (entry)=>{
            if (entry.middleware === toRemove) {
                isRemoved = true;
                for (const alias of getAllAliases(entry.name, entry.aliases))entriesNameSet.delete(alias);
                return false;
            }
            return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
    };
    const cloneTo = (toStack)=>{
        absoluteEntries.forEach((entry)=>{
            toStack.add(entry.middleware, {
                ...entry
            });
        });
        relativeEntries.forEach((entry)=>{
            toStack.addRelativeTo(entry.middleware, {
                ...entry
            });
        });
        toStack.identifyOnResolve?.(stack.identifyOnResolve());
        return toStack;
    };
    const expandRelativeMiddlewareList = (from)=>{
        const expandedMiddlewareList = [];
        from.before.forEach((entry)=>{
            if (entry.before.length === 0 && entry.after.length === 0) expandedMiddlewareList.push(entry);
            else expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
        });
        expandedMiddlewareList.push(from);
        from.after.reverse().forEach((entry)=>{
            if (entry.before.length === 0 && entry.after.length === 0) expandedMiddlewareList.push(entry);
            else expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
        });
        return expandedMiddlewareList;
    };
    const getMiddlewareList = (debug = false)=>{
        const normalizedAbsoluteEntries = [];
        const normalizedRelativeEntries = [];
        const normalizedEntriesNameMap = {};
        absoluteEntries.forEach((entry)=>{
            const normalizedEntry = {
                ...entry,
                before: [],
                after: []
            };
            for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases))normalizedEntriesNameMap[alias] = normalizedEntry;
            normalizedAbsoluteEntries.push(normalizedEntry);
        });
        relativeEntries.forEach((entry)=>{
            const normalizedEntry = {
                ...entry,
                before: [],
                after: []
            };
            for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases))normalizedEntriesNameMap[alias] = normalizedEntry;
            normalizedRelativeEntries.push(normalizedEntry);
        });
        normalizedRelativeEntries.forEach((entry)=>{
            if (entry.toMiddleware) {
                const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
                if (toMiddleware === undefined) {
                    if (debug) return;
                    throw new Error(`${entry.toMiddleware} is not found when adding ` + `${getMiddlewareNameWithAliases(entry.name, entry.aliases)} ` + `middleware ${entry.relation} ${entry.toMiddleware}`);
                }
                if (entry.relation === "after") toMiddleware.after.push(entry);
                if (entry.relation === "before") toMiddleware.before.push(entry);
            }
        });
        const mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce((wholeList, expandedMiddlewareList)=>{
            wholeList.push(...expandedMiddlewareList);
            return wholeList;
        }, []);
        return mainChain;
    };
    const stack = {
        add: (middleware, options = {})=>{
            const { name, override, aliases: _aliases } = options;
            const entry = {
                step: "initialize",
                priority: "normal",
                middleware,
                ...options
            };
            const aliases = getAllAliases(name, _aliases);
            if (aliases.length > 0) {
                if (aliases.some((alias)=>entriesNameSet.has(alias))) {
                    if (!override) throw new Error(`Duplicate middleware name '${getMiddlewareNameWithAliases(name, _aliases)}'`);
                    for (const alias of aliases){
                        const toOverrideIndex = absoluteEntries.findIndex((entry)=>entry.name === alias || entry.aliases?.some((a)=>a === alias));
                        if (toOverrideIndex === -1) continue;
                        const toOverride = absoluteEntries[toOverrideIndex];
                        if (toOverride.step !== entry.step || entry.priority !== toOverride.priority) throw new Error(`"${getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases)}" middleware with ` + `${toOverride.priority} priority in ${toOverride.step} step cannot ` + `be overridden by "${getMiddlewareNameWithAliases(name, _aliases)}" middleware with ` + `${entry.priority} priority in ${entry.step} step.`);
                        absoluteEntries.splice(toOverrideIndex, 1);
                    }
                }
                for (const alias of aliases)entriesNameSet.add(alias);
            }
            absoluteEntries.push(entry);
        },
        addRelativeTo: (middleware, options)=>{
            const { name, override, aliases: _aliases } = options;
            const entry = {
                middleware,
                ...options
            };
            const aliases = getAllAliases(name, _aliases);
            if (aliases.length > 0) {
                if (aliases.some((alias)=>entriesNameSet.has(alias))) {
                    if (!override) throw new Error(`Duplicate middleware name '${getMiddlewareNameWithAliases(name, _aliases)}'`);
                    for (const alias of aliases){
                        const toOverrideIndex = relativeEntries.findIndex((entry)=>entry.name === alias || entry.aliases?.some((a)=>a === alias));
                        if (toOverrideIndex === -1) continue;
                        const toOverride = relativeEntries[toOverrideIndex];
                        if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) throw new Error(`"${getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases)}" middleware ` + `${toOverride.relation} "${toOverride.toMiddleware}" middleware cannot be overridden ` + `by "${getMiddlewareNameWithAliases(name, _aliases)}" middleware ${entry.relation} ` + `"${entry.toMiddleware}" middleware.`);
                        relativeEntries.splice(toOverrideIndex, 1);
                    }
                }
                for (const alias of aliases)entriesNameSet.add(alias);
            }
            relativeEntries.push(entry);
        },
        clone: ()=>cloneTo(constructStack()),
        use: (plugin)=>{
            plugin.applyToStack(stack);
        },
        remove: (toRemove)=>{
            if (typeof toRemove === "string") return removeByName(toRemove);
            else return removeByReference(toRemove);
        },
        removeByTag: (toRemove)=>{
            let isRemoved = false;
            const filterCb = (entry)=>{
                const { tags, name, aliases: _aliases } = entry;
                if (tags && tags.includes(toRemove)) {
                    const aliases = getAllAliases(name, _aliases);
                    for (const alias of aliases)entriesNameSet.delete(alias);
                    isRemoved = true;
                    return false;
                }
                return true;
            };
            absoluteEntries = absoluteEntries.filter(filterCb);
            relativeEntries = relativeEntries.filter(filterCb);
            return isRemoved;
        },
        concat: (from)=>{
            const cloned = cloneTo(constructStack());
            cloned.use(from);
            cloned.identifyOnResolve(identifyOnResolve || cloned.identifyOnResolve() || (from.identifyOnResolve?.() ?? false));
            return cloned;
        },
        applyToStack: cloneTo,
        identify: ()=>{
            return getMiddlewareList(true).map((mw)=>{
                const step = mw.step ?? mw.relation + " " + mw.toMiddleware;
                return getMiddlewareNameWithAliases(mw.name, mw.aliases) + " - " + step;
            });
        },
        identifyOnResolve (toggle) {
            if (typeof toggle === "boolean") identifyOnResolve = toggle;
            return identifyOnResolve;
        },
        resolve: (handler, context)=>{
            for (const middleware of getMiddlewareList().map((entry)=>entry.middleware).reverse())handler = middleware(handler, context);
            if (identifyOnResolve) console.log(stack.identify());
            return handler;
        }
    };
    return stack;
};
const stepWeights = {
    initialize: 5,
    serialize: 4,
    build: 3,
    finalizeRequest: 2,
    deserialize: 1
};
const priorityWeights = {
    high: 3,
    normal: 2,
    low: 1
};
}),
"./node_modules/.pnpm/@smithy+node-config-provider@2.2.1/node_modules/@smithy/node-config-provider/dist-es/configLoader.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  loadConfig: function() { return loadConfig; }
});
/* harmony import */var _smithy_property_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/property-provider */"./node_modules/.pnpm/@smithy+property-provider@2.1.1/node_modules/@smithy/property-provider/dist-es/memoize.js");
/* harmony import */var _smithy_property_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @smithy/property-provider */"./node_modules/.pnpm/@smithy+property-provider@2.1.1/node_modules/@smithy/property-provider/dist-es/chain.js");
/* harmony import */var _fromEnv__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fromEnv */"./node_modules/.pnpm/@smithy+node-config-provider@2.2.1/node_modules/@smithy/node-config-provider/dist-es/fromEnv.js");
/* harmony import */var _fromSharedConfigFiles__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fromSharedConfigFiles */"./node_modules/.pnpm/@smithy+node-config-provider@2.2.1/node_modules/@smithy/node-config-provider/dist-es/fromSharedConfigFiles.js");
/* harmony import */var _fromStatic__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./fromStatic */"./node_modules/.pnpm/@smithy+node-config-provider@2.2.1/node_modules/@smithy/node-config-provider/dist-es/fromStatic.js");




const loadConfig = ({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {})=>(0, _smithy_property_provider__WEBPACK_IMPORTED_MODULE_1__.memoize)((0, _smithy_property_provider__WEBPACK_IMPORTED_MODULE_2__.chain)((0, _fromEnv__WEBPACK_IMPORTED_MODULE_3__.fromEnv)(environmentVariableSelector), (0, _fromSharedConfigFiles__WEBPACK_IMPORTED_MODULE_0__.fromSharedConfigFiles)(configFileSelector, configuration), (0, _fromStatic__WEBPACK_IMPORTED_MODULE_4__.fromStatic)(defaultValue)));
}),
"./node_modules/.pnpm/@smithy+node-config-provider@2.2.1/node_modules/@smithy/node-config-provider/dist-es/fromEnv.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  fromEnv: function() { return fromEnv; }
});
/* harmony import */var _smithy_property_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/property-provider */"./node_modules/.pnpm/@smithy+property-provider@2.1.1/node_modules/@smithy/property-provider/dist-es/CredentialsProviderError.js");

const fromEnv = (envVarSelector)=>async ()=>{
        try {
            const config = envVarSelector(process.env);
            if (config === undefined) throw new Error();
            return config;
        } catch (e) {
            throw new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_0__.CredentialsProviderError(e.message || `Cannot load config from environment variables with getter: ${envVarSelector}`);
        }
    };
}),
"./node_modules/.pnpm/@smithy+node-config-provider@2.2.1/node_modules/@smithy/node-config-provider/dist-es/fromSharedConfigFiles.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  fromSharedConfigFiles: function() { return fromSharedConfigFiles; }
});
/* harmony import */var _smithy_property_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/property-provider */"./node_modules/.pnpm/@smithy+property-provider@2.1.1/node_modules/@smithy/property-provider/dist-es/CredentialsProviderError.js");
/* harmony import */var _smithy_shared_ini_file_loader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/shared-ini-file-loader */"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/index.js");


const fromSharedConfigFiles = (configSelector, { preferredFile = "config", ...init } = {})=>async ()=>{
        const profile = (0, _smithy_shared_ini_file_loader__WEBPACK_IMPORTED_MODULE_0__.getProfileName)(init);
        const { configFile, credentialsFile } = await (0, _smithy_shared_ini_file_loader__WEBPACK_IMPORTED_MODULE_0__.loadSharedConfigFiles)(init);
        const profileFromCredentials = credentialsFile[profile] || {};
        const profileFromConfig = configFile[profile] || {};
        const mergedProfile = preferredFile === "config" ? {
            ...profileFromCredentials,
            ...profileFromConfig
        } : {
            ...profileFromConfig,
            ...profileFromCredentials
        };
        try {
            const cfgFile = preferredFile === "config" ? configFile : credentialsFile;
            const configValue = configSelector(mergedProfile, cfgFile);
            if (configValue === undefined) throw new Error();
            return configValue;
        } catch (e) {
            throw new _smithy_property_provider__WEBPACK_IMPORTED_MODULE_1__.CredentialsProviderError(e.message || `Cannot load config for profile ${profile} in SDK configuration files with getter: ${configSelector}`);
        }
    };
}),
"./node_modules/.pnpm/@smithy+node-config-provider@2.2.1/node_modules/@smithy/node-config-provider/dist-es/fromStatic.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  fromStatic: function() { return fromStatic; }
});
/* harmony import */var _smithy_property_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/property-provider */"./node_modules/.pnpm/@smithy+property-provider@2.1.1/node_modules/@smithy/property-provider/dist-es/fromStatic.js");

const isFunction = (func)=>typeof func === "function";
const fromStatic = (defaultValue)=>isFunction(defaultValue) ? async ()=>await defaultValue() : (0, _smithy_property_provider__WEBPACK_IMPORTED_MODULE_0__.fromStatic)(defaultValue);
}),
"./node_modules/.pnpm/@smithy+node-config-provider@2.2.1/node_modules/@smithy/node-config-provider/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  loadConfig: function() { return /* reexport safe */ _configLoader__WEBPACK_IMPORTED_MODULE_0__.loadConfig; }
});
/* harmony import */var _configLoader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./configLoader */"./node_modules/.pnpm/@smithy+node-config-provider@2.2.1/node_modules/@smithy/node-config-provider/dist-es/configLoader.js");

}),
"./node_modules/.pnpm/@smithy+node-http-handler@2.3.1/node_modules/@smithy/node-http-handler/dist-es/constants.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  NODEJS_TIMEOUT_ERROR_CODES: function() { return NODEJS_TIMEOUT_ERROR_CODES; }
});
const NODEJS_TIMEOUT_ERROR_CODES = [
    "ECONNRESET",
    "EPIPE",
    "ETIMEDOUT"
];
}),
"./node_modules/.pnpm/@smithy+node-http-handler@2.3.1/node_modules/@smithy/node-http-handler/dist-es/get-transformed-headers.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getTransformedHeaders: function() { return getTransformedHeaders; }
});
const getTransformedHeaders = (headers)=>{
    const transformedHeaders = {};
    for (const name of Object.keys(headers)){
        const headerValues = headers[name];
        transformedHeaders[name] = Array.isArray(headerValues) ? headerValues.join(",") : headerValues;
    }
    return transformedHeaders;
};

}),
"./node_modules/.pnpm/@smithy+node-http-handler@2.3.1/node_modules/@smithy/node-http-handler/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  NodeHttpHandler: function() { return /* reexport safe */ _node_http_handler__WEBPACK_IMPORTED_MODULE_0__.NodeHttpHandler; },
  streamCollector: function() { return /* reexport safe */ _stream_collector__WEBPACK_IMPORTED_MODULE_2__.streamCollector; }
});
/* harmony import */var _node_http_handler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node-http-handler */"./node_modules/.pnpm/@smithy+node-http-handler@2.3.1/node_modules/@smithy/node-http-handler/dist-es/node-http-handler.js");
/* harmony import */var _node_http2_handler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node-http2-handler */"./node_modules/.pnpm/@smithy+node-http-handler@2.3.1/node_modules/@smithy/node-http-handler/dist-es/node-http2-handler.js");
/* harmony import */var _stream_collector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stream-collector */"./node_modules/.pnpm/@smithy+node-http-handler@2.3.1/node_modules/@smithy/node-http-handler/dist-es/stream-collector/index.js");



}),
"./node_modules/.pnpm/@smithy+node-http-handler@2.3.1/node_modules/@smithy/node-http-handler/dist-es/node-http-handler.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  NodeHttpHandler: function() { return NodeHttpHandler; }
});
/* harmony import */var _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/protocol-http */"./node_modules/.pnpm/@smithy+protocol-http@3.1.1/node_modules/@smithy/protocol-http/dist-es/index.js");
/* harmony import */var _smithy_querystring_builder__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @smithy/querystring-builder */"./node_modules/.pnpm/@smithy+querystring-builder@2.1.1/node_modules/@smithy/querystring-builder/dist-es/index.js");
/* harmony import */var http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! http */"http");
/* harmony import */var http__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(http__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */var https__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! https */"https");
/* harmony import */var https__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(https__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */var _constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./constants */"./node_modules/.pnpm/@smithy+node-http-handler@2.3.1/node_modules/@smithy/node-http-handler/dist-es/constants.js");
/* harmony import */var _get_transformed_headers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./get-transformed-headers */"./node_modules/.pnpm/@smithy+node-http-handler@2.3.1/node_modules/@smithy/node-http-handler/dist-es/get-transformed-headers.js");
/* harmony import */var _set_connection_timeout__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./set-connection-timeout */"./node_modules/.pnpm/@smithy+node-http-handler@2.3.1/node_modules/@smithy/node-http-handler/dist-es/set-connection-timeout.js");
/* harmony import */var _set_socket_keep_alive__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./set-socket-keep-alive */"./node_modules/.pnpm/@smithy+node-http-handler@2.3.1/node_modules/@smithy/node-http-handler/dist-es/set-socket-keep-alive.js");
/* harmony import */var _set_socket_timeout__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./set-socket-timeout */"./node_modules/.pnpm/@smithy+node-http-handler@2.3.1/node_modules/@smithy/node-http-handler/dist-es/set-socket-timeout.js");
/* harmony import */var _write_request_body__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./write-request-body */"./node_modules/.pnpm/@smithy+node-http-handler@2.3.1/node_modules/@smithy/node-http-handler/dist-es/write-request-body.js");










const DEFAULT_REQUEST_TIMEOUT = 0;
class NodeHttpHandler {
    static create(instanceOrOptions) {
        if (typeof instanceOrOptions?.handle === "function") return instanceOrOptions;
        return new NodeHttpHandler(instanceOrOptions);
    }
    constructor(options){
        this.metadata = {
            handlerProtocol: "http/1.1"
        };
        this.configProvider = new Promise((resolve, reject)=>{
            if (typeof options === "function") options().then((_options)=>{
                resolve(this.resolveDefaultConfig(_options));
            }).catch(reject);
            else resolve(this.resolveDefaultConfig(options));
        });
    }
    resolveDefaultConfig(options) {
        const { requestTimeout, connectionTimeout, socketTimeout, httpAgent, httpsAgent } = options || {};
        const keepAlive = true;
        const maxSockets = 50;
        return {
            connectionTimeout,
            requestTimeout: requestTimeout ?? socketTimeout,
            httpAgent: httpAgent || new http__WEBPACK_IMPORTED_MODULE_1__.Agent({
                keepAlive,
                maxSockets
            }),
            httpsAgent: httpsAgent || new https__WEBPACK_IMPORTED_MODULE_2__.Agent({
                keepAlive,
                maxSockets
            })
        };
    }
    destroy() {
        this.config?.httpAgent?.destroy();
        this.config?.httpsAgent?.destroy();
    }
    async handle(request, { abortSignal } = {}) {
        if (!this.config) this.config = await this.configProvider;
        return new Promise((_resolve, _reject)=>{
            let writeRequestBodyPromise = undefined;
            const resolve = async (arg)=>{
                await writeRequestBodyPromise;
                _resolve(arg);
            };
            const reject = async (arg)=>{
                await writeRequestBodyPromise;
                _reject(arg);
            };
            if (!this.config) throw new Error("Node HTTP request handler config is not resolved");
            if (abortSignal?.aborted) {
                const abortError = new Error("Request aborted");
                abortError.name = "AbortError";
                reject(abortError);
                return;
            }
            const isSSL = request.protocol === "https:";
            const queryString = (0, _smithy_querystring_builder__WEBPACK_IMPORTED_MODULE_4__.buildQueryString)(request.query || {});
            let auth = undefined;
            if (request.username != null || request.password != null) {
                const username = request.username ?? "";
                const password = request.password ?? "";
                auth = `${username}:${password}`;
            }
            let path = request.path;
            if (queryString) path += `?${queryString}`;
            if (request.fragment) path += `#${request.fragment}`;
            const nodeHttpsOptions = {
                headers: request.headers,
                host: request.hostname,
                method: request.method,
                path,
                port: request.port,
                agent: isSSL ? this.config.httpsAgent : this.config.httpAgent,
                auth
            };
            const requestFunc = isSSL ? https__WEBPACK_IMPORTED_MODULE_2__.request : http__WEBPACK_IMPORTED_MODULE_1__.request;
            const req = requestFunc(nodeHttpsOptions, (res)=>{
                const httpResponse = new _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpResponse({
                    statusCode: res.statusCode || -1,
                    reason: res.statusMessage,
                    headers: (0, _get_transformed_headers__WEBPACK_IMPORTED_MODULE_5__.getTransformedHeaders)(res.headers),
                    body: res
                });
                resolve({
                    response: httpResponse
                });
            });
            req.on("error", (err)=>{
                if (_constants__WEBPACK_IMPORTED_MODULE_6__.NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) reject(Object.assign(err, {
                    name: "TimeoutError"
                }));
                else reject(err);
            });
            (0, _set_connection_timeout__WEBPACK_IMPORTED_MODULE_7__.setConnectionTimeout)(req, reject, this.config.connectionTimeout);
            (0, _set_socket_timeout__WEBPACK_IMPORTED_MODULE_8__.setSocketTimeout)(req, reject, this.config.requestTimeout);
            if (abortSignal) abortSignal.onabort = ()=>{
                req.abort();
                const abortError = new Error("Request aborted");
                abortError.name = "AbortError";
                reject(abortError);
            };
            const httpAgent = nodeHttpsOptions.agent;
            if (typeof httpAgent === "object" && "keepAlive" in httpAgent) (0, _set_socket_keep_alive__WEBPACK_IMPORTED_MODULE_9__.setSocketKeepAlive)(req, {
                keepAlive: httpAgent.keepAlive,
                keepAliveMsecs: httpAgent.keepAliveMsecs
            });
            writeRequestBodyPromise = (0, _write_request_body__WEBPACK_IMPORTED_MODULE_3__.writeRequestBody)(req, request, this.config.requestTimeout).catch(_reject);
        });
    }
    updateHttpClientConfig(key, value) {
        this.config = undefined;
        this.configProvider = this.configProvider.then((config)=>{
            return {
                ...config,
                [key]: value
            };
        });
    }
    httpHandlerConfigs() {
        return this.config ?? {};
    }
}
}),
"./node_modules/.pnpm/@smithy+node-http-handler@2.3.1/node_modules/@smithy/node-http-handler/dist-es/node-http2-connection-manager.js": (function (__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) {
"use strict";
/* harmony import */var http2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! http2 */"http2");
/* harmony import */var http2__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(http2__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */var _node_http2_connection_pool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node-http2-connection-pool */"./node_modules/.pnpm/@smithy+node-http-handler@2.3.1/node_modules/@smithy/node-http-handler/dist-es/node-http2-connection-pool.js");


class NodeHttp2ConnectionManager {
    constructor(config){
        this.sessionCache = new Map();
        this.config = config;
        if (this.config.maxConcurrency && this.config.maxConcurrency <= 0) throw new RangeError("maxConcurrency must be greater than zero.");
    }
    lease(requestContext, connectionConfiguration) {
        const url = this.getUrlString(requestContext);
        const existingPool = this.sessionCache.get(url);
        if (existingPool) {
            const existingSession = existingPool.poll();
            if (existingSession && !this.config.disableConcurrency) return existingSession;
        }
        const session = http2.connect(url);
        if (this.config.maxConcurrency) session.settings({
            maxConcurrentStreams: this.config.maxConcurrency
        }, (err)=>{
            if (err) throw new Error("Fail to set maxConcurrentStreams to " + this.config.maxConcurrency + "when creating new session for " + requestContext.destination.toString());
        });
        session.unref();
        const destroySessionCb = ()=>{
            session.destroy();
            this.deleteSession(url, session);
        };
        session.on("goaway", destroySessionCb);
        session.on("error", destroySessionCb);
        session.on("frameError", destroySessionCb);
        session.on("close", ()=>this.deleteSession(url, session));
        if (connectionConfiguration.requestTimeout) session.setTimeout(connectionConfiguration.requestTimeout, destroySessionCb);
        const connectionPool = this.sessionCache.get(url) || new NodeHttp2ConnectionPool();
        connectionPool.offerLast(session);
        this.sessionCache.set(url, connectionPool);
        return session;
    }
    deleteSession(authority, session) {
        const existingConnectionPool = this.sessionCache.get(authority);
        if (!existingConnectionPool) return;
        if (!existingConnectionPool.contains(session)) return;
        existingConnectionPool.remove(session);
        this.sessionCache.set(authority, existingConnectionPool);
    }
    release(requestContext, session) {
        const cacheKey = this.getUrlString(requestContext);
        this.sessionCache.get(cacheKey)?.offerLast(session);
    }
    destroy() {
        for (const [key, connectionPool] of this.sessionCache){
            for (const session of connectionPool){
                if (!session.destroyed) session.destroy();
                connectionPool.remove(session);
            }
            this.sessionCache.delete(key);
        }
    }
    setMaxConcurrentStreams(maxConcurrentStreams) {
        if (this.config.maxConcurrency && this.config.maxConcurrency <= 0) throw new RangeError("maxConcurrentStreams must be greater than zero.");
        this.config.maxConcurrency = maxConcurrentStreams;
    }
    setDisableConcurrentStreams(disableConcurrentStreams) {
        this.config.disableConcurrency = disableConcurrentStreams;
    }
    getUrlString(request) {
        return request.destination.toString();
    }
}
}),
"./node_modules/.pnpm/@smithy+node-http-handler@2.3.1/node_modules/@smithy/node-http-handler/dist-es/node-http2-connection-pool.js": (function () {
"use strict";
class NodeHttp2ConnectionPool {
    constructor(sessions){
        this.sessions = [];
        this.sessions = sessions ?? [];
    }
    poll() {
        if (this.sessions.length > 0) return this.sessions.shift();
    }
    offerLast(session) {
        this.sessions.push(session);
    }
    contains(session) {
        return this.sessions.includes(session);
    }
    remove(session) {
        this.sessions = this.sessions.filter((s)=>s !== session);
    }
    [Symbol.iterator]() {
        return this.sessions[Symbol.iterator]();
    }
    destroy(connection) {
        for (const session of this.sessions){
            if (session === connection) {
                if (!session.destroyed) session.destroy();
            }
        }
    }
}
}),
"./node_modules/.pnpm/@smithy+node-http-handler@2.3.1/node_modules/@smithy/node-http-handler/dist-es/node-http2-handler.js": (function (__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) {
"use strict";
/* harmony import */var _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/protocol-http */"./node_modules/.pnpm/@smithy+protocol-http@3.1.1/node_modules/@smithy/protocol-http/dist-es/index.js");
/* harmony import */var http2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! http2 */"http2");
/* harmony import */var http2__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(http2__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */var _node_http2_connection_manager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node-http2-connection-manager */"./node_modules/.pnpm/@smithy+node-http-handler@2.3.1/node_modules/@smithy/node-http-handler/dist-es/node-http2-connection-manager.js");
/* harmony import */var _write_request_body__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./write-request-body */"./node_modules/.pnpm/@smithy+node-http-handler@2.3.1/node_modules/@smithy/node-http-handler/dist-es/write-request-body.js");






class NodeHttp2Handler {
    static create(instanceOrOptions) {
        if (typeof instanceOrOptions?.handle === "function") return instanceOrOptions;
        return new NodeHttp2Handler(instanceOrOptions);
    }
    constructor(options){
        this.metadata = {
            handlerProtocol: "h2"
        };
        this.connectionManager = new NodeHttp2ConnectionManager({});
        this.configProvider = new Promise((resolve, reject)=>{
            if (typeof options === "function") options().then((opts)=>{
                resolve(opts || {});
            }).catch(reject);
            else resolve(options || {});
        });
    }
    destroy() {
        this.connectionManager.destroy();
    }
    async handle(request, { abortSignal } = {}) {
        if (!this.config) {
            this.config = await this.configProvider;
            this.connectionManager.setDisableConcurrentStreams(this.config.disableConcurrentStreams || false);
            if (this.config.maxConcurrentStreams) this.connectionManager.setMaxConcurrentStreams(this.config.maxConcurrentStreams);
        }
        const { requestTimeout, disableConcurrentStreams } = this.config;
        return new Promise((_resolve, _reject)=>{
            let fulfilled = false;
            let writeRequestBodyPromise = undefined;
            const resolve = async (arg)=>{
                await writeRequestBodyPromise;
                _resolve(arg);
            };
            const reject = async (arg)=>{
                await writeRequestBodyPromise;
                _reject(arg);
            };
            if (abortSignal?.aborted) {
                fulfilled = true;
                const abortError = new Error("Request aborted");
                abortError.name = "AbortError";
                reject(abortError);
                return;
            }
            const { hostname, method, port, protocol, query } = request;
            let auth = "";
            if (request.username != null || request.password != null) {
                const username = request.username ?? "";
                const password = request.password ?? "";
                auth = `${username}:${password}@`;
            }
            const authority = `${protocol}//${auth}${hostname}${port ? `:${port}` : ""}`;
            const requestContext = {
                destination: new URL(authority)
            };
            const session = this.connectionManager.lease(requestContext, {
                requestTimeout: this.config?.sessionTimeout,
                disableConcurrentStreams: disableConcurrentStreams || false
            });
            const rejectWithDestroy = (err)=>{
                if (disableConcurrentStreams) this.destroySession(session);
                fulfilled = true;
                reject(err);
            };
            const queryString = buildQueryString(query || {});
            let path = request.path;
            if (queryString) path += `?${queryString}`;
            if (request.fragment) path += `#${request.fragment}`;
            const req = session.request({
                ...request.headers,
                [constants.HTTP2_HEADER_PATH]: path,
                [constants.HTTP2_HEADER_METHOD]: method
            });
            session.ref();
            req.on("response", (headers)=>{
                const httpResponse = new HttpResponse({
                    statusCode: headers[":status"] || -1,
                    headers: getTransformedHeaders(headers),
                    body: req
                });
                fulfilled = true;
                resolve({
                    response: httpResponse
                });
                if (disableConcurrentStreams) {
                    session.close();
                    this.connectionManager.deleteSession(authority, session);
                }
            });
            if (requestTimeout) req.setTimeout(requestTimeout, ()=>{
                req.close();
                const timeoutError = new Error(`Stream timed out because of no activity for ${requestTimeout} ms`);
                timeoutError.name = "TimeoutError";
                rejectWithDestroy(timeoutError);
            });
            if (abortSignal) abortSignal.onabort = ()=>{
                req.close();
                const abortError = new Error("Request aborted");
                abortError.name = "AbortError";
                rejectWithDestroy(abortError);
            };
            req.on("frameError", (type, code, id)=>{
                rejectWithDestroy(new Error(`Frame type id ${type} in stream id ${id} has failed with code ${code}.`));
            });
            req.on("error", rejectWithDestroy);
            req.on("aborted", ()=>{
                rejectWithDestroy(new Error(`HTTP/2 stream is abnormally aborted in mid-communication with result code ${req.rstCode}.`));
            });
            req.on("close", ()=>{
                session.unref();
                if (disableConcurrentStreams) session.destroy();
                if (!fulfilled) rejectWithDestroy(new Error("Unexpected error: http2 request did not get a response"));
            });
            writeRequestBodyPromise = writeRequestBody(req, request, requestTimeout);
        });
    }
    updateHttpClientConfig(key, value) {
        this.config = undefined;
        this.configProvider = this.configProvider.then((config)=>{
            return {
                ...config,
                [key]: value
            };
        });
    }
    httpHandlerConfigs() {
        return this.config ?? {};
    }
    destroySession(session) {
        if (!session.destroyed) session.destroy();
    }
}
}),
"./node_modules/.pnpm/@smithy+node-http-handler@2.3.1/node_modules/@smithy/node-http-handler/dist-es/set-connection-timeout.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  setConnectionTimeout: function() { return setConnectionTimeout; }
});
const setConnectionTimeout = (request, reject, timeoutInMs = 0)=>{
    if (!timeoutInMs) return;
    const timeoutId = setTimeout(()=>{
        request.destroy();
        reject(Object.assign(new Error(`Socket timed out without establishing a connection within ${timeoutInMs} ms`), {
            name: "TimeoutError"
        }));
    }, timeoutInMs);
    request.on("socket", (socket)=>{
        if (socket.connecting) socket.on("connect", ()=>{
            clearTimeout(timeoutId);
        });
        else clearTimeout(timeoutId);
    });
};
}),
"./node_modules/.pnpm/@smithy+node-http-handler@2.3.1/node_modules/@smithy/node-http-handler/dist-es/set-socket-keep-alive.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  setSocketKeepAlive: function() { return setSocketKeepAlive; }
});
const setSocketKeepAlive = (request, { keepAlive, keepAliveMsecs })=>{
    if (keepAlive !== true) return;
    request.on("socket", (socket)=>{
        socket.setKeepAlive(keepAlive, keepAliveMsecs || 0);
    });
};
}),
"./node_modules/.pnpm/@smithy+node-http-handler@2.3.1/node_modules/@smithy/node-http-handler/dist-es/set-socket-timeout.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  setSocketTimeout: function() { return setSocketTimeout; }
});
const setSocketTimeout = (request, reject, timeoutInMs = 0)=>{
    request.setTimeout(timeoutInMs, ()=>{
        request.destroy();
        reject(Object.assign(new Error(`Connection timed out after ${timeoutInMs} ms`), {
            name: "TimeoutError"
        }));
    });
};
}),
"./node_modules/.pnpm/@smithy+node-http-handler@2.3.1/node_modules/@smithy/node-http-handler/dist-es/stream-collector/collector.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  Collector: function() { return Collector; }
});
/* harmony import */var stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! stream */"stream");
/* harmony import */var stream__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(stream__WEBPACK_IMPORTED_MODULE_0__);

class Collector extends stream__WEBPACK_IMPORTED_MODULE_0__.Writable {
    constructor(){
        super(...arguments);
        this.bufferedBytes = [];
    }
    _write(chunk, encoding, callback) {
        this.bufferedBytes.push(chunk);
        callback();
    }
}
}),
"./node_modules/.pnpm/@smithy+node-http-handler@2.3.1/node_modules/@smithy/node-http-handler/dist-es/stream-collector/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  streamCollector: function() { return streamCollector; }
});
/* harmony import */var _collector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./collector */"./node_modules/.pnpm/@smithy+node-http-handler@2.3.1/node_modules/@smithy/node-http-handler/dist-es/stream-collector/collector.js");

const streamCollector = (stream)=>new Promise((resolve, reject)=>{
        const collector = new _collector__WEBPACK_IMPORTED_MODULE_0__.Collector();
        stream.pipe(collector);
        stream.on("error", (err)=>{
            collector.end();
            reject(err);
        });
        collector.on("error", reject);
        collector.on("finish", function() {
            const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));
            resolve(bytes);
        });
    });
}),
"./node_modules/.pnpm/@smithy+node-http-handler@2.3.1/node_modules/@smithy/node-http-handler/dist-es/write-request-body.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  writeRequestBody: function() { return writeRequestBody; }
});
/* harmony import */var stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! stream */"stream");
/* harmony import */var stream__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(stream__WEBPACK_IMPORTED_MODULE_0__);

const MIN_WAIT_TIME = 1000;
async function writeRequestBody(httpRequest, request, maxContinueTimeoutMs = MIN_WAIT_TIME) {
    const headers = request.headers ?? {};
    const expect = headers["Expect"] || headers["expect"];
    let timeoutId = -1;
    let hasError = false;
    if (expect === "100-continue") await Promise.race([
        new Promise((resolve)=>{
            timeoutId = Number(setTimeout(resolve, Math.max(MIN_WAIT_TIME, maxContinueTimeoutMs)));
        }),
        new Promise((resolve)=>{
            httpRequest.on("continue", ()=>{
                clearTimeout(timeoutId);
                resolve();
            });
            httpRequest.on("error", ()=>{
                hasError = true;
                clearTimeout(timeoutId);
                resolve();
            });
        })
    ]);
    if (!hasError) writeBody(httpRequest, request.body);
}
function writeBody(httpRequest, body) {
    if (body instanceof stream__WEBPACK_IMPORTED_MODULE_0__.Readable) body.pipe(httpRequest);
    else if (body) httpRequest.end(Buffer.from(body));
    else httpRequest.end();
}
}),
"./node_modules/.pnpm/@smithy+property-provider@2.1.1/node_modules/@smithy/property-provider/dist-es/CredentialsProviderError.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  CredentialsProviderError: function() { return CredentialsProviderError; }
});
/* harmony import */var _ProviderError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ProviderError */"./node_modules/.pnpm/@smithy+property-provider@2.1.1/node_modules/@smithy/property-provider/dist-es/ProviderError.js");

class CredentialsProviderError extends _ProviderError__WEBPACK_IMPORTED_MODULE_0__.ProviderError {
    constructor(message, tryNextLink = true){
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "CredentialsProviderError";
        Object.setPrototypeOf(this, CredentialsProviderError.prototype);
    }
}
}),
"./node_modules/.pnpm/@smithy+property-provider@2.1.1/node_modules/@smithy/property-provider/dist-es/ProviderError.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  ProviderError: function() { return ProviderError; }
});
class ProviderError extends Error {
    constructor(message, tryNextLink = true){
        super(message);
        this.tryNextLink = tryNextLink;
        this.name = "ProviderError";
        Object.setPrototypeOf(this, ProviderError.prototype);
    }
    static from(error, tryNextLink = true) {
        return Object.assign(new this(error.message, tryNextLink), error);
    }
}
}),
"./node_modules/.pnpm/@smithy+property-provider@2.1.1/node_modules/@smithy/property-provider/dist-es/TokenProviderError.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  TokenProviderError: function() { return TokenProviderError; }
});
/* harmony import */var _ProviderError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ProviderError */"./node_modules/.pnpm/@smithy+property-provider@2.1.1/node_modules/@smithy/property-provider/dist-es/ProviderError.js");

class TokenProviderError extends _ProviderError__WEBPACK_IMPORTED_MODULE_0__.ProviderError {
    constructor(message, tryNextLink = true){
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "TokenProviderError";
        Object.setPrototypeOf(this, TokenProviderError.prototype);
    }
}
}),
"./node_modules/.pnpm/@smithy+property-provider@2.1.1/node_modules/@smithy/property-provider/dist-es/chain.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  chain: function() { return chain; }
});
/* harmony import */var _ProviderError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ProviderError */"./node_modules/.pnpm/@smithy+property-provider@2.1.1/node_modules/@smithy/property-provider/dist-es/ProviderError.js");

const chain = (...providers)=>async ()=>{
        if (providers.length === 0) throw new _ProviderError__WEBPACK_IMPORTED_MODULE_0__.ProviderError("No providers in chain");
        let lastProviderError;
        for (const provider of providers)try {
            const credentials = await provider();
            return credentials;
        } catch (err) {
            lastProviderError = err;
            if (err?.tryNextLink) continue;
            throw err;
        }
        throw lastProviderError;
    };
}),
"./node_modules/.pnpm/@smithy+property-provider@2.1.1/node_modules/@smithy/property-provider/dist-es/fromStatic.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  fromStatic: function() { return fromStatic; }
});
const fromStatic = (staticValue)=>()=>Promise.resolve(staticValue);
}),
"./node_modules/.pnpm/@smithy+property-provider@2.1.1/node_modules/@smithy/property-provider/dist-es/memoize.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  memoize: function() { return memoize; }
});
const memoize = (provider, isExpired, requiresRefresh)=>{
    let resolved;
    let pending;
    let hasResult;
    let isConstant = false;
    const coalesceProvider = async ()=>{
        if (!pending) pending = provider();
        try {
            resolved = await pending;
            hasResult = true;
            isConstant = false;
        } finally{
            pending = undefined;
        }
        return resolved;
    };
    if (isExpired === undefined) return async (options)=>{
        if (!hasResult || options?.forceRefresh) resolved = await coalesceProvider();
        return resolved;
    };
    return async (options)=>{
        if (!hasResult || options?.forceRefresh) resolved = await coalesceProvider();
        if (isConstant) return resolved;
        if (requiresRefresh && !requiresRefresh(resolved)) {
            isConstant = true;
            return resolved;
        }
        if (isExpired(resolved)) {
            await coalesceProvider();
            return resolved;
        }
        return resolved;
    };
};
}),
"./node_modules/.pnpm/@smithy+protocol-http@3.1.1/node_modules/@smithy/protocol-http/dist-es/Field.js": (function (__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) {
"use strict";
/* harmony import */var _smithy_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/types */"./node_modules/.pnpm/@smithy+types@2.9.1/node_modules/@smithy/types/dist-es/index.js");

class Field {
    constructor({ name, kind = FieldPosition.HEADER, values = [] }){
        this.name = name;
        this.kind = kind;
        this.values = values;
    }
    add(value) {
        this.values.push(value);
    }
    set(values) {
        this.values = values;
    }
    remove(value) {
        this.values = this.values.filter((v)=>v !== value);
    }
    toString() {
        return this.values.map((v)=>v.includes(",") || v.includes(" ") ? `"${v}"` : v).join(", ");
    }
    get() {
        return this.values;
    }
}
}),
"./node_modules/.pnpm/@smithy+protocol-http@3.1.1/node_modules/@smithy/protocol-http/dist-es/extensions/httpExtensionConfiguration.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getHttpHandlerExtensionConfiguration: function() { return getHttpHandlerExtensionConfiguration; },
  resolveHttpHandlerRuntimeConfig: function() { return resolveHttpHandlerRuntimeConfig; }
});
const getHttpHandlerExtensionConfiguration = (runtimeConfig)=>{
    let httpHandler = runtimeConfig.httpHandler;
    return {
        setHttpHandler (handler) {
            httpHandler = handler;
        },
        httpHandler () {
            return httpHandler;
        },
        updateHttpClientConfig (key, value) {
            httpHandler.updateHttpClientConfig(key, value);
        },
        httpHandlerConfigs () {
            return httpHandler.httpHandlerConfigs();
        }
    };
};
const resolveHttpHandlerRuntimeConfig = (httpHandlerExtensionConfiguration)=>{
    return {
        httpHandler: httpHandlerExtensionConfiguration.httpHandler()
    };
};
}),
"./node_modules/.pnpm/@smithy+protocol-http@3.1.1/node_modules/@smithy/protocol-http/dist-es/extensions/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getHttpHandlerExtensionConfiguration: function() { return /* reexport safe */ _httpExtensionConfiguration__WEBPACK_IMPORTED_MODULE_0__.getHttpHandlerExtensionConfiguration; },
  resolveHttpHandlerRuntimeConfig: function() { return /* reexport safe */ _httpExtensionConfiguration__WEBPACK_IMPORTED_MODULE_0__.resolveHttpHandlerRuntimeConfig; }
});
/* harmony import */var _httpExtensionConfiguration__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./httpExtensionConfiguration */"./node_modules/.pnpm/@smithy+protocol-http@3.1.1/node_modules/@smithy/protocol-http/dist-es/extensions/httpExtensionConfiguration.js");

}),
"./node_modules/.pnpm/@smithy+protocol-http@3.1.1/node_modules/@smithy/protocol-http/dist-es/httpRequest.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  HttpRequest: function() { return HttpRequest; }
});
class HttpRequest {
    constructor(options){
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol ? options.protocol.slice(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
        this.path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
        this.username = options.username;
        this.password = options.password;
        this.fragment = options.fragment;
    }
    static isInstance(request) {
        if (!request) return false;
        const req = request;
        return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
    }
    clone() {
        const cloned = new HttpRequest({
            ...this,
            headers: {
                ...this.headers
            }
        });
        if (cloned.query) cloned.query = cloneQuery(cloned.query);
        return cloned;
    }
}
function cloneQuery(query) {
    return Object.keys(query).reduce((carry, paramName)=>{
        const param = query[paramName];
        return {
            ...carry,
            [paramName]: Array.isArray(param) ? [
                ...param
            ] : param
        };
    }, {});
}
}),
"./node_modules/.pnpm/@smithy+protocol-http@3.1.1/node_modules/@smithy/protocol-http/dist-es/httpResponse.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  HttpResponse: function() { return HttpResponse; }
});
class HttpResponse {
    constructor(options){
        this.statusCode = options.statusCode;
        this.reason = options.reason;
        this.headers = options.headers || {};
        this.body = options.body;
    }
    static isInstance(response) {
        if (!response) return false;
        const resp = response;
        return typeof resp.statusCode === "number" && typeof resp.headers === "object";
    }
}
}),
"./node_modules/.pnpm/@smithy+protocol-http@3.1.1/node_modules/@smithy/protocol-http/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  HttpRequest: function() { return /* reexport safe */ _httpRequest__WEBPACK_IMPORTED_MODULE_4__.HttpRequest; },
  HttpResponse: function() { return /* reexport safe */ _httpResponse__WEBPACK_IMPORTED_MODULE_5__.HttpResponse; },
  getHttpHandlerExtensionConfiguration: function() { return /* reexport safe */ _extensions__WEBPACK_IMPORTED_MODULE_0__.getHttpHandlerExtensionConfiguration; },
  resolveHttpHandlerRuntimeConfig: function() { return /* reexport safe */ _extensions__WEBPACK_IMPORTED_MODULE_0__.resolveHttpHandlerRuntimeConfig; }
});
/* harmony import */var _extensions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./extensions */"./node_modules/.pnpm/@smithy+protocol-http@3.1.1/node_modules/@smithy/protocol-http/dist-es/extensions/index.js");
/* harmony import */var _Field__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Field */"./node_modules/.pnpm/@smithy+protocol-http@3.1.1/node_modules/@smithy/protocol-http/dist-es/Field.js");
/* harmony import */var _httpRequest__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./httpRequest */"./node_modules/.pnpm/@smithy+protocol-http@3.1.1/node_modules/@smithy/protocol-http/dist-es/httpRequest.js");
/* harmony import */var _httpResponse__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./httpResponse */"./node_modules/.pnpm/@smithy+protocol-http@3.1.1/node_modules/@smithy/protocol-http/dist-es/httpResponse.js");








}),
"./node_modules/.pnpm/@smithy+querystring-builder@2.1.1/node_modules/@smithy/querystring-builder/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  buildQueryString: function() { return buildQueryString; }
});
/* harmony import */var _smithy_util_uri_escape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/util-uri-escape */"./node_modules/.pnpm/@smithy+util-uri-escape@2.1.1/node_modules/@smithy/util-uri-escape/dist-es/escape-uri.js");

function buildQueryString(query) {
    const parts = [];
    for (let key of Object.keys(query).sort()){
        const value = query[key];
        key = (0, _smithy_util_uri_escape__WEBPACK_IMPORTED_MODULE_0__.escapeUri)(key);
        if (Array.isArray(value)) for(let i = 0, iLen = value.length; i < iLen; i++)parts.push(`${key}=${(0, _smithy_util_uri_escape__WEBPACK_IMPORTED_MODULE_0__.escapeUri)(value[i])}`);
        else {
            let qsEntry = key;
            if (value || typeof value === "string") qsEntry += `=${(0, _smithy_util_uri_escape__WEBPACK_IMPORTED_MODULE_0__.escapeUri)(value)}`;
            parts.push(qsEntry);
        }
    }
    return parts.join("&");
}
}),
"./node_modules/.pnpm/@smithy+querystring-parser@2.1.1/node_modules/@smithy/querystring-parser/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  parseQueryString: function() { return parseQueryString; }
});
function parseQueryString(querystring) {
    const query = {};
    querystring = querystring.replace(/^\?/, "");
    if (querystring) for (const pair of querystring.split("&")){
        let [key, value = null] = pair.split("=");
        key = decodeURIComponent(key);
        if (value) value = decodeURIComponent(value);
        if (!(key in query)) query[key] = value;
        else if (Array.isArray(query[key])) query[key].push(value);
        else query[key] = [
            query[key],
            value
        ];
    }
    return query;
}
}),
"./node_modules/.pnpm/@smithy+service-error-classification@2.1.1/node_modules/@smithy/service-error-classification/dist-es/constants.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  NODEJS_TIMEOUT_ERROR_CODES: function() { return NODEJS_TIMEOUT_ERROR_CODES; },
  THROTTLING_ERROR_CODES: function() { return THROTTLING_ERROR_CODES; },
  TRANSIENT_ERROR_CODES: function() { return TRANSIENT_ERROR_CODES; },
  TRANSIENT_ERROR_STATUS_CODES: function() { return TRANSIENT_ERROR_STATUS_CODES; }
});
const CLOCK_SKEW_ERROR_CODES = (/* unused pure expression or super */ null && ([
    "AuthFailure",
    "InvalidSignatureException",
    "RequestExpired",
    "RequestInTheFuture",
    "RequestTimeTooSkewed",
    "SignatureDoesNotMatch"
]));
const THROTTLING_ERROR_CODES = [
    "BandwidthLimitExceeded",
    "EC2ThrottledException",
    "LimitExceededException",
    "PriorRequestNotComplete",
    "ProvisionedThroughputExceededException",
    "RequestLimitExceeded",
    "RequestThrottled",
    "RequestThrottledException",
    "SlowDown",
    "ThrottledException",
    "Throttling",
    "ThrottlingException",
    "TooManyRequestsException",
    "TransactionInProgressException"
];
const TRANSIENT_ERROR_CODES = [
    "TimeoutError",
    "RequestTimeout",
    "RequestTimeoutException"
];
const TRANSIENT_ERROR_STATUS_CODES = [
    500,
    502,
    503,
    504
];
const NODEJS_TIMEOUT_ERROR_CODES = [
    "ECONNRESET",
    "ECONNREFUSED",
    "EPIPE",
    "ETIMEDOUT"
];
}),
"./node_modules/.pnpm/@smithy+service-error-classification@2.1.1/node_modules/@smithy/service-error-classification/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  isServerError: function() { return isServerError; },
  isThrottlingError: function() { return isThrottlingError; },
  isTransientError: function() { return isTransientError; }
});
/* harmony import */var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */"./node_modules/.pnpm/@smithy+service-error-classification@2.1.1/node_modules/@smithy/service-error-classification/dist-es/constants.js");

const isRetryableByTrait = (error)=>error.$retryable !== undefined;
const isClockSkewError = (error)=>CLOCK_SKEW_ERROR_CODES.includes(error.name);
const isThrottlingError = (error)=>error.$metadata?.httpStatusCode === 429 || _constants__WEBPACK_IMPORTED_MODULE_0__.THROTTLING_ERROR_CODES.includes(error.name) || error.$retryable?.throttling == true;
const isTransientError = (error)=>_constants__WEBPACK_IMPORTED_MODULE_0__.TRANSIENT_ERROR_CODES.includes(error.name) || _constants__WEBPACK_IMPORTED_MODULE_0__.NODEJS_TIMEOUT_ERROR_CODES.includes(error?.code || "") || _constants__WEBPACK_IMPORTED_MODULE_0__.TRANSIENT_ERROR_STATUS_CODES.includes(error.$metadata?.httpStatusCode || 0);
const isServerError = (error)=>{
    if (error.$metadata?.httpStatusCode !== undefined) {
        const statusCode = error.$metadata.httpStatusCode;
        if (500 <= statusCode && statusCode <= 599 && !isTransientError(error)) return true;
        return false;
    }
    return false;
};
}),
"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/getConfigData.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getConfigData: function() { return getConfigData; }
});
/* harmony import */var _smithy_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/types */"./node_modules/.pnpm/@smithy+types@2.9.1/node_modules/@smithy/types/dist-es/index.js");
/* harmony import */var _loadSharedConfigFiles__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadSharedConfigFiles */"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/loadSharedConfigFiles.js");


const getConfigData = (data)=>Object.entries(data).filter(([key])=>{
        const indexOfSeparator = key.indexOf(_loadSharedConfigFiles__WEBPACK_IMPORTED_MODULE_1__.CONFIG_PREFIX_SEPARATOR);
        if (indexOfSeparator === -1) return false;
        return Object.values(_smithy_types__WEBPACK_IMPORTED_MODULE_0__.IniSectionType).includes(key.substring(0, indexOfSeparator));
    }).reduce((acc, [key, value])=>{
        const indexOfSeparator = key.indexOf(_loadSharedConfigFiles__WEBPACK_IMPORTED_MODULE_1__.CONFIG_PREFIX_SEPARATOR);
        const updatedKey = key.substring(0, indexOfSeparator) === _smithy_types__WEBPACK_IMPORTED_MODULE_0__.IniSectionType.PROFILE ? key.substring(indexOfSeparator + 1) : key;
        acc[updatedKey] = value;
        return acc;
    }, {
        ...data.default && {
            default: data.default
        }
    });
}),
"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/getConfigFilepath.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getConfigFilepath: function() { return getConfigFilepath; }
});
/* harmony import */var path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! path */"path");
/* harmony import */var path__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */var _getHomeDir__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getHomeDir */"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/getHomeDir.js");


const ENV_CONFIG_PATH = "AWS_CONFIG_FILE";
const getConfigFilepath = ()=>process.env[ENV_CONFIG_PATH] || (0, path__WEBPACK_IMPORTED_MODULE_0__.join)((0, _getHomeDir__WEBPACK_IMPORTED_MODULE_1__.getHomeDir)(), ".aws", "config");
}),
"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/getCredentialsFilepath.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getCredentialsFilepath: function() { return getCredentialsFilepath; }
});
/* harmony import */var path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! path */"path");
/* harmony import */var path__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */var _getHomeDir__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getHomeDir */"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/getHomeDir.js");


const ENV_CREDENTIALS_PATH = "AWS_SHARED_CREDENTIALS_FILE";
const getCredentialsFilepath = ()=>process.env[ENV_CREDENTIALS_PATH] || (0, path__WEBPACK_IMPORTED_MODULE_0__.join)((0, _getHomeDir__WEBPACK_IMPORTED_MODULE_1__.getHomeDir)(), ".aws", "credentials");
}),
"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/getHomeDir.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getHomeDir: function() { return getHomeDir; }
});
/* harmony import */var os__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! os */"os");
/* harmony import */var os__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(os__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */"path");
/* harmony import */var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);


const homeDirCache = {};
const getHomeDirCacheKey = ()=>{
    if (process && process.geteuid) return `${process.geteuid()}`;
    return "DEFAULT";
};
const getHomeDir = ()=>{
    const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${path__WEBPACK_IMPORTED_MODULE_1__.sep}` } = process.env;
    if (HOME) return HOME;
    if (USERPROFILE) return USERPROFILE;
    if (HOMEPATH) return `${HOMEDRIVE}${HOMEPATH}`;
    const homeDirCacheKey = getHomeDirCacheKey();
    if (!homeDirCache[homeDirCacheKey]) homeDirCache[homeDirCacheKey] = (0, os__WEBPACK_IMPORTED_MODULE_0__.homedir)();
    return homeDirCache[homeDirCacheKey];
};
}),
"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/getProfileName.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  ENV_PROFILE: function() { return ENV_PROFILE; },
  getProfileName: function() { return getProfileName; }
});
const ENV_PROFILE = "AWS_PROFILE";
const DEFAULT_PROFILE = "default";
const getProfileName = (init)=>init.profile || process.env[ENV_PROFILE] || DEFAULT_PROFILE;
}),
"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/getSSOTokenFilepath.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getSSOTokenFilepath: function() { return getSSOTokenFilepath; }
});
/* harmony import */var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */"crypto");
/* harmony import */var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */"path");
/* harmony import */var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */var _getHomeDir__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getHomeDir */"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/getHomeDir.js");



const getSSOTokenFilepath = (id)=>{
    const hasher = (0, crypto__WEBPACK_IMPORTED_MODULE_0__.createHash)("sha1");
    const cacheName = hasher.update(id).digest("hex");
    return (0, path__WEBPACK_IMPORTED_MODULE_1__.join)((0, _getHomeDir__WEBPACK_IMPORTED_MODULE_2__.getHomeDir)(), ".aws", "sso", "cache", `${cacheName}.json`);
};
}),
"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/getSSOTokenFromFile.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getSSOTokenFromFile: function() { return getSSOTokenFromFile; }
});
/* harmony import */var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */"fs");
/* harmony import */var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */var _getSSOTokenFilepath__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getSSOTokenFilepath */"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/getSSOTokenFilepath.js");


const { readFile } = fs__WEBPACK_IMPORTED_MODULE_0__.promises;
const getSSOTokenFromFile = async (id)=>{
    const ssoTokenFilepath = (0, _getSSOTokenFilepath__WEBPACK_IMPORTED_MODULE_1__.getSSOTokenFilepath)(id);
    const ssoTokenText = await readFile(ssoTokenFilepath, "utf8");
    return JSON.parse(ssoTokenText);
};
}),
"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/getSsoSessionData.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getSsoSessionData: function() { return getSsoSessionData; }
});
/* harmony import */var _smithy_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/types */"./node_modules/.pnpm/@smithy+types@2.9.1/node_modules/@smithy/types/dist-es/index.js");
/* harmony import */var _loadSharedConfigFiles__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadSharedConfigFiles */"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/loadSharedConfigFiles.js");


const getSsoSessionData = (data)=>Object.entries(data).filter(([key])=>key.startsWith(_smithy_types__WEBPACK_IMPORTED_MODULE_0__.IniSectionType.SSO_SESSION + _loadSharedConfigFiles__WEBPACK_IMPORTED_MODULE_1__.CONFIG_PREFIX_SEPARATOR)).reduce((acc, [key, value])=>({
            ...acc,
            [key.split(_loadSharedConfigFiles__WEBPACK_IMPORTED_MODULE_1__.CONFIG_PREFIX_SEPARATOR)[1]]: value
        }), {});
}),
"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  CONFIG_PREFIX_SEPARATOR: function() { return /* reexport safe */ _loadSharedConfigFiles__WEBPACK_IMPORTED_MODULE_4__.CONFIG_PREFIX_SEPARATOR; },
  ENV_PROFILE: function() { return /* reexport safe */ _getProfileName__WEBPACK_IMPORTED_MODULE_1__.ENV_PROFILE; },
  getProfileName: function() { return /* reexport safe */ _getProfileName__WEBPACK_IMPORTED_MODULE_1__.getProfileName; },
  getSSOTokenFilepath: function() { return /* reexport safe */ _getSSOTokenFilepath__WEBPACK_IMPORTED_MODULE_2__.getSSOTokenFilepath; },
  getSSOTokenFromFile: function() { return /* reexport safe */ _getSSOTokenFromFile__WEBPACK_IMPORTED_MODULE_3__.getSSOTokenFromFile; },
  loadSharedConfigFiles: function() { return /* reexport safe */ _loadSharedConfigFiles__WEBPACK_IMPORTED_MODULE_4__.loadSharedConfigFiles; },
  loadSsoSessionData: function() { return /* reexport safe */ _loadSsoSessionData__WEBPACK_IMPORTED_MODULE_5__.loadSsoSessionData; },
  parseKnownFiles: function() { return /* reexport safe */ _parseKnownFiles__WEBPACK_IMPORTED_MODULE_6__.parseKnownFiles; }
});
/* harmony import */var _getHomeDir__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getHomeDir */"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/getHomeDir.js");
/* harmony import */var _getProfileName__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getProfileName */"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/getProfileName.js");
/* harmony import */var _getSSOTokenFilepath__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getSSOTokenFilepath */"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/getSSOTokenFilepath.js");
/* harmony import */var _getSSOTokenFromFile__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getSSOTokenFromFile */"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/getSSOTokenFromFile.js");
/* harmony import */var _loadSharedConfigFiles__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./loadSharedConfigFiles */"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/loadSharedConfigFiles.js");
/* harmony import */var _loadSsoSessionData__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./loadSsoSessionData */"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/loadSsoSessionData.js");
/* harmony import */var _parseKnownFiles__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./parseKnownFiles */"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/parseKnownFiles.js");








}),
"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/loadSharedConfigFiles.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  CONFIG_PREFIX_SEPARATOR: function() { return CONFIG_PREFIX_SEPARATOR; },
  loadSharedConfigFiles: function() { return loadSharedConfigFiles; }
});
/* harmony import */var _getConfigData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getConfigData */"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/getConfigData.js");
/* harmony import */var _getConfigFilepath__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getConfigFilepath */"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/getConfigFilepath.js");
/* harmony import */var _getCredentialsFilepath__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getCredentialsFilepath */"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/getCredentialsFilepath.js");
/* harmony import */var _parseIni__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./parseIni */"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/parseIni.js");
/* harmony import */var _slurpFile__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./slurpFile */"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/slurpFile.js");





const swallowError = ()=>({});
const CONFIG_PREFIX_SEPARATOR = ".";
const loadSharedConfigFiles = async (init = {})=>{
    const { filepath = (0, _getCredentialsFilepath__WEBPACK_IMPORTED_MODULE_2__.getCredentialsFilepath)(), configFilepath = (0, _getConfigFilepath__WEBPACK_IMPORTED_MODULE_1__.getConfigFilepath)() } = init;
    const parsedFiles = await Promise.all([
        (0, _slurpFile__WEBPACK_IMPORTED_MODULE_4__.slurpFile)(configFilepath, {
            ignoreCache: init.ignoreCache
        }).then(_parseIni__WEBPACK_IMPORTED_MODULE_3__.parseIni).then(_getConfigData__WEBPACK_IMPORTED_MODULE_0__.getConfigData).catch(swallowError),
        (0, _slurpFile__WEBPACK_IMPORTED_MODULE_4__.slurpFile)(filepath, {
            ignoreCache: init.ignoreCache
        }).then(_parseIni__WEBPACK_IMPORTED_MODULE_3__.parseIni).catch(swallowError)
    ]);
    return {
        configFile: parsedFiles[0],
        credentialsFile: parsedFiles[1]
    };
};
}),
"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/loadSsoSessionData.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  loadSsoSessionData: function() { return loadSsoSessionData; }
});
/* harmony import */var _getConfigFilepath__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getConfigFilepath */"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/getConfigFilepath.js");
/* harmony import */var _getSsoSessionData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getSsoSessionData */"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/getSsoSessionData.js");
/* harmony import */var _parseIni__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./parseIni */"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/parseIni.js");
/* harmony import */var _slurpFile__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./slurpFile */"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/slurpFile.js");




const swallowError = ()=>({});
const loadSsoSessionData = async (init = {})=>(0, _slurpFile__WEBPACK_IMPORTED_MODULE_3__.slurpFile)(init.configFilepath ?? (0, _getConfigFilepath__WEBPACK_IMPORTED_MODULE_0__.getConfigFilepath)()).then(_parseIni__WEBPACK_IMPORTED_MODULE_2__.parseIni).then(_getSsoSessionData__WEBPACK_IMPORTED_MODULE_1__.getSsoSessionData).catch(swallowError);
}),
"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/mergeConfigFiles.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  mergeConfigFiles: function() { return mergeConfigFiles; }
});
const mergeConfigFiles = (...files)=>{
    const merged = {};
    for (const file of files){
        for (const [key, values] of Object.entries(file))if (merged[key] !== undefined) Object.assign(merged[key], values);
        else merged[key] = values;
    }
    return merged;
};
}),
"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/parseIni.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  parseIni: function() { return parseIni; }
});
/* harmony import */var _smithy_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/types */"./node_modules/.pnpm/@smithy+types@2.9.1/node_modules/@smithy/types/dist-es/index.js");
/* harmony import */var _loadSharedConfigFiles__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadSharedConfigFiles */"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/loadSharedConfigFiles.js");


const prefixKeyRegex = /^([\w-]+)\s(["'])?([\w-@\+\.%:/]+)\2$/;
const profileNameBlockList = [
    "__proto__",
    "profile __proto__"
];
const parseIni = (iniData)=>{
    const map = {};
    let currentSection;
    let currentSubSection;
    for (const iniLine of iniData.split(/\r?\n/)){
        const trimmedLine = iniLine.split(/(^|\s)[;#]/)[0].trim();
        const isSection = trimmedLine[0] === "[" && trimmedLine[trimmedLine.length - 1] === "]";
        if (isSection) {
            currentSection = undefined;
            currentSubSection = undefined;
            const sectionName = trimmedLine.substring(1, trimmedLine.length - 1);
            const matches = prefixKeyRegex.exec(sectionName);
            if (matches) {
                const [, prefix, , name] = matches;
                if (Object.values(_smithy_types__WEBPACK_IMPORTED_MODULE_0__.IniSectionType).includes(prefix)) currentSection = [
                    prefix,
                    name
                ].join(_loadSharedConfigFiles__WEBPACK_IMPORTED_MODULE_1__.CONFIG_PREFIX_SEPARATOR);
            } else currentSection = sectionName;
            if (profileNameBlockList.includes(sectionName)) throw new Error(`Found invalid profile name "${sectionName}"`);
        } else if (currentSection) {
            const indexOfEqualsSign = trimmedLine.indexOf("=");
            if (![
                0,
                -1
            ].includes(indexOfEqualsSign)) {
                const [name, value] = [
                    trimmedLine.substring(0, indexOfEqualsSign).trim(),
                    trimmedLine.substring(indexOfEqualsSign + 1).trim()
                ];
                if (value === "") currentSubSection = name;
                else {
                    if (currentSubSection && iniLine.trimStart() === iniLine) currentSubSection = undefined;
                    map[currentSection] = map[currentSection] || {};
                    const key = currentSubSection ? [
                        currentSubSection,
                        name
                    ].join(_loadSharedConfigFiles__WEBPACK_IMPORTED_MODULE_1__.CONFIG_PREFIX_SEPARATOR) : name;
                    map[currentSection][key] = value;
                }
            }
        }
    }
    return map;
};
}),
"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/parseKnownFiles.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  parseKnownFiles: function() { return parseKnownFiles; }
});
/* harmony import */var _loadSharedConfigFiles__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadSharedConfigFiles */"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/loadSharedConfigFiles.js");
/* harmony import */var _mergeConfigFiles__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mergeConfigFiles */"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/mergeConfigFiles.js");


const parseKnownFiles = async (init)=>{
    const parsedFiles = await (0, _loadSharedConfigFiles__WEBPACK_IMPORTED_MODULE_0__.loadSharedConfigFiles)(init);
    return (0, _mergeConfigFiles__WEBPACK_IMPORTED_MODULE_1__.mergeConfigFiles)(parsedFiles.configFile, parsedFiles.credentialsFile);
};
}),
"./node_modules/.pnpm/@smithy+shared-ini-file-loader@2.3.1/node_modules/@smithy/shared-ini-file-loader/dist-es/slurpFile.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  slurpFile: function() { return slurpFile; }
});
/* harmony import */var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */"fs");
/* harmony import */var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);

const { readFile } = fs__WEBPACK_IMPORTED_MODULE_0__.promises;
const filePromisesHash = {};
const slurpFile = (path, options)=>{
    if (!filePromisesHash[path] || options?.ignoreCache) filePromisesHash[path] = readFile(path, "utf8");
    return filePromisesHash[path];
};
}),
"./node_modules/.pnpm/@smithy+signature-v4@2.1.1/node_modules/@smithy/signature-v4/dist-es/SignatureV4.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  SignatureV4: function() { return SignatureV4; }
});
/* harmony import */var _smithy_eventstream_codec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/eventstream-codec */"./node_modules/.pnpm/@smithy+eventstream-codec@2.1.1/node_modules/@smithy/eventstream-codec/dist-es/index.js");
/* harmony import */var _smithy_util_hex_encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/util-hex-encoding */"./node_modules/.pnpm/@smithy+util-hex-encoding@2.1.1/node_modules/@smithy/util-hex-encoding/dist-es/index.js");
/* harmony import */var _smithy_util_middleware__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @smithy/util-middleware */"./node_modules/.pnpm/@smithy+util-middleware@2.1.1/node_modules/@smithy/util-middleware/dist-es/index.js");
/* harmony import */var _smithy_util_utf8__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @smithy/util-utf8 */"./node_modules/.pnpm/@smithy+util-utf8@2.1.1/node_modules/@smithy/util-utf8/dist-es/index.js");
/* harmony import */var _constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constants */"./node_modules/.pnpm/@smithy+signature-v4@2.1.1/node_modules/@smithy/signature-v4/dist-es/constants.js");
/* harmony import */var _credentialDerivation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./credentialDerivation */"./node_modules/.pnpm/@smithy+signature-v4@2.1.1/node_modules/@smithy/signature-v4/dist-es/credentialDerivation.js");
/* harmony import */var _getCanonicalHeaders__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./getCanonicalHeaders */"./node_modules/.pnpm/@smithy+signature-v4@2.1.1/node_modules/@smithy/signature-v4/dist-es/getCanonicalHeaders.js");
/* harmony import */var _getCanonicalQuery__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./getCanonicalQuery */"./node_modules/.pnpm/@smithy+signature-v4@2.1.1/node_modules/@smithy/signature-v4/dist-es/getCanonicalQuery.js");
/* harmony import */var _getPayloadHash__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./getPayloadHash */"./node_modules/.pnpm/@smithy+signature-v4@2.1.1/node_modules/@smithy/signature-v4/dist-es/getPayloadHash.js");
/* harmony import */var _headerUtil__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./headerUtil */"./node_modules/.pnpm/@smithy+signature-v4@2.1.1/node_modules/@smithy/signature-v4/dist-es/headerUtil.js");
/* harmony import */var _moveHeadersToQuery__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./moveHeadersToQuery */"./node_modules/.pnpm/@smithy+signature-v4@2.1.1/node_modules/@smithy/signature-v4/dist-es/moveHeadersToQuery.js");
/* harmony import */var _prepareRequest__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./prepareRequest */"./node_modules/.pnpm/@smithy+signature-v4@2.1.1/node_modules/@smithy/signature-v4/dist-es/prepareRequest.js");
/* harmony import */var _utilDate__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./utilDate */"./node_modules/.pnpm/@smithy+signature-v4@2.1.1/node_modules/@smithy/signature-v4/dist-es/utilDate.js");













class SignatureV4 {
    constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true }){
        this.headerMarshaller = new _smithy_eventstream_codec__WEBPACK_IMPORTED_MODULE_0__.HeaderMarshaller(_smithy_util_utf8__WEBPACK_IMPORTED_MODULE_3__.toUtf8, _smithy_util_utf8__WEBPACK_IMPORTED_MODULE_3__.fromUtf8);
        this.service = service;
        this.sha256 = sha256;
        this.uriEscapePath = uriEscapePath;
        this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
        this.regionProvider = (0, _smithy_util_middleware__WEBPACK_IMPORTED_MODULE_2__.normalizeProvider)(region);
        this.credentialProvider = (0, _smithy_util_middleware__WEBPACK_IMPORTED_MODULE_2__.normalizeProvider)(credentials);
    }
    async presign(originalRequest, options = {}) {
        const { signingDate = new Date(), expiresIn = 3600, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService } = options;
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? await this.regionProvider();
        const { longDate, shortDate } = formatDate(signingDate);
        if (expiresIn > _constants__WEBPACK_IMPORTED_MODULE_4__.MAX_PRESIGNED_TTL) return Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future");
        const scope = (0, _credentialDerivation__WEBPACK_IMPORTED_MODULE_5__.createScope)(shortDate, region, signingService ?? this.service);
        const request = (0, _moveHeadersToQuery__WEBPACK_IMPORTED_MODULE_10__.moveHeadersToQuery)((0, _prepareRequest__WEBPACK_IMPORTED_MODULE_9__.prepareRequest)(originalRequest), {
            unhoistableHeaders
        });
        if (credentials.sessionToken) request.query[_constants__WEBPACK_IMPORTED_MODULE_4__.TOKEN_QUERY_PARAM] = credentials.sessionToken;
        request.query[_constants__WEBPACK_IMPORTED_MODULE_4__.ALGORITHM_QUERY_PARAM] = _constants__WEBPACK_IMPORTED_MODULE_4__.ALGORITHM_IDENTIFIER;
        request.query[_constants__WEBPACK_IMPORTED_MODULE_4__.CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;
        request.query[_constants__WEBPACK_IMPORTED_MODULE_4__.AMZ_DATE_QUERY_PARAM] = longDate;
        request.query[_constants__WEBPACK_IMPORTED_MODULE_4__.EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
        const canonicalHeaders = (0, _getCanonicalHeaders__WEBPACK_IMPORTED_MODULE_6__.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
        request.query[_constants__WEBPACK_IMPORTED_MODULE_4__.SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
        request.query[_constants__WEBPACK_IMPORTED_MODULE_4__.SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await (0, _getPayloadHash__WEBPACK_IMPORTED_MODULE_8__.getPayloadHash)(originalRequest, this.sha256)));
        return request;
    }
    async sign(toSign, options) {
        if (typeof toSign === "string") return this.signString(toSign, options);
        else if (toSign.headers && toSign.payload) return this.signEvent(toSign, options);
        else if (toSign.message) return this.signMessage(toSign, options);
        else return this.signRequest(toSign, options);
    }
    async signEvent({ headers, payload }, { signingDate = new Date(), priorSignature, signingRegion, signingService }) {
        const region = signingRegion ?? await this.regionProvider();
        const { shortDate, longDate } = formatDate(signingDate);
        const scope = (0, _credentialDerivation__WEBPACK_IMPORTED_MODULE_5__.createScope)(shortDate, region, signingService ?? this.service);
        const hashedPayload = await (0, _getPayloadHash__WEBPACK_IMPORTED_MODULE_8__.getPayloadHash)({
            headers: {},
            body: payload
        }, this.sha256);
        const hash = new this.sha256();
        hash.update(headers);
        const hashedHeaders = (0, _smithy_util_hex_encoding__WEBPACK_IMPORTED_MODULE_1__.toHex)(await hash.digest());
        const stringToSign = [
            (0, _constants__WEBPACK_IMPORTED_MODULE_4__.EVENT_ALGORITHM_IDENTIFIER),
            longDate,
            scope,
            priorSignature,
            hashedHeaders,
            hashedPayload
        ].join("\n");
        return this.signString(stringToSign, {
            signingDate,
            signingRegion: region,
            signingService
        });
    }
    async signMessage(signableMessage, { signingDate = new Date(), signingRegion, signingService }) {
        const promise = this.signEvent({
            headers: this.headerMarshaller.format(signableMessage.message.headers),
            payload: signableMessage.message.body
        }, {
            signingDate,
            signingRegion,
            signingService,
            priorSignature: signableMessage.priorSignature
        });
        return promise.then((signature)=>{
            return {
                message: signableMessage.message,
                signature
            };
        });
    }
    async signString(stringToSign, { signingDate = new Date(), signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? await this.regionProvider();
        const { shortDate } = formatDate(signingDate);
        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));
        hash.update((0, _smithy_util_utf8__WEBPACK_IMPORTED_MODULE_3__.toUint8Array)(stringToSign));
        return (0, _smithy_util_hex_encoding__WEBPACK_IMPORTED_MODULE_1__.toHex)(await hash.digest());
    }
    async signRequest(requestToSign, { signingDate = new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? await this.regionProvider();
        const request = (0, _prepareRequest__WEBPACK_IMPORTED_MODULE_9__.prepareRequest)(requestToSign);
        const { longDate, shortDate } = formatDate(signingDate);
        const scope = (0, _credentialDerivation__WEBPACK_IMPORTED_MODULE_5__.createScope)(shortDate, region, signingService ?? this.service);
        request.headers[_constants__WEBPACK_IMPORTED_MODULE_4__.AMZ_DATE_HEADER] = longDate;
        if (credentials.sessionToken) request.headers[_constants__WEBPACK_IMPORTED_MODULE_4__.TOKEN_HEADER] = credentials.sessionToken;
        const payloadHash = await (0, _getPayloadHash__WEBPACK_IMPORTED_MODULE_8__.getPayloadHash)(request, this.sha256);
        if (!(0, _headerUtil__WEBPACK_IMPORTED_MODULE_11__.hasHeader)(_constants__WEBPACK_IMPORTED_MODULE_4__.SHA256_HEADER, request.headers) && this.applyChecksum) request.headers[_constants__WEBPACK_IMPORTED_MODULE_4__.SHA256_HEADER] = payloadHash;
        const canonicalHeaders = (0, _getCanonicalHeaders__WEBPACK_IMPORTED_MODULE_6__.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
        const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));
        request.headers[_constants__WEBPACK_IMPORTED_MODULE_4__.AUTH_HEADER] = `${_constants__WEBPACK_IMPORTED_MODULE_4__.ALGORITHM_IDENTIFIER} ` + `Credential=${credentials.accessKeyId}/${scope}, ` + `SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, ` + `Signature=${signature}`;
        return request;
    }
    createCanonicalRequest(request, canonicalHeaders, payloadHash) {
        const sortedHeaders = Object.keys(canonicalHeaders).sort();
        return `${request.method}
${this.getCanonicalPath(request)}
${(0, _getCanonicalQuery__WEBPACK_IMPORTED_MODULE_7__.getCanonicalQuery)(request)}
${sortedHeaders.map((name)=>`${name}:${canonicalHeaders[name]}`).join("\n")}

${sortedHeaders.join(";")}
${payloadHash}`;
    }
    async createStringToSign(longDate, credentialScope, canonicalRequest) {
        const hash = new this.sha256();
        hash.update((0, _smithy_util_utf8__WEBPACK_IMPORTED_MODULE_3__.toUint8Array)(canonicalRequest));
        const hashedRequest = await hash.digest();
        return `${_constants__WEBPACK_IMPORTED_MODULE_4__.ALGORITHM_IDENTIFIER}
${longDate}
${credentialScope}
${(0, _smithy_util_hex_encoding__WEBPACK_IMPORTED_MODULE_1__.toHex)(hashedRequest)}`;
    }
    getCanonicalPath({ path }) {
        if (this.uriEscapePath) {
            const normalizedPathSegments = [];
            for (const pathSegment of path.split("/")){
                if (pathSegment?.length === 0) continue;
                if (pathSegment === ".") continue;
                if (pathSegment === "..") normalizedPathSegments.pop();
                else normalizedPathSegments.push(pathSegment);
            }
            const normalizedPath = `${path?.startsWith("/") ? "/" : ""}${normalizedPathSegments.join("/")}${normalizedPathSegments.length > 0 && path?.endsWith("/") ? "/" : ""}`;
            const doubleEncoded = encodeURIComponent(normalizedPath);
            return doubleEncoded.replace(/%2F/g, "/");
        }
        return path;
    }
    async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {
        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);
        const hash = new this.sha256(await keyPromise);
        hash.update((0, _smithy_util_utf8__WEBPACK_IMPORTED_MODULE_3__.toUint8Array)(stringToSign));
        return (0, _smithy_util_hex_encoding__WEBPACK_IMPORTED_MODULE_1__.toHex)(await hash.digest());
    }
    getSigningKey(credentials, region, shortDate, service) {
        return (0, _credentialDerivation__WEBPACK_IMPORTED_MODULE_5__.getSigningKey)(this.sha256, credentials, shortDate, region, service || this.service);
    }
    validateResolvedCredentials(credentials) {
        if (typeof credentials !== "object" || typeof credentials.accessKeyId !== "string" || typeof credentials.secretAccessKey !== "string") throw new Error("Resolved credential object is not valid");
    }
}
const formatDate = (now)=>{
    const longDate = (0, _utilDate__WEBPACK_IMPORTED_MODULE_12__.iso8601)(now).replace(/[\-:]/g, "");
    return {
        longDate,
        shortDate: longDate.slice(0, 8)
    };
};
const getCanonicalHeaderList = (headers)=>Object.keys(headers).sort().join(";");
}),
"./node_modules/.pnpm/@smithy+signature-v4@2.1.1/node_modules/@smithy/signature-v4/dist-es/cloneRequest.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  cloneRequest: function() { return cloneRequest; }
});
const cloneRequest = ({ headers, query, ...rest })=>({
        ...rest,
        headers: {
            ...headers
        },
        query: query ? cloneQuery(query) : undefined
    });
const cloneQuery = (query)=>Object.keys(query).reduce((carry, paramName)=>{
        const param = query[paramName];
        return {
            ...carry,
            [paramName]: Array.isArray(param) ? [
                ...param
            ] : param
        };
    }, {});
}),
"./node_modules/.pnpm/@smithy+signature-v4@2.1.1/node_modules/@smithy/signature-v4/dist-es/constants.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  ALGORITHM_IDENTIFIER: function() { return ALGORITHM_IDENTIFIER; },
  ALGORITHM_QUERY_PARAM: function() { return ALGORITHM_QUERY_PARAM; },
  ALWAYS_UNSIGNABLE_HEADERS: function() { return ALWAYS_UNSIGNABLE_HEADERS; },
  AMZ_DATE_HEADER: function() { return AMZ_DATE_HEADER; },
  AMZ_DATE_QUERY_PARAM: function() { return AMZ_DATE_QUERY_PARAM; },
  AUTH_HEADER: function() { return AUTH_HEADER; },
  CREDENTIAL_QUERY_PARAM: function() { return CREDENTIAL_QUERY_PARAM; },
  EVENT_ALGORITHM_IDENTIFIER: function() { return EVENT_ALGORITHM_IDENTIFIER; },
  EXPIRES_QUERY_PARAM: function() { return EXPIRES_QUERY_PARAM; },
  GENERATED_HEADERS: function() { return GENERATED_HEADERS; },
  KEY_TYPE_IDENTIFIER: function() { return KEY_TYPE_IDENTIFIER; },
  MAX_CACHE_SIZE: function() { return MAX_CACHE_SIZE; },
  MAX_PRESIGNED_TTL: function() { return MAX_PRESIGNED_TTL; },
  PROXY_HEADER_PATTERN: function() { return PROXY_HEADER_PATTERN; },
  SEC_HEADER_PATTERN: function() { return SEC_HEADER_PATTERN; },
  SHA256_HEADER: function() { return SHA256_HEADER; },
  SIGNATURE_HEADER: function() { return SIGNATURE_HEADER; },
  SIGNATURE_QUERY_PARAM: function() { return SIGNATURE_QUERY_PARAM; },
  SIGNED_HEADERS_QUERY_PARAM: function() { return SIGNED_HEADERS_QUERY_PARAM; },
  TOKEN_HEADER: function() { return TOKEN_HEADER; },
  TOKEN_QUERY_PARAM: function() { return TOKEN_QUERY_PARAM; },
  UNSIGNED_PAYLOAD: function() { return UNSIGNED_PAYLOAD; }
});
const ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
const CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
const AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
const SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
const EXPIRES_QUERY_PARAM = "X-Amz-Expires";
const SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
const TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
const REGION_SET_PARAM = "X-Amz-Region-Set";
const AUTH_HEADER = "authorization";
const AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase();
const DATE_HEADER = "date";
const GENERATED_HEADERS = [
    AUTH_HEADER,
    AMZ_DATE_HEADER,
    DATE_HEADER
];
const SIGNATURE_HEADER = SIGNATURE_QUERY_PARAM.toLowerCase();
const SHA256_HEADER = "x-amz-content-sha256";
const TOKEN_HEADER = TOKEN_QUERY_PARAM.toLowerCase();
const HOST_HEADER = "host";
const ALWAYS_UNSIGNABLE_HEADERS = {
    authorization: true,
    "cache-control": true,
    connection: true,
    expect: true,
    from: true,
    "keep-alive": true,
    "max-forwards": true,
    pragma: true,
    referer: true,
    te: true,
    trailer: true,
    "transfer-encoding": true,
    upgrade: true,
    "user-agent": true,
    "x-amzn-trace-id": true
};
const PROXY_HEADER_PATTERN = /^proxy-/;
const SEC_HEADER_PATTERN = /^sec-/;
const UNSIGNABLE_PATTERNS = (/* unused pure expression or super */ null && ([
    /^proxy-/i,
    /^sec-/i
]));
const ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
const ALGORITHM_IDENTIFIER_V4A = "AWS4-ECDSA-P256-SHA256";
const EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
const UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
const MAX_CACHE_SIZE = 50;
const KEY_TYPE_IDENTIFIER = "aws4_request";
const MAX_PRESIGNED_TTL = 604800;
}),
"./node_modules/.pnpm/@smithy+signature-v4@2.1.1/node_modules/@smithy/signature-v4/dist-es/credentialDerivation.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  createScope: function() { return createScope; },
  getSigningKey: function() { return getSigningKey; }
});
/* harmony import */var _smithy_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/util-hex-encoding */"./node_modules/.pnpm/@smithy+util-hex-encoding@2.1.1/node_modules/@smithy/util-hex-encoding/dist-es/index.js");
/* harmony import */var _smithy_util_utf8__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/util-utf8 */"./node_modules/.pnpm/@smithy+util-utf8@2.1.1/node_modules/@smithy/util-utf8/dist-es/index.js");
/* harmony import */var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */"./node_modules/.pnpm/@smithy+signature-v4@2.1.1/node_modules/@smithy/signature-v4/dist-es/constants.js");



const signingKeyCache = {};
const cacheQueue = [];
const createScope = (shortDate, region, service)=>`${shortDate}/${region}/${service}/${_constants__WEBPACK_IMPORTED_MODULE_2__.KEY_TYPE_IDENTIFIER}`;
const getSigningKey = async (sha256Constructor, credentials, shortDate, region, service)=>{
    const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);
    const cacheKey = `${shortDate}:${region}:${service}:${(0, _smithy_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__.toHex)(credsHash)}:${credentials.sessionToken}`;
    if (cacheKey in signingKeyCache) return signingKeyCache[cacheKey];
    cacheQueue.push(cacheKey);
    while(cacheQueue.length > _constants__WEBPACK_IMPORTED_MODULE_2__.MAX_CACHE_SIZE)delete signingKeyCache[cacheQueue.shift()];
    let key = `AWS4${credentials.secretAccessKey}`;
    for (const signable of [
        shortDate,
        region,
        service,
        _constants__WEBPACK_IMPORTED_MODULE_2__.KEY_TYPE_IDENTIFIER
    ])key = await hmac(sha256Constructor, key, signable);
    return signingKeyCache[cacheKey] = key;
};
const clearCredentialCache = ()=>{
    cacheQueue.length = 0;
    Object.keys(signingKeyCache).forEach((cacheKey)=>{
        delete signingKeyCache[cacheKey];
    });
};
const hmac = (ctor, secret, data)=>{
    const hash = new ctor(secret);
    hash.update((0, _smithy_util_utf8__WEBPACK_IMPORTED_MODULE_1__.toUint8Array)(data));
    return hash.digest();
};
}),
"./node_modules/.pnpm/@smithy+signature-v4@2.1.1/node_modules/@smithy/signature-v4/dist-es/getCanonicalHeaders.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getCanonicalHeaders: function() { return getCanonicalHeaders; }
});
/* harmony import */var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */"./node_modules/.pnpm/@smithy+signature-v4@2.1.1/node_modules/@smithy/signature-v4/dist-es/constants.js");

const getCanonicalHeaders = ({ headers }, unsignableHeaders, signableHeaders)=>{
    const canonical = {};
    for (const headerName of Object.keys(headers).sort()){
        if (headers[headerName] == undefined) continue;
        const canonicalHeaderName = headerName.toLowerCase();
        if (canonicalHeaderName in _constants__WEBPACK_IMPORTED_MODULE_0__.ALWAYS_UNSIGNABLE_HEADERS || unsignableHeaders?.has(canonicalHeaderName) || _constants__WEBPACK_IMPORTED_MODULE_0__.PROXY_HEADER_PATTERN.test(canonicalHeaderName) || _constants__WEBPACK_IMPORTED_MODULE_0__.SEC_HEADER_PATTERN.test(canonicalHeaderName)) {
            if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) continue;
        }
        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
    }
    return canonical;
};
}),
"./node_modules/.pnpm/@smithy+signature-v4@2.1.1/node_modules/@smithy/signature-v4/dist-es/getCanonicalQuery.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getCanonicalQuery: function() { return getCanonicalQuery; }
});
/* harmony import */var _smithy_util_uri_escape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/util-uri-escape */"./node_modules/.pnpm/@smithy+util-uri-escape@2.1.1/node_modules/@smithy/util-uri-escape/dist-es/escape-uri.js");
/* harmony import */var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */"./node_modules/.pnpm/@smithy+signature-v4@2.1.1/node_modules/@smithy/signature-v4/dist-es/constants.js");


const getCanonicalQuery = ({ query = {} })=>{
    const keys = [];
    const serialized = {};
    for (const key of Object.keys(query).sort()){
        if (key.toLowerCase() === _constants__WEBPACK_IMPORTED_MODULE_0__.SIGNATURE_HEADER) continue;
        keys.push(key);
        const value = query[key];
        if (typeof value === "string") serialized[key] = `${(0, _smithy_util_uri_escape__WEBPACK_IMPORTED_MODULE_1__.escapeUri)(key)}=${(0, _smithy_util_uri_escape__WEBPACK_IMPORTED_MODULE_1__.escapeUri)(value)}`;
        else if (Array.isArray(value)) serialized[key] = value.slice(0).reduce((encoded, value)=>encoded.concat([
                `${(0, _smithy_util_uri_escape__WEBPACK_IMPORTED_MODULE_1__.escapeUri)(key)}=${(0, _smithy_util_uri_escape__WEBPACK_IMPORTED_MODULE_1__.escapeUri)(value)}`
            ]), []).sort().join("&");
    }
    return keys.map((key)=>serialized[key]).filter((serialized)=>serialized).join("&");
};
}),
"./node_modules/.pnpm/@smithy+signature-v4@2.1.1/node_modules/@smithy/signature-v4/dist-es/getPayloadHash.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getPayloadHash: function() { return getPayloadHash; }
});
/* harmony import */var _smithy_is_array_buffer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @smithy/is-array-buffer */"./node_modules/.pnpm/@smithy+is-array-buffer@2.1.1/node_modules/@smithy/is-array-buffer/dist-es/index.js");
/* harmony import */var _smithy_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/util-hex-encoding */"./node_modules/.pnpm/@smithy+util-hex-encoding@2.1.1/node_modules/@smithy/util-hex-encoding/dist-es/index.js");
/* harmony import */var _smithy_util_utf8__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/util-utf8 */"./node_modules/.pnpm/@smithy+util-utf8@2.1.1/node_modules/@smithy/util-utf8/dist-es/index.js");
/* harmony import */var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */"./node_modules/.pnpm/@smithy+signature-v4@2.1.1/node_modules/@smithy/signature-v4/dist-es/constants.js");




const getPayloadHash = async ({ headers, body }, hashConstructor)=>{
    for (const headerName of Object.keys(headers)){
        if (headerName.toLowerCase() === _constants__WEBPACK_IMPORTED_MODULE_2__.SHA256_HEADER) return headers[headerName];
    }
    if (body == undefined) return "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
    else if (typeof body === "string" || ArrayBuffer.isView(body) || (0, _smithy_is_array_buffer__WEBPACK_IMPORTED_MODULE_3__.isArrayBuffer)(body)) {
        const hashCtor = new hashConstructor();
        hashCtor.update((0, _smithy_util_utf8__WEBPACK_IMPORTED_MODULE_1__.toUint8Array)(body));
        return (0, _smithy_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__.toHex)(await hashCtor.digest());
    }
    return _constants__WEBPACK_IMPORTED_MODULE_2__.UNSIGNED_PAYLOAD;
};
}),
"./node_modules/.pnpm/@smithy+signature-v4@2.1.1/node_modules/@smithy/signature-v4/dist-es/headerUtil.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  hasHeader: function() { return hasHeader; }
});
const hasHeader = (soughtHeader, headers)=>{
    soughtHeader = soughtHeader.toLowerCase();
    for (const headerName of Object.keys(headers)){
        if (soughtHeader === headerName.toLowerCase()) return true;
    }
    return false;
};
const getHeaderValue = (soughtHeader, headers)=>{
    soughtHeader = soughtHeader.toLowerCase();
    for (const headerName of Object.keys(headers)){
        if (soughtHeader === headerName.toLowerCase()) return headers[headerName];
    }
    return undefined;
};
const deleteHeader = (soughtHeader, headers)=>{
    soughtHeader = soughtHeader.toLowerCase();
    for (const headerName of Object.keys(headers))if (soughtHeader === headerName.toLowerCase()) delete headers[headerName];
};
}),
"./node_modules/.pnpm/@smithy+signature-v4@2.1.1/node_modules/@smithy/signature-v4/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  SignatureV4: function() { return /* reexport safe */ _SignatureV4__WEBPACK_IMPORTED_MODULE_0__.SignatureV4; }
});
/* harmony import */var _SignatureV4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SignatureV4 */"./node_modules/.pnpm/@smithy+signature-v4@2.1.1/node_modules/@smithy/signature-v4/dist-es/SignatureV4.js");
/* harmony import */var _getCanonicalHeaders__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getCanonicalHeaders */"./node_modules/.pnpm/@smithy+signature-v4@2.1.1/node_modules/@smithy/signature-v4/dist-es/getCanonicalHeaders.js");
/* harmony import */var _getCanonicalQuery__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getCanonicalQuery */"./node_modules/.pnpm/@smithy+signature-v4@2.1.1/node_modules/@smithy/signature-v4/dist-es/getCanonicalQuery.js");
/* harmony import */var _getPayloadHash__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getPayloadHash */"./node_modules/.pnpm/@smithy+signature-v4@2.1.1/node_modules/@smithy/signature-v4/dist-es/getPayloadHash.js");
/* harmony import */var _prepareRequest__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./prepareRequest */"./node_modules/.pnpm/@smithy+signature-v4@2.1.1/node_modules/@smithy/signature-v4/dist-es/prepareRequest.js");
/* harmony import */var _credentialDerivation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./credentialDerivation */"./node_modules/.pnpm/@smithy+signature-v4@2.1.1/node_modules/@smithy/signature-v4/dist-es/credentialDerivation.js");







}),
"./node_modules/.pnpm/@smithy+signature-v4@2.1.1/node_modules/@smithy/signature-v4/dist-es/moveHeadersToQuery.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  moveHeadersToQuery: function() { return moveHeadersToQuery; }
});
/* harmony import */var _cloneRequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cloneRequest */"./node_modules/.pnpm/@smithy+signature-v4@2.1.1/node_modules/@smithy/signature-v4/dist-es/cloneRequest.js");

const moveHeadersToQuery = (request, options = {})=>{
    const { headers, query = {} } = typeof request.clone === "function" ? request.clone() : (0, _cloneRequest__WEBPACK_IMPORTED_MODULE_0__.cloneRequest)(request);
    for (const name of Object.keys(headers)){
        const lname = name.toLowerCase();
        if (lname.slice(0, 6) === "x-amz-" && !options.unhoistableHeaders?.has(lname)) {
            query[name] = headers[name];
            delete headers[name];
        }
    }
    return {
        ...request,
        headers,
        query
    };
};
}),
"./node_modules/.pnpm/@smithy+signature-v4@2.1.1/node_modules/@smithy/signature-v4/dist-es/prepareRequest.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  prepareRequest: function() { return prepareRequest; }
});
/* harmony import */var _cloneRequest__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cloneRequest */"./node_modules/.pnpm/@smithy+signature-v4@2.1.1/node_modules/@smithy/signature-v4/dist-es/cloneRequest.js");
/* harmony import */var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */"./node_modules/.pnpm/@smithy+signature-v4@2.1.1/node_modules/@smithy/signature-v4/dist-es/constants.js");


const prepareRequest = (request)=>{
    request = typeof request.clone === "function" ? request.clone() : (0, _cloneRequest__WEBPACK_IMPORTED_MODULE_1__.cloneRequest)(request);
    for (const headerName of Object.keys(request.headers))if (_constants__WEBPACK_IMPORTED_MODULE_0__.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) delete request.headers[headerName];
    return request;
};
}),
"./node_modules/.pnpm/@smithy+signature-v4@2.1.1/node_modules/@smithy/signature-v4/dist-es/utilDate.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  iso8601: function() { return iso8601; }
});
const iso8601 = (time)=>toDate(time).toISOString().replace(/\.\d{3}Z$/, "Z");
const toDate = (time)=>{
    if (typeof time === "number") return new Date(time * 1000);
    if (typeof time === "string") {
        if (Number(time)) return new Date(Number(time) * 1000);
        return new Date(time);
    }
    return time;
};
}),
"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/NoOpLogger.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  NoOpLogger: function() { return NoOpLogger; }
});
class NoOpLogger {
    trace() {}
    debug() {}
    info() {}
    warn() {}
    error() {}
}
}),
"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/client.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  Client: function() { return Client; }
});
/* harmony import */var _smithy_middleware_stack__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/middleware-stack */"./node_modules/.pnpm/@smithy+middleware-stack@2.1.1/node_modules/@smithy/middleware-stack/dist-es/MiddlewareStack.js");

class Client {
    constructor(config){
        this.middlewareStack = (0, _smithy_middleware_stack__WEBPACK_IMPORTED_MODULE_0__.constructStack)();
        this.config = config;
    }
    send(command, optionsOrCb, cb) {
        const options = typeof optionsOrCb !== "function" ? optionsOrCb : undefined;
        const callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
        if (callback) handler(command).then((result)=>callback(null, result.output), (err)=>callback(err)).catch(()=>{});
        else return handler(command).then((result)=>result.output);
    }
    destroy() {
        if (this.config.requestHandler.destroy) this.config.requestHandler.destroy();
    }
}
}),
"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/collect-stream-body.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  collectBody: function() { return collectBody; }
});
/* harmony import */var _smithy_util_stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/util-stream */"./node_modules/.pnpm/@smithy+util-stream@2.1.1/node_modules/@smithy/util-stream/dist-es/index.js");

const collectBody = async (streamBody = new Uint8Array(), context)=>{
    if (streamBody instanceof Uint8Array) return _smithy_util_stream__WEBPACK_IMPORTED_MODULE_0__.Uint8ArrayBlobAdapter.mutate(streamBody);
    if (!streamBody) return _smithy_util_stream__WEBPACK_IMPORTED_MODULE_0__.Uint8ArrayBlobAdapter.mutate(new Uint8Array());
    const fromContext = context.streamCollector(streamBody);
    return _smithy_util_stream__WEBPACK_IMPORTED_MODULE_0__.Uint8ArrayBlobAdapter.mutate(await fromContext);
};
}),
"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/command.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  Command: function() { return Command; }
});
/* harmony import */var _smithy_middleware_stack__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/middleware-stack */"./node_modules/.pnpm/@smithy+middleware-stack@2.1.1/node_modules/@smithy/middleware-stack/dist-es/MiddlewareStack.js");
/* harmony import */var _smithy_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/types */"./node_modules/.pnpm/@smithy+types@2.9.1/node_modules/@smithy/types/dist-es/index.js");


class Command {
    constructor(){
        this.middlewareStack = (0, _smithy_middleware_stack__WEBPACK_IMPORTED_MODULE_1__.constructStack)();
    }
    static classBuilder() {
        return new ClassBuilder();
    }
    resolveMiddlewareWithContext(clientStack, configuration, options, { middlewareFn, clientName, commandName, inputFilterSensitiveLog, outputFilterSensitiveLog, smithyContext, additionalContext, CommandCtor }) {
        for (const mw of middlewareFn.bind(this)(CommandCtor, clientStack, configuration, options))this.middlewareStack.use(mw);
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog,
            outputFilterSensitiveLog,
            [_smithy_types__WEBPACK_IMPORTED_MODULE_0__.SMITHY_CONTEXT_KEY]: {
                ...smithyContext
            },
            ...additionalContext
        };
        const { requestHandler } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
}
class ClassBuilder {
    constructor(){
        this._init = ()=>{};
        this._ep = {};
        this._middlewareFn = ()=>[];
        this._commandName = "";
        this._clientName = "";
        this._additionalContext = {};
        this._smithyContext = {};
        this._inputFilterSensitiveLog = (_)=>_;
        this._outputFilterSensitiveLog = (_)=>_;
        this._serializer = null;
        this._deserializer = null;
    }
    init(cb) {
        this._init = cb;
    }
    ep(endpointParameterInstructions) {
        this._ep = endpointParameterInstructions;
        return this;
    }
    m(middlewareSupplier) {
        this._middlewareFn = middlewareSupplier;
        return this;
    }
    s(service, operation, smithyContext = {}) {
        this._smithyContext = {
            service,
            operation,
            ...smithyContext
        };
        return this;
    }
    c(additionalContext = {}) {
        this._additionalContext = additionalContext;
        return this;
    }
    n(clientName, commandName) {
        this._clientName = clientName;
        this._commandName = commandName;
        return this;
    }
    f(inputFilter = (_)=>_, outputFilter = (_)=>_) {
        this._inputFilterSensitiveLog = inputFilter;
        this._outputFilterSensitiveLog = outputFilter;
        return this;
    }
    ser(serializer) {
        this._serializer = serializer;
        return this;
    }
    de(deserializer) {
        this._deserializer = deserializer;
        return this;
    }
    build() {
        const closure = this;
        let CommandRef;
        return CommandRef = class extends Command {
            static getEndpointParameterInstructions() {
                return closure._ep;
            }
            constructor(input){
                super();
                this.input = input;
                this.serialize = closure._serializer;
                this.deserialize = closure._deserializer;
                closure._init(this);
            }
            resolveMiddleware(stack, configuration, options) {
                return this.resolveMiddlewareWithContext(stack, configuration, options, {
                    CommandCtor: CommandRef,
                    middlewareFn: closure._middlewareFn,
                    clientName: closure._clientName,
                    commandName: closure._commandName,
                    inputFilterSensitiveLog: closure._inputFilterSensitiveLog,
                    outputFilterSensitiveLog: closure._outputFilterSensitiveLog,
                    smithyContext: closure._smithyContext,
                    additionalContext: closure._additionalContext
                });
            }
        };
    }
}
}),
"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/constants.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  SENSITIVE_STRING: function() { return SENSITIVE_STRING; }
});
const SENSITIVE_STRING = "***SensitiveInformation***";
}),
"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/create-aggregated-client.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  createAggregatedClient: function() { return createAggregatedClient; }
});
const createAggregatedClient = (commands, Client)=>{
    for (const command of Object.keys(commands)){
        const CommandCtor = commands[command];
        const methodImpl = async function(args, optionsOrCb, cb) {
            const command = new CommandCtor(args);
            if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
            else if (typeof cb === "function") {
                if (typeof optionsOrCb !== "object") throw new Error(`Expected http options but got ${typeof optionsOrCb}`);
                this.send(command, optionsOrCb || {}, cb);
            } else return this.send(command, optionsOrCb);
        };
        const methodName = (command[0].toLowerCase() + command.slice(1)).replace(/Command$/, "");
        Client.prototype[methodName] = methodImpl;
    }
};
}),
"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/date-utils.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  parseRfc3339DateTimeWithOffset: function() { return parseRfc3339DateTimeWithOffset; }
});
/* harmony import */var _parse_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parse-utils */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/parse-utils.js");

const DAYS = (/* unused pure expression or super */ null && ([
    "Sun",
    "Mon",
    "Tue",
    "Wed",
    "Thu",
    "Fri",
    "Sat"
]));
const MONTHS = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
];
function dateToUtcString(date) {
    const year = date.getUTCFullYear();
    const month = date.getUTCMonth();
    const dayOfWeek = date.getUTCDay();
    const dayOfMonthInt = date.getUTCDate();
    const hoursInt = date.getUTCHours();
    const minutesInt = date.getUTCMinutes();
    const secondsInt = date.getUTCSeconds();
    const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;
    const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;
    const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;
    const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;
    return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;
}
const RFC3339 = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/);
const parseRfc3339DateTime = (value)=>{
    if (value === null || value === undefined) return undefined;
    if (typeof value !== "string") throw new TypeError("RFC-3339 date-times must be expressed as strings");
    const match = RFC3339.exec(value);
    if (!match) throw new TypeError("Invalid RFC-3339 date-time value");
    const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;
    const year = strictParseShort(stripLeadingZeroes(yearStr));
    const month = parseDateValue(monthStr, "month", 1, 12);
    const day = parseDateValue(dayStr, "day", 1, 31);
    return buildDate(year, month, day, {
        hours,
        minutes,
        seconds,
        fractionalMilliseconds
    });
};
const RFC3339_WITH_OFFSET = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?(([-+]\d{2}\:\d{2})|[zZ])$/);
const parseRfc3339DateTimeWithOffset = (value)=>{
    if (value === null || value === undefined) return undefined;
    if (typeof value !== "string") throw new TypeError("RFC-3339 date-times must be expressed as strings");
    const match = RFC3339_WITH_OFFSET.exec(value);
    if (!match) throw new TypeError("Invalid RFC-3339 date-time value");
    const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, offsetStr] = match;
    const year = (0, _parse_utils__WEBPACK_IMPORTED_MODULE_0__.strictParseShort)(stripLeadingZeroes(yearStr));
    const month = parseDateValue(monthStr, "month", 1, 12);
    const day = parseDateValue(dayStr, "day", 1, 31);
    const date = buildDate(year, month, day, {
        hours,
        minutes,
        seconds,
        fractionalMilliseconds
    });
    if (offsetStr.toUpperCase() != "Z") date.setTime(date.getTime() - parseOffsetToMilliseconds(offsetStr));
    return date;
};
const IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
const RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
const ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? (\d{4})$/);
const parseRfc7231DateTime = (value)=>{
    if (value === null || value === undefined) return undefined;
    if (typeof value !== "string") throw new TypeError("RFC-7231 date-times must be expressed as strings");
    let match = IMF_FIXDATE.exec(value);
    if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), {
            hours,
            minutes,
            seconds,
            fractionalMilliseconds
        });
    }
    match = RFC_850_DATE.exec(value);
    if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), {
            hours,
            minutes,
            seconds,
            fractionalMilliseconds
        }));
    }
    match = ASC_TIME.exec(value);
    if (match) {
        const [_, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match;
        return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), "day", 1, 31), {
            hours,
            minutes,
            seconds,
            fractionalMilliseconds
        });
    }
    throw new TypeError("Invalid RFC-7231 date-time value");
};
const parseEpochTimestamp = (value)=>{
    if (value === null || value === undefined) return undefined;
    let valueAsDouble;
    if (typeof value === "number") valueAsDouble = value;
    else if (typeof value === "string") valueAsDouble = strictParseDouble(value);
    else throw new TypeError("Epoch timestamps must be expressed as floating point numbers or their string representation");
    if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) throw new TypeError("Epoch timestamps must be valid, non-Infinite, non-NaN numerics");
    return new Date(Math.round(valueAsDouble * 1000));
};
const buildDate = (year, month, day, time)=>{
    const adjustedMonth = month - 1;
    validateDayOfMonth(year, adjustedMonth, day);
    return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, "hour", 0, 23), parseDateValue(time.minutes, "minute", 0, 59), parseDateValue(time.seconds, "seconds", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));
};
const parseTwoDigitYear = (value)=>{
    const thisYear = new Date().getUTCFullYear();
    const valueInThisCentury = Math.floor(thisYear / 100) * 100 + strictParseShort(stripLeadingZeroes(value));
    if (valueInThisCentury < thisYear) return valueInThisCentury + 100;
    return valueInThisCentury;
};
const FIFTY_YEARS_IN_MILLIS = 1576800000000;
const adjustRfc850Year = (input)=>{
    if (input.getTime() - new Date().getTime() > FIFTY_YEARS_IN_MILLIS) return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));
    return input;
};
const parseMonthByShortName = (value)=>{
    const monthIdx = MONTHS.indexOf(value);
    if (monthIdx < 0) throw new TypeError(`Invalid month: ${value}`);
    return monthIdx + 1;
};
const DAYS_IN_MONTH = [
    31,
    28,
    31,
    30,
    31,
    30,
    31,
    31,
    30,
    31,
    30,
    31
];
const validateDayOfMonth = (year, month, day)=>{
    let maxDays = DAYS_IN_MONTH[month];
    if (month === 1 && isLeapYear(year)) maxDays = 29;
    if (day > maxDays) throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);
};
const isLeapYear = (year)=>{
    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
};
const parseDateValue = (value, type, lower, upper)=>{
    const dateVal = (0, _parse_utils__WEBPACK_IMPORTED_MODULE_0__.strictParseByte)(stripLeadingZeroes(value));
    if (dateVal < lower || dateVal > upper) throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);
    return dateVal;
};
const parseMilliseconds = (value)=>{
    if (value === null || value === undefined) return 0;
    return (0, _parse_utils__WEBPACK_IMPORTED_MODULE_0__.strictParseFloat32)("0." + value) * 1000;
};
const parseOffsetToMilliseconds = (value)=>{
    const directionStr = value[0];
    let direction = 1;
    if (directionStr == "+") direction = 1;
    else if (directionStr == "-") direction = -1;
    else throw new TypeError(`Offset direction, ${directionStr}, must be "+" or "-"`);
    const hour = Number(value.substring(1, 3));
    const minute = Number(value.substring(4, 6));
    return direction * (hour * 60 + minute) * 60000;
};
const stripLeadingZeroes = (value)=>{
    let idx = 0;
    while(idx < value.length - 1 && value.charAt(idx) === "0")idx++;
    if (idx === 0) return value;
    return value.slice(idx);
};
}),
"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/default-error-handler.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  withBaseException: function() { return withBaseException; }
});
/* harmony import */var _exceptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./exceptions */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/exceptions.js");

const throwDefaultError = ({ output, parsedBody, exceptionCtor, errorCode })=>{
    const $metadata = deserializeMetadata(output);
    const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
    const response = new exceptionCtor({
        name: parsedBody?.code || parsedBody?.Code || errorCode || statusCode || "UnknownError",
        $fault: "client",
        $metadata
    });
    throw (0, _exceptions__WEBPACK_IMPORTED_MODULE_0__.decorateServiceException)(response, parsedBody);
};
const withBaseException = (ExceptionCtor)=>{
    return ({ output, parsedBody, errorCode })=>{
        throwDefaultError({
            output,
            parsedBody,
            exceptionCtor: ExceptionCtor,
            errorCode
        });
    };
};
const deserializeMetadata = (output)=>({
        httpStatusCode: output.statusCode,
        requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
    });
}),
"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/defaults-mode.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  loadConfigsForDefaultMode: function() { return loadConfigsForDefaultMode; }
});
const loadConfigsForDefaultMode = (mode)=>{
    switch(mode){
        case "standard":
            return {
                retryMode: "standard",
                connectionTimeout: 3100
            };
        case "in-region":
            return {
                retryMode: "standard",
                connectionTimeout: 1100
            };
        case "cross-region":
            return {
                retryMode: "standard",
                connectionTimeout: 3100
            };
        case "mobile":
            return {
                retryMode: "standard",
                connectionTimeout: 30000
            };
        default:
            return {};
    }
};
}),
"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/emitWarningIfUnsupportedVersion.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  emitWarningIfUnsupportedVersion: function() { return emitWarningIfUnsupportedVersion; }
});
let warningEmitted = false;
const emitWarningIfUnsupportedVersion = (version)=>{
    if (version && !warningEmitted && parseInt(version.substring(1, version.indexOf("."))) < 14) warningEmitted = true;
};
}),
"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/exceptions.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  ServiceException: function() { return ServiceException; },
  decorateServiceException: function() { return decorateServiceException; }
});
class ServiceException extends Error {
    constructor(options){
        super(options.message);
        Object.setPrototypeOf(this, ServiceException.prototype);
        this.name = options.name;
        this.$fault = options.$fault;
        this.$metadata = options.$metadata;
    }
}
const decorateServiceException = (exception, additions = {})=>{
    Object.entries(additions).filter(([, v])=>v !== undefined).forEach(([k, v])=>{
        if (exception[k] == undefined || exception[k] === "") exception[k] = v;
    });
    const message = exception.message || exception.Message || "UnknownError";
    exception.message = message;
    delete exception.Message;
    return exception;
};
}),
"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/extended-encode-uri-component.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  extendedEncodeURIComponent: function() { return extendedEncodeURIComponent; }
});
function extendedEncodeURIComponent(str) {
    return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
        return "%" + c.charCodeAt(0).toString(16).toUpperCase();
    });
}
}),
"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/extensions/checksum.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getChecksumConfiguration: function() { return getChecksumConfiguration; },
  resolveChecksumRuntimeConfig: function() { return resolveChecksumRuntimeConfig; }
});
/* harmony import */var _smithy_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/types */"./node_modules/.pnpm/@smithy+types@2.9.1/node_modules/@smithy/types/dist-es/index.js");


const getChecksumConfiguration = (runtimeConfig)=>{
    const checksumAlgorithms = [];
    for(const id in _smithy_types__WEBPACK_IMPORTED_MODULE_0__.AlgorithmId){
        const algorithmId = _smithy_types__WEBPACK_IMPORTED_MODULE_0__.AlgorithmId[id];
        if (runtimeConfig[algorithmId] === undefined) continue;
        checksumAlgorithms.push({
            algorithmId: ()=>algorithmId,
            checksumConstructor: ()=>runtimeConfig[algorithmId]
        });
    }
    return {
        _checksumAlgorithms: checksumAlgorithms,
        addChecksumAlgorithm (algo) {
            this._checksumAlgorithms.push(algo);
        },
        checksumAlgorithms () {
            return this._checksumAlgorithms;
        }
    };
};
const resolveChecksumRuntimeConfig = (clientConfig)=>{
    const runtimeConfig = {};
    clientConfig.checksumAlgorithms().forEach((checksumAlgorithm)=>{
        runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();
    });
    return runtimeConfig;
};
}),
"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/extensions/defaultExtensionConfiguration.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getDefaultExtensionConfiguration: function() { return getDefaultExtensionConfiguration; },
  resolveDefaultRuntimeConfig: function() { return resolveDefaultRuntimeConfig; }
});
/* harmony import */var _checksum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./checksum */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/extensions/checksum.js");
/* harmony import */var _retry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./retry */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/extensions/retry.js");


const getDefaultExtensionConfiguration = (runtimeConfig)=>{
    return {
        ...(0, _checksum__WEBPACK_IMPORTED_MODULE_0__.getChecksumConfiguration)(runtimeConfig),
        ...(0, _retry__WEBPACK_IMPORTED_MODULE_1__.getRetryConfiguration)(runtimeConfig)
    };
};
const getDefaultClientConfiguration = (/* unused pure expression or super */ null && (getDefaultExtensionConfiguration));
const resolveDefaultRuntimeConfig = (config)=>{
    return {
        ...(0, _checksum__WEBPACK_IMPORTED_MODULE_0__.resolveChecksumRuntimeConfig)(config),
        ...(0, _retry__WEBPACK_IMPORTED_MODULE_1__.resolveRetryRuntimeConfig)(config)
    };
};
}),
"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/extensions/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getDefaultExtensionConfiguration: function() { return /* reexport safe */ _defaultExtensionConfiguration__WEBPACK_IMPORTED_MODULE_0__.getDefaultExtensionConfiguration; },
  resolveDefaultRuntimeConfig: function() { return /* reexport safe */ _defaultExtensionConfiguration__WEBPACK_IMPORTED_MODULE_0__.resolveDefaultRuntimeConfig; }
});
/* harmony import */var _defaultExtensionConfiguration__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./defaultExtensionConfiguration */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/extensions/defaultExtensionConfiguration.js");

}),
"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/extensions/retry.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getRetryConfiguration: function() { return getRetryConfiguration; },
  resolveRetryRuntimeConfig: function() { return resolveRetryRuntimeConfig; }
});
const getRetryConfiguration = (runtimeConfig)=>{
    let _retryStrategy = runtimeConfig.retryStrategy;
    return {
        setRetryStrategy (retryStrategy) {
            _retryStrategy = retryStrategy;
        },
        retryStrategy () {
            return _retryStrategy;
        }
    };
};
const resolveRetryRuntimeConfig = (retryStrategyConfiguration)=>{
    const runtimeConfig = {};
    runtimeConfig.retryStrategy = retryStrategyConfiguration.retryStrategy();
    return runtimeConfig;
};
}),
"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/get-array-if-single-item.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getArrayIfSingleItem: function() { return getArrayIfSingleItem; }
});
const getArrayIfSingleItem = (mayBeArray)=>Array.isArray(mayBeArray) ? mayBeArray : [
        mayBeArray
    ];
}),
"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/get-value-from-text-node.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getValueFromTextNode: function() { return getValueFromTextNode; }
});
const getValueFromTextNode = (obj)=>{
    const textNodeName = "#text";
    for(const key in obj){
        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== undefined) obj[key] = obj[key][textNodeName];
        else if (typeof obj[key] === "object" && obj[key] !== null) obj[key] = getValueFromTextNode(obj[key]);
    }
    return obj;
};
}),
"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  Client: function() { return /* reexport safe */ _client__WEBPACK_IMPORTED_MODULE_1__.Client; },
  Command: function() { return /* reexport safe */ _command__WEBPACK_IMPORTED_MODULE_3__.Command; },
  NoOpLogger: function() { return /* reexport safe */ _NoOpLogger__WEBPACK_IMPORTED_MODULE_0__.NoOpLogger; },
  SENSITIVE_STRING: function() { return /* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_4__.SENSITIVE_STRING; },
  ServiceException: function() { return /* reexport safe */ _exceptions__WEBPACK_IMPORTED_MODULE_11__.ServiceException; },
  _json: function() { return /* reexport safe */ _serde_json__WEBPACK_IMPORTED_MODULE_20__._json; },
  collectBody: function() { return /* reexport safe */ _collect_stream_body__WEBPACK_IMPORTED_MODULE_2__.collectBody; },
  createAggregatedClient: function() { return /* reexport safe */ _create_aggregated_client__WEBPACK_IMPORTED_MODULE_5__.createAggregatedClient; },
  decorateServiceException: function() { return /* reexport safe */ _exceptions__WEBPACK_IMPORTED_MODULE_11__.decorateServiceException; },
  emitWarningIfUnsupportedVersion: function() { return /* reexport safe */ _emitWarningIfUnsupportedVersion__WEBPACK_IMPORTED_MODULE_9__.emitWarningIfUnsupportedVersion; },
  expectInt32: function() { return /* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_17__.expectInt32; },
  expectLong: function() { return /* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_17__.expectLong; },
  expectNonNull: function() { return /* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_17__.expectNonNull; },
  expectObject: function() { return /* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_17__.expectObject; },
  expectString: function() { return /* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_17__.expectString; },
  extendedEncodeURIComponent: function() { return /* reexport safe */ _extended_encode_uri_component__WEBPACK_IMPORTED_MODULE_12__.extendedEncodeURIComponent; },
  getArrayIfSingleItem: function() { return /* reexport safe */ _get_array_if_single_item__WEBPACK_IMPORTED_MODULE_13__.getArrayIfSingleItem; },
  getDefaultExtensionConfiguration: function() { return /* reexport safe */ _extensions__WEBPACK_IMPORTED_MODULE_10__.getDefaultExtensionConfiguration; },
  getValueFromTextNode: function() { return /* reexport safe */ _get_value_from_text_node__WEBPACK_IMPORTED_MODULE_14__.getValueFromTextNode; },
  loadConfigsForDefaultMode: function() { return /* reexport safe */ _defaults_mode__WEBPACK_IMPORTED_MODULE_8__.loadConfigsForDefaultMode; },
  map: function() { return /* reexport safe */ _object_mapping__WEBPACK_IMPORTED_MODULE_16__.map; },
  parseBoolean: function() { return /* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_17__.parseBoolean; },
  parseRfc3339DateTimeWithOffset: function() { return /* reexport safe */ _date_utils__WEBPACK_IMPORTED_MODULE_6__.parseRfc3339DateTimeWithOffset; },
  resolveDefaultRuntimeConfig: function() { return /* reexport safe */ _extensions__WEBPACK_IMPORTED_MODULE_10__.resolveDefaultRuntimeConfig; },
  resolvedPath: function() { return /* reexport safe */ _resolve_path__WEBPACK_IMPORTED_MODULE_18__.resolvedPath; },
  strictParseFloat: function() { return /* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_17__.strictParseFloat; },
  strictParseInt32: function() { return /* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_17__.strictParseInt32; },
  strictParseLong: function() { return /* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_17__.strictParseLong; },
  take: function() { return /* reexport safe */ _object_mapping__WEBPACK_IMPORTED_MODULE_16__.take; },
  withBaseException: function() { return /* reexport safe */ _default_error_handler__WEBPACK_IMPORTED_MODULE_7__.withBaseException; }
});
/* harmony import */var _NoOpLogger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NoOpLogger */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/NoOpLogger.js");
/* harmony import */var _client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./client */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/client.js");
/* harmony import */var _collect_stream_body__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./collect-stream-body */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/collect-stream-body.js");
/* harmony import */var _command__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./command */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/command.js");
/* harmony import */var _constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constants */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/constants.js");
/* harmony import */var _create_aggregated_client__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./create-aggregated-client */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/create-aggregated-client.js");
/* harmony import */var _date_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./date-utils */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/date-utils.js");
/* harmony import */var _default_error_handler__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./default-error-handler */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/default-error-handler.js");
/* harmony import */var _defaults_mode__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./defaults-mode */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/defaults-mode.js");
/* harmony import */var _emitWarningIfUnsupportedVersion__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./emitWarningIfUnsupportedVersion */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/emitWarningIfUnsupportedVersion.js");
/* harmony import */var _extensions__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./extensions */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/extensions/index.js");
/* harmony import */var _exceptions__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./exceptions */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/exceptions.js");
/* harmony import */var _extended_encode_uri_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./extended-encode-uri-component */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/extended-encode-uri-component.js");
/* harmony import */var _get_array_if_single_item__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./get-array-if-single-item */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/get-array-if-single-item.js");
/* harmony import */var _get_value_from_text_node__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./get-value-from-text-node */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/get-value-from-text-node.js");
/* harmony import */var _lazy_json__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./lazy-json */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/lazy-json.js");
/* harmony import */var _object_mapping__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./object-mapping */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/object-mapping.js");
/* harmony import */var _parse_utils__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./parse-utils */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/parse-utils.js");
/* harmony import */var _resolve_path__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./resolve-path */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/resolve-path.js");
/* harmony import */var _serde_json__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./serde-json */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/serde-json.js");






















}),
"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/lazy-json.js": (function () {
"use strict";
const StringWrapper = function() {
    const Class = Object.getPrototypeOf(this).constructor;
    const Constructor = Function.bind.apply(String, [
        null,
        ...arguments
    ]);
    const instance = new Constructor();
    Object.setPrototypeOf(instance, Class.prototype);
    return instance;
};
StringWrapper.prototype = Object.create(String.prototype, {
    constructor: {
        value: StringWrapper,
        enumerable: false,
        writable: true,
        configurable: true
    }
});
Object.setPrototypeOf(StringWrapper, String);
class LazyJsonString extends (/* unused pure expression or super */ null && (StringWrapper)) {
    deserializeJSON() {
        return JSON.parse(super.toString());
    }
    toJSON() {
        return super.toString();
    }
    static fromObject(object) {
        if (object instanceof LazyJsonString) return object;
        else if (object instanceof String || typeof object === "string") return new LazyJsonString(object);
        return new LazyJsonString(JSON.stringify(object));
    }
}
}),
"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/object-mapping.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  map: function() { return map; },
  take: function() { return take; }
});
function map(arg0, arg1, arg2) {
    let target;
    let filter;
    let instructions;
    if (typeof arg1 === "undefined" && typeof arg2 === "undefined") {
        target = {};
        instructions = arg0;
    } else {
        target = arg0;
        if (typeof arg1 === "function") {
            filter = arg1;
            instructions = arg2;
            return mapWithFilter(target, filter, instructions);
        } else instructions = arg1;
    }
    for (const key of Object.keys(instructions)){
        if (!Array.isArray(instructions[key])) {
            target[key] = instructions[key];
            continue;
        }
        applyInstruction(target, null, instructions, key);
    }
    return target;
}
const convertMap = (target)=>{
    const output = {};
    for (const [k, v] of Object.entries(target || {}))output[k] = [
        ,
        v
    ];
    return output;
};
const take = (source, instructions)=>{
    const out = {};
    for(const key in instructions)applyInstruction(out, source, instructions, key);
    return out;
};
const mapWithFilter = (target, filter, instructions)=>{
    return map(target, Object.entries(instructions).reduce((_instructions, [key, value])=>{
        if (Array.isArray(value)) _instructions[key] = value;
        else if (typeof value === "function") _instructions[key] = [
            filter,
            value()
        ];
        else _instructions[key] = [
            filter,
            value
        ];
        return _instructions;
    }, {}));
};
const applyInstruction = (target, source, instructions, targetKey)=>{
    if (source !== null) {
        let instruction = instructions[targetKey];
        if (typeof instruction === "function") instruction = [
            ,
            instruction
        ];
        const [filter = nonNullish, valueFn = pass, sourceKey = targetKey] = instruction;
        if (typeof filter === "function" && filter(source[sourceKey]) || typeof filter !== "function" && !!filter) target[targetKey] = valueFn(source[sourceKey]);
        return;
    }
    let [filter, value] = instructions[targetKey];
    if (typeof value === "function") {
        let _value;
        const defaultFilterPassed = filter === undefined && (_value = value()) != null;
        const customFilterPassed = typeof filter === "function" && !!filter(void 0) || typeof filter !== "function" && !!filter;
        if (defaultFilterPassed) target[targetKey] = _value;
        else if (customFilterPassed) target[targetKey] = value();
    } else {
        const defaultFilterPassed = filter === undefined && value != null;
        const customFilterPassed = typeof filter === "function" && !!filter(value) || typeof filter !== "function" && !!filter;
        if (defaultFilterPassed || customFilterPassed) target[targetKey] = value;
    }
};
const nonNullish = (_)=>_ != null;
const pass = (_)=>_;
}),
"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/parse-utils.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  expectInt32: function() { return expectInt32; },
  expectLong: function() { return expectLong; },
  expectNonNull: function() { return expectNonNull; },
  expectObject: function() { return expectObject; },
  expectString: function() { return expectString; },
  parseBoolean: function() { return parseBoolean; },
  strictParseByte: function() { return strictParseByte; },
  strictParseFloat: function() { return strictParseFloat; },
  strictParseFloat32: function() { return strictParseFloat32; },
  strictParseInt32: function() { return strictParseInt32; },
  strictParseLong: function() { return strictParseLong; },
  strictParseShort: function() { return strictParseShort; }
});
const parseBoolean = (value)=>{
    switch(value){
        case "true":
            return true;
        case "false":
            return false;
        default:
            throw new Error(`Unable to parse boolean value "${value}"`);
    }
};
const expectBoolean = (value)=>{
    if (value === null || value === undefined) return undefined;
    if (typeof value === "number") {
        if (value === 0 || value === 1) logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        if (value === 0) return false;
        if (value === 1) return true;
    }
    if (typeof value === "string") {
        const lower = value.toLowerCase();
        if (lower === "false" || lower === "true") logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        if (lower === "false") return false;
        if (lower === "true") return true;
    }
    if (typeof value === "boolean") return value;
    throw new TypeError(`Expected boolean, got ${typeof value}: ${value}`);
};
const expectNumber = (value)=>{
    if (value === null || value === undefined) return undefined;
    if (typeof value === "string") {
        const parsed = parseFloat(value);
        if (!Number.isNaN(parsed)) {
            if (String(parsed) !== String(value)) logger.warn(stackTraceWarning(`Expected number but observed string: ${value}`));
            return parsed;
        }
    }
    if (typeof value === "number") return value;
    throw new TypeError(`Expected number, got ${typeof value}: ${value}`);
};
const MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));
const expectFloat32 = (value)=>{
    const expected = expectNumber(value);
    if (expected !== undefined && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {
        if (Math.abs(expected) > MAX_FLOAT) throw new TypeError(`Expected 32-bit float, got ${value}`);
    }
    return expected;
};
const expectLong = (value)=>{
    if (value === null || value === undefined) return undefined;
    if (Number.isInteger(value) && !Number.isNaN(value)) return value;
    throw new TypeError(`Expected integer, got ${typeof value}: ${value}`);
};
const expectInt = (/* unused pure expression or super */ null && (expectLong));
const expectInt32 = (value)=>expectSizedInt(value, 32);
const expectShort = (value)=>expectSizedInt(value, 16);
const expectByte = (value)=>expectSizedInt(value, 8);
const expectSizedInt = (value, size)=>{
    const expected = expectLong(value);
    if (expected !== undefined && castInt(expected, size) !== expected) throw new TypeError(`Expected ${size}-bit integer, got ${value}`);
    return expected;
};
const castInt = (value, size)=>{
    switch(size){
        case 32:
            return Int32Array.of(value)[0];
        case 16:
            return Int16Array.of(value)[0];
        case 8:
            return Int8Array.of(value)[0];
    }
};
const expectNonNull = (value, location)=>{
    if (value === null || value === undefined) {
        if (location) throw new TypeError(`Expected a non-null value for ${location}`);
        throw new TypeError("Expected a non-null value");
    }
    return value;
};
const expectObject = (value)=>{
    if (value === null || value === undefined) return undefined;
    if (typeof value === "object" && !Array.isArray(value)) return value;
    const receivedType = Array.isArray(value) ? "array" : typeof value;
    throw new TypeError(`Expected object, got ${receivedType}: ${value}`);
};
const expectString = (value)=>{
    if (value === null || value === undefined) return undefined;
    if (typeof value === "string") return value;
    if ([
        "boolean",
        "number",
        "bigint"
    ].includes(typeof value)) {
        logger.warn(stackTraceWarning(`Expected string, got ${typeof value}: ${value}`));
        return String(value);
    }
    throw new TypeError(`Expected string, got ${typeof value}: ${value}`);
};
const expectUnion = (value)=>{
    if (value === null || value === undefined) return undefined;
    const asObject = expectObject(value);
    const setKeys = Object.entries(asObject).filter(([, v])=>v != null).map(([k])=>k);
    if (setKeys.length === 0) throw new TypeError(`Unions must have exactly one non-null member. None were found.`);
    if (setKeys.length > 1) throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);
    return asObject;
};
const strictParseDouble = (value)=>{
    if (typeof value == "string") return expectNumber(parseNumber(value));
    return expectNumber(value);
};
const strictParseFloat = strictParseDouble;
const strictParseFloat32 = (value)=>{
    if (typeof value == "string") return expectFloat32(parseNumber(value));
    return expectFloat32(value);
};
const NUMBER_REGEX = /(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g;
const parseNumber = (value)=>{
    const matches = value.match(NUMBER_REGEX);
    if (matches === null || matches[0].length !== value.length) throw new TypeError(`Expected real number, got implicit NaN`);
    return parseFloat(value);
};
const limitedParseDouble = (value)=>{
    if (typeof value == "string") return parseFloatString(value);
    return expectNumber(value);
};
const handleFloat = (/* unused pure expression or super */ null && (limitedParseDouble));
const limitedParseFloat = (/* unused pure expression or super */ null && (limitedParseDouble));
const limitedParseFloat32 = (value)=>{
    if (typeof value == "string") return parseFloatString(value);
    return expectFloat32(value);
};
const parseFloatString = (value)=>{
    switch(value){
        case "NaN":
            return NaN;
        case "Infinity":
            return Infinity;
        case "-Infinity":
            return -Infinity;
        default:
            throw new Error(`Unable to parse float value: ${value}`);
    }
};
const strictParseLong = (value)=>{
    if (typeof value === "string") return expectLong(parseNumber(value));
    return expectLong(value);
};
const strictParseInt = (/* unused pure expression or super */ null && (strictParseLong));
const strictParseInt32 = (value)=>{
    if (typeof value === "string") return expectInt32(parseNumber(value));
    return expectInt32(value);
};
const strictParseShort = (value)=>{
    if (typeof value === "string") return expectShort(parseNumber(value));
    return expectShort(value);
};
const strictParseByte = (value)=>{
    if (typeof value === "string") return expectByte(parseNumber(value));
    return expectByte(value);
};
const stackTraceWarning = (message)=>{
    return String(new TypeError(message).stack || message).split("\n").slice(0, 5).filter((s)=>!s.includes("stackTraceWarning")).join("\n");
};
const logger = {
    warn: console.warn
};
}),
"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/resolve-path.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  resolvedPath: function() { return resolvedPath; }
});
/* harmony import */var _extended_encode_uri_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./extended-encode-uri-component */"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/extended-encode-uri-component.js");

const resolvedPath = (resolvedPath, input, memberName, labelValueProvider, uriLabel, isGreedyLabel)=>{
    if (input != null && input[memberName] !== undefined) {
        const labelValue = labelValueProvider();
        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: " + memberName + ".");
        resolvedPath = resolvedPath.replace(uriLabel, isGreedyLabel ? labelValue.split("/").map((segment)=>(0, _extended_encode_uri_component__WEBPACK_IMPORTED_MODULE_0__.extendedEncodeURIComponent)(segment)).join("/") : (0, _extended_encode_uri_component__WEBPACK_IMPORTED_MODULE_0__.extendedEncodeURIComponent)(labelValue));
    } else throw new Error("No value provided for input HTTP label: " + memberName + ".");
    return resolvedPath;
};
}),
"./node_modules/.pnpm/@smithy+smithy-client@2.3.1/node_modules/@smithy/smithy-client/dist-es/serde-json.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  _json: function() { return _json; }
});
const _json = (obj)=>{
    if (obj == null) return {};
    if (Array.isArray(obj)) return obj.filter((_)=>_ != null).map(_json);
    if (typeof obj === "object") {
        const target = {};
        for (const key of Object.keys(obj)){
            if (obj[key] == null) continue;
            target[key] = _json(obj[key]);
        }
        return target;
    }
    return obj;
};
}),
"./node_modules/.pnpm/@smithy+types@2.9.1/node_modules/@smithy/types/dist-es/auth/HttpApiKeyAuth.js": (function () {
"use strict";
var HttpApiKeyAuthLocation;
(function(HttpApiKeyAuthLocation) {
    HttpApiKeyAuthLocation["HEADER"] = "header";
    HttpApiKeyAuthLocation["QUERY"] = "query";
})(HttpApiKeyAuthLocation || (HttpApiKeyAuthLocation = {}));
}),
"./node_modules/.pnpm/@smithy+types@2.9.1/node_modules/@smithy/types/dist-es/auth/auth.js": (function () {
"use strict";
var HttpAuthLocation;
(function(HttpAuthLocation) {
    HttpAuthLocation["HEADER"] = "header";
    HttpAuthLocation["QUERY"] = "query";
})(HttpAuthLocation || (HttpAuthLocation = {}));
}),
"./node_modules/.pnpm/@smithy+types@2.9.1/node_modules/@smithy/types/dist-es/auth/index.js": (function (__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) {
"use strict";
/* harmony import */var _auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./auth */"./node_modules/.pnpm/@smithy+types@2.9.1/node_modules/@smithy/types/dist-es/auth/auth.js");
/* harmony import */var _HttpApiKeyAuth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./HttpApiKeyAuth */"./node_modules/.pnpm/@smithy+types@2.9.1/node_modules/@smithy/types/dist-es/auth/HttpApiKeyAuth.js");






}),
"./node_modules/.pnpm/@smithy+types@2.9.1/node_modules/@smithy/types/dist-es/endpoint.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  EndpointURLScheme: function() { return EndpointURLScheme; }
});
var EndpointURLScheme;
(function(EndpointURLScheme) {
    EndpointURLScheme["HTTP"] = "http";
    EndpointURLScheme["HTTPS"] = "https";
})(EndpointURLScheme || (EndpointURLScheme = {}));
}),
"./node_modules/.pnpm/@smithy+types@2.9.1/node_modules/@smithy/types/dist-es/extensions/checksum.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  AlgorithmId: function() { return AlgorithmId; }
});
var AlgorithmId;
(function(AlgorithmId) {
    AlgorithmId["MD5"] = "md5";
    AlgorithmId["CRC32"] = "crc32";
    AlgorithmId["CRC32C"] = "crc32c";
    AlgorithmId["SHA1"] = "sha1";
    AlgorithmId["SHA256"] = "sha256";
})(AlgorithmId || (AlgorithmId = {}));
const getChecksumConfiguration = (runtimeConfig)=>{
    const checksumAlgorithms = [];
    if (runtimeConfig.sha256 !== undefined) checksumAlgorithms.push({
        algorithmId: ()=>AlgorithmId.SHA256,
        checksumConstructor: ()=>runtimeConfig.sha256
    });
    if (runtimeConfig.md5 != undefined) checksumAlgorithms.push({
        algorithmId: ()=>AlgorithmId.MD5,
        checksumConstructor: ()=>runtimeConfig.md5
    });
    return {
        _checksumAlgorithms: checksumAlgorithms,
        addChecksumAlgorithm (algo) {
            this._checksumAlgorithms.push(algo);
        },
        checksumAlgorithms () {
            return this._checksumAlgorithms;
        }
    };
};
const resolveChecksumRuntimeConfig = (clientConfig)=>{
    const runtimeConfig = {};
    clientConfig.checksumAlgorithms().forEach((checksumAlgorithm)=>{
        runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();
    });
    return runtimeConfig;
};
}),
"./node_modules/.pnpm/@smithy+types@2.9.1/node_modules/@smithy/types/dist-es/extensions/defaultClientConfiguration.js": (function (__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) {
"use strict";
/* harmony import */var _checksum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./checksum */"./node_modules/.pnpm/@smithy+types@2.9.1/node_modules/@smithy/types/dist-es/extensions/checksum.js");

const getDefaultClientConfiguration = (runtimeConfig)=>{
    return {
        ...getChecksumConfiguration(runtimeConfig)
    };
};
const resolveDefaultRuntimeConfig = (config)=>{
    return {
        ...resolveChecksumRuntimeConfig(config)
    };
};
}),
"./node_modules/.pnpm/@smithy+types@2.9.1/node_modules/@smithy/types/dist-es/extensions/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  AlgorithmId: function() { return /* reexport safe */ _checksum__WEBPACK_IMPORTED_MODULE_2__.AlgorithmId; }
});
/* harmony import */var _defaultClientConfiguration__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./defaultClientConfiguration */"./node_modules/.pnpm/@smithy+types@2.9.1/node_modules/@smithy/types/dist-es/extensions/defaultClientConfiguration.js");
/* harmony import */var _checksum__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./checksum */"./node_modules/.pnpm/@smithy+types@2.9.1/node_modules/@smithy/types/dist-es/extensions/checksum.js");



}),
"./node_modules/.pnpm/@smithy+types@2.9.1/node_modules/@smithy/types/dist-es/http.js": (function () {
"use strict";
var FieldPosition;
(function(FieldPosition) {
    FieldPosition[FieldPosition["HEADER"] = 0] = "HEADER";
    FieldPosition[FieldPosition["TRAILER"] = 1] = "TRAILER";
})(FieldPosition || (FieldPosition = {}));
}),
"./node_modules/.pnpm/@smithy+types@2.9.1/node_modules/@smithy/types/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  AlgorithmId: function() { return /* reexport safe */ _extensions__WEBPACK_IMPORTED_MODULE_12__.AlgorithmId; },
  EndpointURLScheme: function() { return /* reexport safe */ _endpoint__WEBPACK_IMPORTED_MODULE_9__.EndpointURLScheme; },
  IniSectionType: function() { return /* reexport safe */ _profile__WEBPACK_IMPORTED_MODULE_19__.IniSectionType; },
  SMITHY_CONTEXT_KEY: function() { return /* reexport safe */ _middleware__WEBPACK_IMPORTED_MODULE_17__.SMITHY_CONTEXT_KEY; }
});
/* harmony import */var _auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./auth */"./node_modules/.pnpm/@smithy+types@2.9.1/node_modules/@smithy/types/dist-es/auth/index.js");
/* harmony import */var _endpoint__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./endpoint */"./node_modules/.pnpm/@smithy+types@2.9.1/node_modules/@smithy/types/dist-es/endpoint.js");
/* harmony import */var _extensions__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./extensions */"./node_modules/.pnpm/@smithy+types@2.9.1/node_modules/@smithy/types/dist-es/extensions/index.js");
/* harmony import */var _http__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./http */"./node_modules/.pnpm/@smithy+types@2.9.1/node_modules/@smithy/types/dist-es/http.js");
/* harmony import */var _middleware__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./middleware */"./node_modules/.pnpm/@smithy+types@2.9.1/node_modules/@smithy/types/dist-es/middleware.js");
/* harmony import */var _profile__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./profile */"./node_modules/.pnpm/@smithy+types@2.9.1/node_modules/@smithy/types/dist-es/profile.js");
/* harmony import */var _transfer__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./transfer */"./node_modules/.pnpm/@smithy+types@2.9.1/node_modules/@smithy/types/dist-es/transfer.js");




































}),
"./node_modules/.pnpm/@smithy+types@2.9.1/node_modules/@smithy/types/dist-es/middleware.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  SMITHY_CONTEXT_KEY: function() { return SMITHY_CONTEXT_KEY; }
});
const SMITHY_CONTEXT_KEY = "__smithy_context";
}),
"./node_modules/.pnpm/@smithy+types@2.9.1/node_modules/@smithy/types/dist-es/profile.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  IniSectionType: function() { return IniSectionType; }
});
var IniSectionType;
(function(IniSectionType) {
    IniSectionType["PROFILE"] = "profile";
    IniSectionType["SSO_SESSION"] = "sso-session";
    IniSectionType["SERVICES"] = "services";
})(IniSectionType || (IniSectionType = {}));
}),
"./node_modules/.pnpm/@smithy+types@2.9.1/node_modules/@smithy/types/dist-es/transfer.js": (function () {
"use strict";
var RequestHandlerProtocol;
(function(RequestHandlerProtocol) {
    RequestHandlerProtocol["HTTP_0_9"] = "http/0.9";
    RequestHandlerProtocol["HTTP_1_0"] = "http/1.0";
    RequestHandlerProtocol["TDS_8_0"] = "tds/8.0";
})(RequestHandlerProtocol || (RequestHandlerProtocol = {}));
}),
"./node_modules/.pnpm/@smithy+url-parser@2.1.1/node_modules/@smithy/url-parser/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  parseUrl: function() { return parseUrl; }
});
/* harmony import */var _smithy_querystring_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/querystring-parser */"./node_modules/.pnpm/@smithy+querystring-parser@2.1.1/node_modules/@smithy/querystring-parser/dist-es/index.js");

const parseUrl = (url)=>{
    if (typeof url === "string") return parseUrl(new URL(url));
    const { hostname, pathname, port, protocol, search } = url;
    let query;
    if (search) query = (0, _smithy_querystring_parser__WEBPACK_IMPORTED_MODULE_0__.parseQueryString)(search);
    return {
        hostname,
        port: port ? parseInt(port) : undefined,
        protocol,
        path: pathname,
        query
    };
};
}),
"./node_modules/.pnpm/@smithy+util-base64@2.1.1/node_modules/@smithy/util-base64/dist-es/fromBase64.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  fromBase64: function() { return fromBase64; }
});
/* harmony import */var _smithy_util_buffer_from__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/util-buffer-from */"./node_modules/.pnpm/@smithy+util-buffer-from@2.1.1/node_modules/@smithy/util-buffer-from/dist-es/index.js");

const BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;
const fromBase64 = (input)=>{
    if (input.length * 3 % 4 !== 0) throw new TypeError(`Incorrect padding on base64 string.`);
    if (!BASE64_REGEX.exec(input)) throw new TypeError(`Invalid base64 string.`);
    const buffer = (0, _smithy_util_buffer_from__WEBPACK_IMPORTED_MODULE_0__.fromString)(input, "base64");
    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
};
}),
"./node_modules/.pnpm/@smithy+util-base64@2.1.1/node_modules/@smithy/util-base64/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  fromBase64: function() { return /* reexport safe */ _fromBase64__WEBPACK_IMPORTED_MODULE_0__.fromBase64; },
  toBase64: function() { return /* reexport safe */ _toBase64__WEBPACK_IMPORTED_MODULE_1__.toBase64; }
});
/* harmony import */var _fromBase64__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fromBase64 */"./node_modules/.pnpm/@smithy+util-base64@2.1.1/node_modules/@smithy/util-base64/dist-es/fromBase64.js");
/* harmony import */var _toBase64__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toBase64 */"./node_modules/.pnpm/@smithy+util-base64@2.1.1/node_modules/@smithy/util-base64/dist-es/toBase64.js");


}),
"./node_modules/.pnpm/@smithy+util-base64@2.1.1/node_modules/@smithy/util-base64/dist-es/toBase64.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  toBase64: function() { return toBase64; }
});
/* harmony import */var _smithy_util_buffer_from__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/util-buffer-from */"./node_modules/.pnpm/@smithy+util-buffer-from@2.1.1/node_modules/@smithy/util-buffer-from/dist-es/index.js");

const toBase64 = (input)=>(0, _smithy_util_buffer_from__WEBPACK_IMPORTED_MODULE_0__.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("base64");
}),
"./node_modules/.pnpm/@smithy+util-body-length-node@2.2.1/node_modules/@smithy/util-body-length-node/dist-es/calculateBodyLength.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  calculateBodyLength: function() { return calculateBodyLength; }
});
/* harmony import */var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */"fs");
/* harmony import */var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);

const calculateBodyLength = (body)=>{
    if (!body) return 0;
    if (typeof body === "string") return Buffer.from(body).length;
    else if (typeof body.byteLength === "number") return body.byteLength;
    else if (typeof body.size === "number") return body.size;
    else if (typeof body.start === "number" && typeof body.end === "number") return body.end + 1 - body.start;
    else if (typeof body.path === "string" || Buffer.isBuffer(body.path)) return (0, fs__WEBPACK_IMPORTED_MODULE_0__.lstatSync)(body.path).size;
    else if (typeof body.fd === "number") return (0, fs__WEBPACK_IMPORTED_MODULE_0__.fstatSync)(body.fd).size;
    throw new Error(`Body Length computation failed for ${body}`);
};
}),
"./node_modules/.pnpm/@smithy+util-body-length-node@2.2.1/node_modules/@smithy/util-body-length-node/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  calculateBodyLength: function() { return /* reexport safe */ _calculateBodyLength__WEBPACK_IMPORTED_MODULE_0__.calculateBodyLength; }
});
/* harmony import */var _calculateBodyLength__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calculateBodyLength */"./node_modules/.pnpm/@smithy+util-body-length-node@2.2.1/node_modules/@smithy/util-body-length-node/dist-es/calculateBodyLength.js");

}),
"./node_modules/.pnpm/@smithy+util-buffer-from@2.1.1/node_modules/@smithy/util-buffer-from/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  fromArrayBuffer: function() { return fromArrayBuffer; },
  fromString: function() { return fromString; }
});
/* harmony import */var _smithy_is_array_buffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/is-array-buffer */"./node_modules/.pnpm/@smithy+is-array-buffer@2.1.1/node_modules/@smithy/is-array-buffer/dist-es/index.js");
/* harmony import */var buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer */"buffer");
/* harmony import */var buffer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(buffer__WEBPACK_IMPORTED_MODULE_0__);


const fromArrayBuffer = (input, offset = 0, length = input.byteLength - offset)=>{
    if (!(0, _smithy_is_array_buffer__WEBPACK_IMPORTED_MODULE_1__.isArrayBuffer)(input)) throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(input, offset, length);
};
const fromString = (input, encoding)=>{
    if (typeof input !== "string") throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
    return encoding ? buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(input, encoding) : buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(input);
};
}),
"./node_modules/.pnpm/@smithy+util-config-provider@2.2.1/node_modules/@smithy/util-config-provider/dist-es/booleanSelector.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  booleanSelector: function() { return booleanSelector; }
});
const booleanSelector = (obj, key, type)=>{
    if (!(key in obj)) return undefined;
    if (obj[key] === "true") return true;
    if (obj[key] === "false") return false;
    throw new Error(`Cannot load ${type} "${key}". Expected "true" or "false", got ${obj[key]}.`);
};
}),
"./node_modules/.pnpm/@smithy+util-config-provider@2.2.1/node_modules/@smithy/util-config-provider/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  SelectorType: function() { return /* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.SelectorType; },
  booleanSelector: function() { return /* reexport safe */ _booleanSelector__WEBPACK_IMPORTED_MODULE_0__.booleanSelector; }
});
/* harmony import */var _booleanSelector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./booleanSelector */"./node_modules/.pnpm/@smithy+util-config-provider@2.2.1/node_modules/@smithy/util-config-provider/dist-es/booleanSelector.js");
/* harmony import */var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types */"./node_modules/.pnpm/@smithy+util-config-provider@2.2.1/node_modules/@smithy/util-config-provider/dist-es/types.js");



}),
"./node_modules/.pnpm/@smithy+util-config-provider@2.2.1/node_modules/@smithy/util-config-provider/dist-es/types.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  SelectorType: function() { return SelectorType; }
});
var SelectorType;
(function(SelectorType) {
    SelectorType["ENV"] = "env";
    SelectorType["CONFIG"] = "shared config entry";
})(SelectorType || (SelectorType = {}));
}),
"./node_modules/.pnpm/@smithy+util-defaults-mode-node@2.1.1/node_modules/@smithy/util-defaults-mode-node/dist-es/constants.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  AWS_DEFAULT_REGION_ENV: function() { return AWS_DEFAULT_REGION_ENV; },
  AWS_EXECUTION_ENV: function() { return AWS_EXECUTION_ENV; },
  AWS_REGION_ENV: function() { return AWS_REGION_ENV; },
  DEFAULTS_MODE_OPTIONS: function() { return DEFAULTS_MODE_OPTIONS; },
  ENV_IMDS_DISABLED: function() { return ENV_IMDS_DISABLED; },
  IMDS_REGION_PATH: function() { return IMDS_REGION_PATH; }
});
const AWS_EXECUTION_ENV = "AWS_EXECUTION_ENV";
const AWS_REGION_ENV = "AWS_REGION";
const AWS_DEFAULT_REGION_ENV = "AWS_DEFAULT_REGION";
const ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
const DEFAULTS_MODE_OPTIONS = [
    "in-region",
    "cross-region",
    "mobile",
    "standard",
    "legacy"
];
const IMDS_REGION_PATH = "/latest/meta-data/placement/region";
}),
"./node_modules/.pnpm/@smithy+util-defaults-mode-node@2.1.1/node_modules/@smithy/util-defaults-mode-node/dist-es/defaultsModeConfig.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  NODE_DEFAULTS_MODE_CONFIG_OPTIONS: function() { return NODE_DEFAULTS_MODE_CONFIG_OPTIONS; }
});
const AWS_DEFAULTS_MODE_ENV = "AWS_DEFAULTS_MODE";
const AWS_DEFAULTS_MODE_CONFIG = "defaults_mode";
const NODE_DEFAULTS_MODE_CONFIG_OPTIONS = {
    environmentVariableSelector: (env)=>{
        return env[AWS_DEFAULTS_MODE_ENV];
    },
    configFileSelector: (profile)=>{
        return profile[AWS_DEFAULTS_MODE_CONFIG];
    },
    default: "legacy"
};
}),
"./node_modules/.pnpm/@smithy+util-defaults-mode-node@2.1.1/node_modules/@smithy/util-defaults-mode-node/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  resolveDefaultsModeConfig: function() { return /* reexport safe */ _resolveDefaultsModeConfig__WEBPACK_IMPORTED_MODULE_0__.resolveDefaultsModeConfig; }
});
/* harmony import */var _resolveDefaultsModeConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./resolveDefaultsModeConfig */"./node_modules/.pnpm/@smithy+util-defaults-mode-node@2.1.1/node_modules/@smithy/util-defaults-mode-node/dist-es/resolveDefaultsModeConfig.js");

}),
"./node_modules/.pnpm/@smithy+util-defaults-mode-node@2.1.1/node_modules/@smithy/util-defaults-mode-node/dist-es/resolveDefaultsModeConfig.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  resolveDefaultsModeConfig: function() { return resolveDefaultsModeConfig; }
});
/* harmony import */var _smithy_config_resolver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/config-resolver */"./node_modules/.pnpm/@smithy+config-resolver@2.1.1/node_modules/@smithy/config-resolver/dist-es/index.js");
/* harmony import */var _smithy_credential_provider_imds__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/credential-provider-imds */"./node_modules/.pnpm/@smithy+credential-provider-imds@2.2.1/node_modules/@smithy/credential-provider-imds/dist-es/index.js");
/* harmony import */var _smithy_node_config_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @smithy/node-config-provider */"./node_modules/.pnpm/@smithy+node-config-provider@2.2.1/node_modules/@smithy/node-config-provider/dist-es/index.js");
/* harmony import */var _smithy_property_provider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @smithy/property-provider */"./node_modules/.pnpm/@smithy+property-provider@2.1.1/node_modules/@smithy/property-provider/dist-es/memoize.js");
/* harmony import */var _constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./constants */"./node_modules/.pnpm/@smithy+util-defaults-mode-node@2.1.1/node_modules/@smithy/util-defaults-mode-node/dist-es/constants.js");
/* harmony import */var _defaultsModeConfig__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./defaultsModeConfig */"./node_modules/.pnpm/@smithy+util-defaults-mode-node@2.1.1/node_modules/@smithy/util-defaults-mode-node/dist-es/defaultsModeConfig.js");






const resolveDefaultsModeConfig = ({ region = (0, _smithy_node_config_provider__WEBPACK_IMPORTED_MODULE_2__.loadConfig)(_smithy_config_resolver__WEBPACK_IMPORTED_MODULE_0__.NODE_REGION_CONFIG_OPTIONS), defaultsMode = (0, _smithy_node_config_provider__WEBPACK_IMPORTED_MODULE_2__.loadConfig)(_defaultsModeConfig__WEBPACK_IMPORTED_MODULE_3__.NODE_DEFAULTS_MODE_CONFIG_OPTIONS) } = {})=>(0, _smithy_property_provider__WEBPACK_IMPORTED_MODULE_4__.memoize)(async ()=>{
        const mode = typeof defaultsMode === "function" ? await defaultsMode() : defaultsMode;
        switch(mode?.toLowerCase()){
            case "auto":
                return resolveNodeDefaultsModeAuto(region);
            case "in-region":
            case "cross-region":
            case "mobile":
            case "standard":
            case "legacy":
                return Promise.resolve(mode?.toLocaleLowerCase());
            case undefined:
                return Promise.resolve("legacy");
            default:
                throw new Error(`Invalid parameter for "defaultsMode", expect ${_constants__WEBPACK_IMPORTED_MODULE_5__.DEFAULTS_MODE_OPTIONS.join(", ")}, got ${mode}`);
        }
    });
const resolveNodeDefaultsModeAuto = async (clientRegion)=>{
    if (clientRegion) {
        const resolvedRegion = typeof clientRegion === "function" ? await clientRegion() : clientRegion;
        const inferredRegion = await inferPhysicalRegion();
        if (!inferredRegion) return "standard";
        if (resolvedRegion === inferredRegion) return "in-region";
        else return "cross-region";
    }
    return "standard";
};
const inferPhysicalRegion = async ()=>{
    if (process.env[_constants__WEBPACK_IMPORTED_MODULE_5__.AWS_EXECUTION_ENV] && (process.env[_constants__WEBPACK_IMPORTED_MODULE_5__.AWS_REGION_ENV] || process.env[_constants__WEBPACK_IMPORTED_MODULE_5__.AWS_DEFAULT_REGION_ENV])) return process.env[_constants__WEBPACK_IMPORTED_MODULE_5__.AWS_REGION_ENV] ?? process.env[_constants__WEBPACK_IMPORTED_MODULE_5__.AWS_DEFAULT_REGION_ENV];
    if (!process.env[_constants__WEBPACK_IMPORTED_MODULE_5__.ENV_IMDS_DISABLED]) try {
        const endpoint = await (0, _smithy_credential_provider_imds__WEBPACK_IMPORTED_MODULE_1__.getInstanceMetadataEndpoint)();
        return (await (0, _smithy_credential_provider_imds__WEBPACK_IMPORTED_MODULE_1__.httpRequest)({
            ...endpoint,
            path: _constants__WEBPACK_IMPORTED_MODULE_5__.IMDS_REGION_PATH
        })).toString();
    } catch (e) {}
};
}),
"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/debug/debugId.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  debugId: function() { return debugId; }
});
const debugId = "endpoints";
}),
"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/debug/toDebugString.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  toDebugString: function() { return toDebugString; }
});
function toDebugString(input) {
    if (typeof input !== "object" || input == null) return input;
    if ("ref" in input) return `$${toDebugString(input.ref)}`;
    if ("fn" in input) return `${input.fn}(${(input.argv || []).map(toDebugString).join(", ")})`;
    return JSON.stringify(input, null, 2);
}
}),
"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  customEndpointFunctions: function() { return /* reexport safe */ _utils_customEndpointFunctions__WEBPACK_IMPORTED_MODULE_2__.customEndpointFunctions; },
  isIpAddress: function() { return /* reexport safe */ _lib_isIpAddress__WEBPACK_IMPORTED_MODULE_0__.isIpAddress; },
  isValidHostLabel: function() { return /* reexport safe */ _lib_isValidHostLabel__WEBPACK_IMPORTED_MODULE_1__.isValidHostLabel; },
  resolveEndpoint: function() { return /* reexport safe */ _resolveEndpoint__WEBPACK_IMPORTED_MODULE_3__.resolveEndpoint; }
});
/* harmony import */var _lib_isIpAddress__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/isIpAddress */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/lib/isIpAddress.js");
/* harmony import */var _lib_isValidHostLabel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/isValidHostLabel */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/lib/isValidHostLabel.js");
/* harmony import */var _utils_customEndpointFunctions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/customEndpointFunctions */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/customEndpointFunctions.js");
/* harmony import */var _resolveEndpoint__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./resolveEndpoint */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/resolveEndpoint.js");





}),
"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/lib/booleanEquals.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  booleanEquals: function() { return booleanEquals; }
});
const booleanEquals = (value1, value2)=>value1 === value2;
}),
"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/lib/getAttr.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getAttr: function() { return getAttr; }
});
/* harmony import */var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/types/EndpointError.js");
/* harmony import */var _getAttrPathList__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getAttrPathList */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/lib/getAttrPathList.js");


const getAttr = (value, path)=>(0, _getAttrPathList__WEBPACK_IMPORTED_MODULE_0__.getAttrPathList)(path).reduce((acc, index)=>{
        if (typeof acc !== "object") throw new _types__WEBPACK_IMPORTED_MODULE_1__.EndpointError(`Index '${index}' in '${path}' not found in '${JSON.stringify(value)}'`);
        else if (Array.isArray(acc)) return acc[parseInt(index)];
        return acc[index];
    }, value);
}),
"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/lib/getAttrPathList.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getAttrPathList: function() { return getAttrPathList; }
});
/* harmony import */var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/types/EndpointError.js");

const getAttrPathList = (path)=>{
    const parts = path.split(".");
    const pathList = [];
    for (const part of parts){
        const squareBracketIndex = part.indexOf("[");
        if (squareBracketIndex !== -1) {
            if (part.indexOf("]") !== part.length - 1) throw new _types__WEBPACK_IMPORTED_MODULE_0__.EndpointError(`Path: '${path}' does not end with ']'`);
            const arrayIndex = part.slice(squareBracketIndex + 1, -1);
            if (Number.isNaN(parseInt(arrayIndex))) throw new _types__WEBPACK_IMPORTED_MODULE_0__.EndpointError(`Invalid array index: '${arrayIndex}' in path: '${path}'`);
            if (squareBracketIndex !== 0) pathList.push(part.slice(0, squareBracketIndex));
            pathList.push(arrayIndex);
        } else pathList.push(part);
    }
    return pathList;
};
}),
"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/lib/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  booleanEquals: function() { return /* reexport safe */ _booleanEquals__WEBPACK_IMPORTED_MODULE_0__.booleanEquals; },
  getAttr: function() { return /* reexport safe */ _getAttr__WEBPACK_IMPORTED_MODULE_1__.getAttr; },
  isSet: function() { return /* reexport safe */ _isSet__WEBPACK_IMPORTED_MODULE_2__.isSet; },
  isValidHostLabel: function() { return /* reexport safe */ _isValidHostLabel__WEBPACK_IMPORTED_MODULE_3__.isValidHostLabel; },
  not: function() { return /* reexport safe */ _not__WEBPACK_IMPORTED_MODULE_4__.not; },
  parseURL: function() { return /* reexport safe */ _parseURL__WEBPACK_IMPORTED_MODULE_5__.parseURL; },
  stringEquals: function() { return /* reexport safe */ _stringEquals__WEBPACK_IMPORTED_MODULE_6__.stringEquals; },
  substring: function() { return /* reexport safe */ _substring__WEBPACK_IMPORTED_MODULE_7__.substring; },
  uriEncode: function() { return /* reexport safe */ _uriEncode__WEBPACK_IMPORTED_MODULE_8__.uriEncode; }
});
/* harmony import */var _booleanEquals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./booleanEquals */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/lib/booleanEquals.js");
/* harmony import */var _getAttr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getAttr */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/lib/getAttr.js");
/* harmony import */var _isSet__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isSet */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/lib/isSet.js");
/* harmony import */var _isValidHostLabel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./isValidHostLabel */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/lib/isValidHostLabel.js");
/* harmony import */var _not__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./not */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/lib/not.js");
/* harmony import */var _parseURL__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./parseURL */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/lib/parseURL.js");
/* harmony import */var _stringEquals__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./stringEquals */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/lib/stringEquals.js");
/* harmony import */var _substring__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./substring */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/lib/substring.js");
/* harmony import */var _uriEncode__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./uriEncode */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/lib/uriEncode.js");









}),
"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/lib/isIpAddress.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  isIpAddress: function() { return isIpAddress; }
});
const IP_V4_REGEX = new RegExp(`^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$`);
const isIpAddress = (value)=>IP_V4_REGEX.test(value) || value.startsWith("[") && value.endsWith("]");
}),
"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/lib/isSet.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  isSet: function() { return isSet; }
});
const isSet = (value)=>value != null;
}),
"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/lib/isValidHostLabel.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  isValidHostLabel: function() { return isValidHostLabel; }
});
const VALID_HOST_LABEL_REGEX = new RegExp(`^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$`);
const isValidHostLabel = (value, allowSubDomains = false)=>{
    if (!allowSubDomains) return VALID_HOST_LABEL_REGEX.test(value);
    const labels = value.split(".");
    for (const label of labels){
        if (!isValidHostLabel(label)) return false;
    }
    return true;
};
}),
"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/lib/not.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  not: function() { return not; }
});
const not = (value)=>!value;
}),
"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/lib/parseURL.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  parseURL: function() { return parseURL; }
});
/* harmony import */var _smithy_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/types */"./node_modules/.pnpm/@smithy+types@2.9.1/node_modules/@smithy/types/dist-es/index.js");
/* harmony import */var _isIpAddress__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isIpAddress */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/lib/isIpAddress.js");


const DEFAULT_PORTS = {
    [_smithy_types__WEBPACK_IMPORTED_MODULE_0__.EndpointURLScheme.HTTP]: 80,
    [_smithy_types__WEBPACK_IMPORTED_MODULE_0__.EndpointURLScheme.HTTPS]: 443
};
const parseURL = (value)=>{
    const whatwgURL = (()=>{
        try {
            if (value instanceof URL) return value;
            if (typeof value === "object" && "hostname" in value) {
                const { hostname, port, protocol = "", path = "", query = {} } = value;
                const url = new URL(`${protocol}//${hostname}${port ? `:${port}` : ""}${path}`);
                url.search = Object.entries(query).map(([k, v])=>`${k}=${v}`).join("&");
                return url;
            }
            return new URL(value);
        } catch (error) {
            return null;
        }
    })();
    if (!whatwgURL) {
        console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);
        return null;
    }
    const urlString = whatwgURL.href;
    const { host, hostname, pathname, protocol, search } = whatwgURL;
    if (search) return null;
    const scheme = protocol.slice(0, -1);
    if (!Object.values(_smithy_types__WEBPACK_IMPORTED_MODULE_0__.EndpointURLScheme).includes(scheme)) return null;
    const isIp = (0, _isIpAddress__WEBPACK_IMPORTED_MODULE_1__.isIpAddress)(hostname);
    const inputContainsDefaultPort = urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) || typeof value === "string" && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`);
    const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;
    return {
        scheme,
        authority,
        path: pathname,
        normalizedPath: pathname.endsWith("/") ? pathname : `${pathname}/`,
        isIp
    };
};
}),
"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/lib/stringEquals.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  stringEquals: function() { return stringEquals; }
});
const stringEquals = (value1, value2)=>value1 === value2;
}),
"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/lib/substring.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  substring: function() { return substring; }
});
const substring = (input, start, stop, reverse)=>{
    if (start >= stop || input.length < stop) return null;
    if (!reverse) return input.substring(start, stop);
    return input.substring(input.length - stop, input.length - start);
};
}),
"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/lib/uriEncode.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  uriEncode: function() { return uriEncode; }
});
const uriEncode = (value)=>encodeURIComponent(value).replace(/[!*'()]/g, (c)=>`%${c.charCodeAt(0).toString(16).toUpperCase()}`);
}),
"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/resolveEndpoint.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  resolveEndpoint: function() { return resolveEndpoint; }
});
/* harmony import */var _debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./debug */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/debug/debugId.js");
/* harmony import */var _debug__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./debug */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/debug/toDebugString.js");
/* harmony import */var _types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/types/EndpointError.js");
/* harmony import */var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/index.js");



const resolveEndpoint = (ruleSetObject, options)=>{
    const { endpointParams, logger } = options;
    const { parameters, rules } = ruleSetObject;
    options.logger?.debug?.(`${_debug__WEBPACK_IMPORTED_MODULE_1__.debugId} Initial EndpointParams: ${(0, _debug__WEBPACK_IMPORTED_MODULE_2__.toDebugString)(endpointParams)}`);
    const paramsWithDefault = Object.entries(parameters).filter(([, v])=>v.default != null).map(([k, v])=>[
            k,
            v.default
        ]);
    if (paramsWithDefault.length > 0) for (const [paramKey, paramDefaultValue] of paramsWithDefault)endpointParams[paramKey] = endpointParams[paramKey] ?? paramDefaultValue;
    const requiredParams = Object.entries(parameters).filter(([, v])=>v.required).map(([k])=>k);
    for (const requiredParam of requiredParams){
        if (endpointParams[requiredParam] == null) throw new _types__WEBPACK_IMPORTED_MODULE_3__.EndpointError(`Missing required parameter: '${requiredParam}'`);
    }
    const endpoint = (0, _utils__WEBPACK_IMPORTED_MODULE_0__.evaluateRules)(rules, {
        endpointParams,
        logger,
        referenceRecord: {}
    });
    if (options.endpointParams?.Endpoint) try {
        const givenEndpoint = new URL(options.endpointParams.Endpoint);
        const { protocol, port } = givenEndpoint;
        endpoint.url.protocol = protocol;
        endpoint.url.port = port;
    } catch (e) {}
    options.logger?.debug?.(`${_debug__WEBPACK_IMPORTED_MODULE_1__.debugId} Resolved endpoint: ${(0, _debug__WEBPACK_IMPORTED_MODULE_2__.toDebugString)(endpoint)}`);
    return endpoint;
};
}),
"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/types/EndpointError.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  EndpointError: function() { return EndpointError; }
});
class EndpointError extends Error {
    constructor(message){
        super(message);
        this.name = "EndpointError";
    }
}
}),
"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/callFunction.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  callFunction: function() { return callFunction; }
});
/* harmony import */var _customEndpointFunctions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./customEndpointFunctions */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/customEndpointFunctions.js");
/* harmony import */var _endpointFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./endpointFunctions */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/endpointFunctions.js");
/* harmony import */var _evaluateExpression__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./evaluateExpression */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateExpression.js");



const callFunction = ({ fn, argv }, options)=>{
    const evaluatedArgs = argv.map((arg)=>[
            "boolean",
            "number"
        ].includes(typeof arg) ? arg : (0, _evaluateExpression__WEBPACK_IMPORTED_MODULE_1__.evaluateExpression)(arg, "arg", options));
    const fnSegments = fn.split(".");
    if (fnSegments[0] in _customEndpointFunctions__WEBPACK_IMPORTED_MODULE_2__.customEndpointFunctions && fnSegments[1] != null) return (0, _customEndpointFunctions__WEBPACK_IMPORTED_MODULE_2__.customEndpointFunctions)[fnSegments[0]][fnSegments[1]](...evaluatedArgs);
    return (0, _endpointFunctions__WEBPACK_IMPORTED_MODULE_0__.endpointFunctions)[fn](...evaluatedArgs);
};
}),
"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/customEndpointFunctions.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  customEndpointFunctions: function() { return customEndpointFunctions; }
});
const customEndpointFunctions = {};
}),
"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/endpointFunctions.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  endpointFunctions: function() { return endpointFunctions; }
});
/* harmony import */var _lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/lib/index.js");

const endpointFunctions = {
    booleanEquals: _lib__WEBPACK_IMPORTED_MODULE_0__.booleanEquals,
    getAttr: _lib__WEBPACK_IMPORTED_MODULE_0__.getAttr,
    isSet: _lib__WEBPACK_IMPORTED_MODULE_0__.isSet,
    isValidHostLabel: _lib__WEBPACK_IMPORTED_MODULE_0__.isValidHostLabel,
    not: _lib__WEBPACK_IMPORTED_MODULE_0__.not,
    parseURL: _lib__WEBPACK_IMPORTED_MODULE_0__.parseURL,
    stringEquals: _lib__WEBPACK_IMPORTED_MODULE_0__.stringEquals,
    substring: _lib__WEBPACK_IMPORTED_MODULE_0__.substring,
    uriEncode: _lib__WEBPACK_IMPORTED_MODULE_0__.uriEncode
};
}),
"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateCondition.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  evaluateCondition: function() { return evaluateCondition; }
});
/* harmony import */var _debug__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../debug */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/debug/debugId.js");
/* harmony import */var _debug__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../debug */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/debug/toDebugString.js");
/* harmony import */var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/types/EndpointError.js");
/* harmony import */var _callFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./callFunction */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/callFunction.js");



const evaluateCondition = ({ assign, ...fnArgs }, options)=>{
    if (assign && assign in options.referenceRecord) throw new _types__WEBPACK_IMPORTED_MODULE_1__.EndpointError(`'${assign}' is already defined in Reference Record.`);
    const value = (0, _callFunction__WEBPACK_IMPORTED_MODULE_0__.callFunction)(fnArgs, options);
    options.logger?.debug?.(_debug__WEBPACK_IMPORTED_MODULE_2__.debugId, `evaluateCondition: ${(0, _debug__WEBPACK_IMPORTED_MODULE_3__.toDebugString)(fnArgs)} = ${(0, _debug__WEBPACK_IMPORTED_MODULE_3__.toDebugString)(value)}`);
    return {
        result: value === "" ? true : !!value,
        ...assign != null && {
            toAssign: {
                name: assign,
                value
            }
        }
    };
};
}),
"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateConditions.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  evaluateConditions: function() { return evaluateConditions; }
});
/* harmony import */var _debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../debug */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/debug/debugId.js");
/* harmony import */var _debug__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../debug */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/debug/toDebugString.js");
/* harmony import */var _evaluateCondition__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./evaluateCondition */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateCondition.js");


const evaluateConditions = (conditions = [], options)=>{
    const conditionsReferenceRecord = {};
    for (const condition of conditions){
        const { result, toAssign } = (0, _evaluateCondition__WEBPACK_IMPORTED_MODULE_0__.evaluateCondition)(condition, {
            ...options,
            referenceRecord: {
                ...options.referenceRecord,
                ...conditionsReferenceRecord
            }
        });
        if (!result) return {
            result
        };
        if (toAssign) {
            conditionsReferenceRecord[toAssign.name] = toAssign.value;
            options.logger?.debug?.(_debug__WEBPACK_IMPORTED_MODULE_1__.debugId, `assign: ${toAssign.name} := ${(0, _debug__WEBPACK_IMPORTED_MODULE_2__.toDebugString)(toAssign.value)}`);
        }
    }
    return {
        result: true,
        referenceRecord: conditionsReferenceRecord
    };
};
}),
"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateEndpointRule.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  evaluateEndpointRule: function() { return evaluateEndpointRule; }
});
/* harmony import */var _debug__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../debug */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/debug/debugId.js");
/* harmony import */var _debug__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../debug */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/debug/toDebugString.js");
/* harmony import */var _evaluateConditions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./evaluateConditions */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateConditions.js");
/* harmony import */var _getEndpointHeaders__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getEndpointHeaders */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/getEndpointHeaders.js");
/* harmony import */var _getEndpointProperties__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getEndpointProperties */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/getEndpointProperties.js");
/* harmony import */var _getEndpointUrl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getEndpointUrl */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/getEndpointUrl.js");





const evaluateEndpointRule = (endpointRule, options)=>{
    const { conditions, endpoint } = endpointRule;
    const { result, referenceRecord } = (0, _evaluateConditions__WEBPACK_IMPORTED_MODULE_0__.evaluateConditions)(conditions, options);
    if (!result) return;
    const endpointRuleOptions = {
        ...options,
        referenceRecord: {
            ...options.referenceRecord,
            ...referenceRecord
        }
    };
    const { url, properties, headers } = endpoint;
    options.logger?.debug?.(_debug__WEBPACK_IMPORTED_MODULE_4__.debugId, `Resolving endpoint from template: ${(0, _debug__WEBPACK_IMPORTED_MODULE_5__.toDebugString)(endpoint)}`);
    return {
        ...headers != undefined && {
            headers: (0, _getEndpointHeaders__WEBPACK_IMPORTED_MODULE_1__.getEndpointHeaders)(headers, endpointRuleOptions)
        },
        ...properties != undefined && {
            properties: (0, _getEndpointProperties__WEBPACK_IMPORTED_MODULE_2__.getEndpointProperties)(properties, endpointRuleOptions)
        },
        url: (0, _getEndpointUrl__WEBPACK_IMPORTED_MODULE_3__.getEndpointUrl)(url, endpointRuleOptions)
    };
};
}),
"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateErrorRule.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  evaluateErrorRule: function() { return evaluateErrorRule; }
});
/* harmony import */var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../types */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/types/EndpointError.js");
/* harmony import */var _evaluateConditions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./evaluateConditions */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateConditions.js");
/* harmony import */var _evaluateExpression__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./evaluateExpression */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateExpression.js");



const evaluateErrorRule = (errorRule, options)=>{
    const { conditions, error } = errorRule;
    const { result, referenceRecord } = (0, _evaluateConditions__WEBPACK_IMPORTED_MODULE_0__.evaluateConditions)(conditions, options);
    if (!result) return;
    throw new _types__WEBPACK_IMPORTED_MODULE_2__.EndpointError((0, _evaluateExpression__WEBPACK_IMPORTED_MODULE_1__.evaluateExpression)(error, "Error", {
        ...options,
        referenceRecord: {
            ...options.referenceRecord,
            ...referenceRecord
        }
    }));
};
}),
"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateExpression.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  evaluateExpression: function() { return evaluateExpression; }
});
/* harmony import */var _types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../types */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/types/EndpointError.js");
/* harmony import */var _callFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./callFunction */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/callFunction.js");
/* harmony import */var _evaluateTemplate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./evaluateTemplate */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateTemplate.js");
/* harmony import */var _getReferenceValue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getReferenceValue */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/getReferenceValue.js");




const evaluateExpression = (obj, keyName, options)=>{
    if (typeof obj === "string") return (0, _evaluateTemplate__WEBPACK_IMPORTED_MODULE_1__.evaluateTemplate)(obj, options);
    else if (obj["fn"]) return (0, _callFunction__WEBPACK_IMPORTED_MODULE_0__.callFunction)(obj, options);
    else if (obj["ref"]) return (0, _getReferenceValue__WEBPACK_IMPORTED_MODULE_2__.getReferenceValue)(obj, options);
    throw new _types__WEBPACK_IMPORTED_MODULE_3__.EndpointError(`'${keyName}': ${String(obj)} is not a string, function or reference.`);
};
}),
"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateRules.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  evaluateRules: function() { return evaluateRules; }
});
/* harmony import */var _types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../types */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/types/EndpointError.js");
/* harmony import */var _evaluateEndpointRule__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./evaluateEndpointRule */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateEndpointRule.js");
/* harmony import */var _evaluateErrorRule__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./evaluateErrorRule */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateErrorRule.js");
/* harmony import */var _evaluateTreeRule__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./evaluateTreeRule */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateTreeRule.js");




const evaluateRules = (rules, options)=>{
    for (const rule of rules){
        if (rule.type === "endpoint") {
            const endpointOrUndefined = (0, _evaluateEndpointRule__WEBPACK_IMPORTED_MODULE_0__.evaluateEndpointRule)(rule, options);
            if (endpointOrUndefined) return endpointOrUndefined;
        } else if (rule.type === "error") (0, _evaluateErrorRule__WEBPACK_IMPORTED_MODULE_1__.evaluateErrorRule)(rule, options);
        else if (rule.type === "tree") {
            const endpointOrUndefined = (0, _evaluateTreeRule__WEBPACK_IMPORTED_MODULE_2__.evaluateTreeRule)(rule, options);
            if (endpointOrUndefined) return endpointOrUndefined;
        } else throw new _types__WEBPACK_IMPORTED_MODULE_3__.EndpointError(`Unknown endpoint rule: ${rule}`);
    }
    throw new _types__WEBPACK_IMPORTED_MODULE_3__.EndpointError(`Rules evaluation failed`);
};
}),
"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateTemplate.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  evaluateTemplate: function() { return evaluateTemplate; }
});
/* harmony import */var _lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/lib/index.js");

const evaluateTemplate = (template, options)=>{
    const evaluatedTemplateArr = [];
    const templateContext = {
        ...options.endpointParams,
        ...options.referenceRecord
    };
    let currentIndex = 0;
    while(currentIndex < template.length){
        const openingBraceIndex = template.indexOf("{", currentIndex);
        if (openingBraceIndex === -1) {
            evaluatedTemplateArr.push(template.slice(currentIndex));
            break;
        }
        evaluatedTemplateArr.push(template.slice(currentIndex, openingBraceIndex));
        const closingBraceIndex = template.indexOf("}", openingBraceIndex);
        if (closingBraceIndex === -1) {
            evaluatedTemplateArr.push(template.slice(openingBraceIndex));
            break;
        }
        if (template[openingBraceIndex + 1] === "{" && template[closingBraceIndex + 1] === "}") {
            evaluatedTemplateArr.push(template.slice(openingBraceIndex + 1, closingBraceIndex));
            currentIndex = closingBraceIndex + 2;
        }
        const parameterName = template.substring(openingBraceIndex + 1, closingBraceIndex);
        if (parameterName.includes("#")) {
            const [refName, attrName] = parameterName.split("#");
            evaluatedTemplateArr.push((0, _lib__WEBPACK_IMPORTED_MODULE_0__.getAttr)(templateContext[refName], attrName));
        } else evaluatedTemplateArr.push(templateContext[parameterName]);
        currentIndex = closingBraceIndex + 1;
    }
    return evaluatedTemplateArr.join("");
};
}),
"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateTreeRule.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  evaluateTreeRule: function() { return evaluateTreeRule; }
});
/* harmony import */var _evaluateConditions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./evaluateConditions */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateConditions.js");
/* harmony import */var _evaluateRules__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./evaluateRules */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateRules.js");


const evaluateTreeRule = (treeRule, options)=>{
    const { conditions, rules } = treeRule;
    const { result, referenceRecord } = (0, _evaluateConditions__WEBPACK_IMPORTED_MODULE_0__.evaluateConditions)(conditions, options);
    if (!result) return;
    return (0, _evaluateRules__WEBPACK_IMPORTED_MODULE_1__.evaluateRules)(rules, {
        ...options,
        referenceRecord: {
            ...options.referenceRecord,
            ...referenceRecord
        }
    });
};
}),
"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/getEndpointHeaders.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getEndpointHeaders: function() { return getEndpointHeaders; }
});
/* harmony import */var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/types/EndpointError.js");
/* harmony import */var _evaluateExpression__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./evaluateExpression */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateExpression.js");


const getEndpointHeaders = (headers, options)=>Object.entries(headers).reduce((acc, [headerKey, headerVal])=>({
            ...acc,
            [headerKey]: headerVal.map((headerValEntry)=>{
                const processedExpr = (0, _evaluateExpression__WEBPACK_IMPORTED_MODULE_0__.evaluateExpression)(headerValEntry, "Header value entry", options);
                if (typeof processedExpr !== "string") throw new _types__WEBPACK_IMPORTED_MODULE_1__.EndpointError(`Header '${headerKey}' value '${processedExpr}' is not a string`);
                return processedExpr;
            })
        }), {});
}),
"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/getEndpointProperties.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getEndpointProperties: function() { return getEndpointProperties; }
});
/* harmony import */var _getEndpointProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getEndpointProperty */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/getEndpointProperty.js");

const getEndpointProperties = (properties, options)=>Object.entries(properties).reduce((acc, [propertyKey, propertyVal])=>({
            ...acc,
            [propertyKey]: (0, _getEndpointProperty__WEBPACK_IMPORTED_MODULE_0__.getEndpointProperty)(propertyVal, options)
        }), {});
}),
"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/getEndpointProperty.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getEndpointProperty: function() { return getEndpointProperty; }
});
/* harmony import */var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../types */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/types/EndpointError.js");
/* harmony import */var _evaluateTemplate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./evaluateTemplate */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateTemplate.js");
/* harmony import */var _getEndpointProperties__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getEndpointProperties */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/getEndpointProperties.js");



const getEndpointProperty = (property, options)=>{
    if (Array.isArray(property)) return property.map((propertyEntry)=>getEndpointProperty(propertyEntry, options));
    switch(typeof property){
        case "string":
            return (0, _evaluateTemplate__WEBPACK_IMPORTED_MODULE_0__.evaluateTemplate)(property, options);
        case "object":
            if (property === null) throw new _types__WEBPACK_IMPORTED_MODULE_2__.EndpointError(`Unexpected endpoint property: ${property}`);
            return (0, _getEndpointProperties__WEBPACK_IMPORTED_MODULE_1__.getEndpointProperties)(property, options);
        case "boolean":
            return property;
        default:
            throw new _types__WEBPACK_IMPORTED_MODULE_2__.EndpointError(`Unexpected endpoint property type: ${typeof property}`);
    }
};
}),
"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/getEndpointUrl.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getEndpointUrl: function() { return getEndpointUrl; }
});
/* harmony import */var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/types/EndpointError.js");
/* harmony import */var _evaluateExpression__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./evaluateExpression */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateExpression.js");


const getEndpointUrl = (endpointUrl, options)=>{
    const expression = (0, _evaluateExpression__WEBPACK_IMPORTED_MODULE_0__.evaluateExpression)(endpointUrl, "Endpoint URL", options);
    if (typeof expression === "string") try {
        return new URL(expression);
    } catch (error) {
        console.error(`Failed to construct URL with ${expression}`, error);
        throw error;
    }
    throw new _types__WEBPACK_IMPORTED_MODULE_1__.EndpointError(`Endpoint URL must be a string, got ${typeof expression}`);
};
}),
"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/getReferenceValue.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getReferenceValue: function() { return getReferenceValue; }
});
const getReferenceValue = ({ ref }, options)=>{
    const referenceRecord = {
        ...options.endpointParams,
        ...options.referenceRecord
    };
    return referenceRecord[ref];
};
}),
"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  evaluateRules: function() { return /* reexport safe */ _evaluateRules__WEBPACK_IMPORTED_MODULE_1__.evaluateRules; }
});
/* harmony import */var _evaluateRules__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./evaluateRules */"./node_modules/.pnpm/@smithy+util-endpoints@1.1.1/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateRules.js");


}),
"./node_modules/.pnpm/@smithy+util-hex-encoding@2.1.1/node_modules/@smithy/util-hex-encoding/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  fromHex: function() { return fromHex; },
  toHex: function() { return toHex; }
});
const SHORT_TO_HEX = {};
const HEX_TO_SHORT = {};
for(let i = 0; i < 256; i++){
    let encodedByte = i.toString(16).toLowerCase();
    if (encodedByte.length === 1) encodedByte = `0${encodedByte}`;
    SHORT_TO_HEX[i] = encodedByte;
    HEX_TO_SHORT[encodedByte] = i;
}
function fromHex(encoded) {
    if (encoded.length % 2 !== 0) throw new Error("Hex encoded strings must have an even number length");
    const out = new Uint8Array(encoded.length / 2);
    for(let i = 0; i < encoded.length; i += 2){
        const encodedByte = encoded.slice(i, i + 2).toLowerCase();
        if (encodedByte in HEX_TO_SHORT) out[i / 2] = HEX_TO_SHORT[encodedByte];
        else throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
    }
    return out;
}
function toHex(bytes) {
    let out = "";
    for(let i = 0; i < bytes.byteLength; i++)out += SHORT_TO_HEX[bytes[i]];
    return out;
}
}),
"./node_modules/.pnpm/@smithy+util-middleware@2.1.1/node_modules/@smithy/util-middleware/dist-es/getSmithyContext.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getSmithyContext: function() { return getSmithyContext; }
});
/* harmony import */var _smithy_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/types */"./node_modules/.pnpm/@smithy+types@2.9.1/node_modules/@smithy/types/dist-es/index.js");

const getSmithyContext = (context)=>context[_smithy_types__WEBPACK_IMPORTED_MODULE_0__.SMITHY_CONTEXT_KEY] || (context[_smithy_types__WEBPACK_IMPORTED_MODULE_0__.SMITHY_CONTEXT_KEY] = {});
}),
"./node_modules/.pnpm/@smithy+util-middleware@2.1.1/node_modules/@smithy/util-middleware/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getSmithyContext: function() { return /* reexport safe */ _getSmithyContext__WEBPACK_IMPORTED_MODULE_0__.getSmithyContext; },
  normalizeProvider: function() { return /* reexport safe */ _normalizeProvider__WEBPACK_IMPORTED_MODULE_1__.normalizeProvider; }
});
/* harmony import */var _getSmithyContext__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getSmithyContext */"./node_modules/.pnpm/@smithy+util-middleware@2.1.1/node_modules/@smithy/util-middleware/dist-es/getSmithyContext.js");
/* harmony import */var _normalizeProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./normalizeProvider */"./node_modules/.pnpm/@smithy+util-middleware@2.1.1/node_modules/@smithy/util-middleware/dist-es/normalizeProvider.js");


}),
"./node_modules/.pnpm/@smithy+util-middleware@2.1.1/node_modules/@smithy/util-middleware/dist-es/normalizeProvider.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  normalizeProvider: function() { return normalizeProvider; }
});
const normalizeProvider = (input)=>{
    if (typeof input === "function") return input;
    const promisified = Promise.resolve(input);
    return ()=>promisified;
};
}),
"./node_modules/.pnpm/@smithy+util-retry@2.1.1/node_modules/@smithy/util-retry/dist-es/AdaptiveRetryStrategy.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  AdaptiveRetryStrategy: function() { return AdaptiveRetryStrategy; }
});
/* harmony import */var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */"./node_modules/.pnpm/@smithy+util-retry@2.1.1/node_modules/@smithy/util-retry/dist-es/config.js");
/* harmony import */var _DefaultRateLimiter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DefaultRateLimiter */"./node_modules/.pnpm/@smithy+util-retry@2.1.1/node_modules/@smithy/util-retry/dist-es/DefaultRateLimiter.js");
/* harmony import */var _StandardRetryStrategy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./StandardRetryStrategy */"./node_modules/.pnpm/@smithy+util-retry@2.1.1/node_modules/@smithy/util-retry/dist-es/StandardRetryStrategy.js");



class AdaptiveRetryStrategy {
    constructor(maxAttemptsProvider, options){
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = _config__WEBPACK_IMPORTED_MODULE_0__.RETRY_MODES.ADAPTIVE;
        const { rateLimiter } = options ?? {};
        this.rateLimiter = rateLimiter ?? new _DefaultRateLimiter__WEBPACK_IMPORTED_MODULE_2__.DefaultRateLimiter();
        this.standardRetryStrategy = new _StandardRetryStrategy__WEBPACK_IMPORTED_MODULE_1__.StandardRetryStrategy(maxAttemptsProvider);
    }
    async acquireInitialRetryToken(retryTokenScope) {
        await this.rateLimiter.getSendToken();
        return this.standardRetryStrategy.acquireInitialRetryToken(retryTokenScope);
    }
    async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        this.rateLimiter.updateClientSendingRate(errorInfo);
        return this.standardRetryStrategy.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
    }
    recordSuccess(token) {
        this.rateLimiter.updateClientSendingRate({});
        this.standardRetryStrategy.recordSuccess(token);
    }
}
}),
"./node_modules/.pnpm/@smithy+util-retry@2.1.1/node_modules/@smithy/util-retry/dist-es/ConfiguredRetryStrategy.js": (function (__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) {
"use strict";
/* harmony import */var _StandardRetryStrategy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./StandardRetryStrategy */"./node_modules/.pnpm/@smithy+util-retry@2.1.1/node_modules/@smithy/util-retry/dist-es/StandardRetryStrategy.js");


class ConfiguredRetryStrategy extends (/* unused pure expression or super */ null && (StandardRetryStrategy)) {
    constructor(maxAttempts, computeNextBackoffDelay = DEFAULT_RETRY_DELAY_BASE){
        super(typeof maxAttempts === "function" ? maxAttempts : async ()=>maxAttempts);
        if (typeof computeNextBackoffDelay === "number") this.computeNextBackoffDelay = ()=>computeNextBackoffDelay;
        else this.computeNextBackoffDelay = computeNextBackoffDelay;
    }
    async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        const token = await super.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
        token.getRetryDelay = ()=>this.computeNextBackoffDelay(token.getRetryCount());
        return token;
    }
}
}),
"./node_modules/.pnpm/@smithy+util-retry@2.1.1/node_modules/@smithy/util-retry/dist-es/DefaultRateLimiter.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  DefaultRateLimiter: function() { return DefaultRateLimiter; }
});
/* harmony import */var _smithy_service_error_classification__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/service-error-classification */"./node_modules/.pnpm/@smithy+service-error-classification@2.1.1/node_modules/@smithy/service-error-classification/dist-es/index.js");

class DefaultRateLimiter {
    constructor(options){
        this.currentCapacity = 0;
        this.enabled = false;
        this.lastMaxRate = 0;
        this.measuredTxRate = 0;
        this.requestCount = 0;
        this.lastTimestamp = 0;
        this.timeWindow = 0;
        this.beta = options?.beta ?? 0.7;
        this.minCapacity = options?.minCapacity ?? 1;
        this.minFillRate = options?.minFillRate ?? 0.5;
        this.scaleConstant = options?.scaleConstant ?? 0.4;
        this.smooth = options?.smooth ?? 0.8;
        const currentTimeInSeconds = this.getCurrentTimeInSeconds();
        this.lastThrottleTime = currentTimeInSeconds;
        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
        this.fillRate = this.minFillRate;
        this.maxCapacity = this.minCapacity;
    }
    getCurrentTimeInSeconds() {
        return Date.now() / 1000;
    }
    async getSendToken() {
        return this.acquireTokenBucket(1);
    }
    async acquireTokenBucket(amount) {
        if (!this.enabled) return;
        this.refillTokenBucket();
        if (amount > this.currentCapacity) {
            const delay = (amount - this.currentCapacity) / this.fillRate * 1000;
            await new Promise((resolve)=>setTimeout(resolve, delay));
        }
        this.currentCapacity = this.currentCapacity - amount;
    }
    refillTokenBucket() {
        const timestamp = this.getCurrentTimeInSeconds();
        if (!this.lastTimestamp) {
            this.lastTimestamp = timestamp;
            return;
        }
        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
        this.lastTimestamp = timestamp;
    }
    updateClientSendingRate(response) {
        let calculatedRate;
        this.updateMeasuredRate();
        if ((0, _smithy_service_error_classification__WEBPACK_IMPORTED_MODULE_0__.isThrottlingError)(response)) {
            const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
            this.lastMaxRate = rateToUse;
            this.calculateTimeWindow();
            this.lastThrottleTime = this.getCurrentTimeInSeconds();
            calculatedRate = this.cubicThrottle(rateToUse);
            this.enableTokenBucket();
        } else {
            this.calculateTimeWindow();
            calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
        }
        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
        this.updateTokenBucketRate(newRate);
    }
    calculateTimeWindow() {
        this.timeWindow = this.getPrecise(Math.pow(this.lastMaxRate * (1 - this.beta) / this.scaleConstant, 1 / 3));
    }
    cubicThrottle(rateToUse) {
        return this.getPrecise(rateToUse * this.beta);
    }
    cubicSuccess(timestamp) {
        return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);
    }
    enableTokenBucket() {
        this.enabled = true;
    }
    updateTokenBucketRate(newRate) {
        this.refillTokenBucket();
        this.fillRate = Math.max(newRate, this.minFillRate);
        this.maxCapacity = Math.max(newRate, this.minCapacity);
        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
    }
    updateMeasuredRate() {
        const t = this.getCurrentTimeInSeconds();
        const timeBucket = Math.floor(t * 2) / 2;
        this.requestCount++;
        if (timeBucket > this.lastTxRateBucket) {
            const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
            this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
            this.requestCount = 0;
            this.lastTxRateBucket = timeBucket;
        }
    }
    getPrecise(num) {
        return parseFloat(num.toFixed(8));
    }
}
}),
"./node_modules/.pnpm/@smithy+util-retry@2.1.1/node_modules/@smithy/util-retry/dist-es/StandardRetryStrategy.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  StandardRetryStrategy: function() { return StandardRetryStrategy; }
});
/* harmony import */var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */"./node_modules/.pnpm/@smithy+util-retry@2.1.1/node_modules/@smithy/util-retry/dist-es/config.js");
/* harmony import */var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */"./node_modules/.pnpm/@smithy+util-retry@2.1.1/node_modules/@smithy/util-retry/dist-es/constants.js");
/* harmony import */var _defaultRetryBackoffStrategy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./defaultRetryBackoffStrategy */"./node_modules/.pnpm/@smithy+util-retry@2.1.1/node_modules/@smithy/util-retry/dist-es/defaultRetryBackoffStrategy.js");
/* harmony import */var _defaultRetryToken__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./defaultRetryToken */"./node_modules/.pnpm/@smithy+util-retry@2.1.1/node_modules/@smithy/util-retry/dist-es/defaultRetryToken.js");




class StandardRetryStrategy {
    constructor(maxAttempts){
        this.maxAttempts = maxAttempts;
        this.mode = _config__WEBPACK_IMPORTED_MODULE_0__.RETRY_MODES.STANDARD;
        this.capacity = _constants__WEBPACK_IMPORTED_MODULE_1__.INITIAL_RETRY_TOKENS;
        this.retryBackoffStrategy = (0, _defaultRetryBackoffStrategy__WEBPACK_IMPORTED_MODULE_2__.getDefaultRetryBackoffStrategy)();
        this.maxAttemptsProvider = typeof maxAttempts === "function" ? maxAttempts : async ()=>maxAttempts;
    }
    async acquireInitialRetryToken(retryTokenScope) {
        return (0, _defaultRetryToken__WEBPACK_IMPORTED_MODULE_3__.createDefaultRetryToken)({
            retryDelay: _constants__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_RETRY_DELAY_BASE,
            retryCount: 0
        });
    }
    async refreshRetryTokenForRetry(token, errorInfo) {
        const maxAttempts = await this.getMaxAttempts();
        if (this.shouldRetry(token, errorInfo, maxAttempts)) {
            const errorType = errorInfo.errorType;
            this.retryBackoffStrategy.setDelayBase(errorType === "THROTTLING" ? _constants__WEBPACK_IMPORTED_MODULE_1__.THROTTLING_RETRY_DELAY_BASE : _constants__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_RETRY_DELAY_BASE);
            const delayFromErrorType = this.retryBackoffStrategy.computeNextBackoffDelay(token.getRetryCount());
            const retryDelay = errorInfo.retryAfterHint ? Math.max(errorInfo.retryAfterHint.getTime() - Date.now() || 0, delayFromErrorType) : delayFromErrorType;
            const capacityCost = this.getCapacityCost(errorType);
            this.capacity -= capacityCost;
            return (0, _defaultRetryToken__WEBPACK_IMPORTED_MODULE_3__.createDefaultRetryToken)({
                retryDelay,
                retryCount: token.getRetryCount() + 1,
                retryCost: capacityCost
            });
        }
        throw new Error("No retry token available");
    }
    recordSuccess(token) {
        this.capacity = Math.max(_constants__WEBPACK_IMPORTED_MODULE_1__.INITIAL_RETRY_TOKENS, this.capacity + (token.getRetryCost() ?? _constants__WEBPACK_IMPORTED_MODULE_1__.NO_RETRY_INCREMENT));
    }
    getCapacity() {
        return this.capacity;
    }
    async getMaxAttempts() {
        try {
            return await this.maxAttemptsProvider();
        } catch (error) {
            console.warn(`Max attempts provider could not resolve. Using default of ${_config__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_MAX_ATTEMPTS}`);
            return _config__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_MAX_ATTEMPTS;
        }
    }
    shouldRetry(tokenToRenew, errorInfo, maxAttempts) {
        const attempts = tokenToRenew.getRetryCount() + 1;
        return attempts < maxAttempts && this.capacity >= this.getCapacityCost(errorInfo.errorType) && this.isRetryableError(errorInfo.errorType);
    }
    getCapacityCost(errorType) {
        return errorType === "TRANSIENT" ? _constants__WEBPACK_IMPORTED_MODULE_1__.TIMEOUT_RETRY_COST : _constants__WEBPACK_IMPORTED_MODULE_1__.RETRY_COST;
    }
    isRetryableError(errorType) {
        return errorType === "THROTTLING" || errorType === "TRANSIENT";
    }
}
}),
"./node_modules/.pnpm/@smithy+util-retry@2.1.1/node_modules/@smithy/util-retry/dist-es/config.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  DEFAULT_MAX_ATTEMPTS: function() { return DEFAULT_MAX_ATTEMPTS; },
  DEFAULT_RETRY_MODE: function() { return DEFAULT_RETRY_MODE; },
  RETRY_MODES: function() { return RETRY_MODES; }
});
var RETRY_MODES;
(function(RETRY_MODES) {
    RETRY_MODES["STANDARD"] = "standard";
    RETRY_MODES["ADAPTIVE"] = "adaptive";
})(RETRY_MODES || (RETRY_MODES = {}));
const DEFAULT_MAX_ATTEMPTS = 3;
const DEFAULT_RETRY_MODE = RETRY_MODES.STANDARD;
}),
"./node_modules/.pnpm/@smithy+util-retry@2.1.1/node_modules/@smithy/util-retry/dist-es/constants.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  DEFAULT_RETRY_DELAY_BASE: function() { return DEFAULT_RETRY_DELAY_BASE; },
  INITIAL_RETRY_TOKENS: function() { return INITIAL_RETRY_TOKENS; },
  INVOCATION_ID_HEADER: function() { return INVOCATION_ID_HEADER; },
  MAXIMUM_RETRY_DELAY: function() { return MAXIMUM_RETRY_DELAY; },
  NO_RETRY_INCREMENT: function() { return NO_RETRY_INCREMENT; },
  REQUEST_HEADER: function() { return REQUEST_HEADER; },
  RETRY_COST: function() { return RETRY_COST; },
  THROTTLING_RETRY_DELAY_BASE: function() { return THROTTLING_RETRY_DELAY_BASE; },
  TIMEOUT_RETRY_COST: function() { return TIMEOUT_RETRY_COST; }
});
const DEFAULT_RETRY_DELAY_BASE = 100;
const MAXIMUM_RETRY_DELAY = 20000;
const THROTTLING_RETRY_DELAY_BASE = 500;
const INITIAL_RETRY_TOKENS = 500;
const RETRY_COST = 5;
const TIMEOUT_RETRY_COST = 10;
const NO_RETRY_INCREMENT = 1;
const INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
const REQUEST_HEADER = "amz-sdk-request";
}),
"./node_modules/.pnpm/@smithy+util-retry@2.1.1/node_modules/@smithy/util-retry/dist-es/defaultRetryBackoffStrategy.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  getDefaultRetryBackoffStrategy: function() { return getDefaultRetryBackoffStrategy; }
});
/* harmony import */var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */"./node_modules/.pnpm/@smithy+util-retry@2.1.1/node_modules/@smithy/util-retry/dist-es/constants.js");

const getDefaultRetryBackoffStrategy = ()=>{
    let delayBase = _constants__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_RETRY_DELAY_BASE;
    const computeNextBackoffDelay = (attempts)=>{
        return Math.floor(Math.min(_constants__WEBPACK_IMPORTED_MODULE_0__.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
    };
    const setDelayBase = (delay)=>{
        delayBase = delay;
    };
    return {
        computeNextBackoffDelay,
        setDelayBase
    };
};
}),
"./node_modules/.pnpm/@smithy+util-retry@2.1.1/node_modules/@smithy/util-retry/dist-es/defaultRetryToken.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  createDefaultRetryToken: function() { return createDefaultRetryToken; }
});
/* harmony import */var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */"./node_modules/.pnpm/@smithy+util-retry@2.1.1/node_modules/@smithy/util-retry/dist-es/constants.js");

const createDefaultRetryToken = ({ retryDelay, retryCount, retryCost })=>{
    const getRetryCount = ()=>retryCount;
    const getRetryDelay = ()=>Math.min(_constants__WEBPACK_IMPORTED_MODULE_0__.MAXIMUM_RETRY_DELAY, retryDelay);
    const getRetryCost = ()=>retryCost;
    return {
        getRetryCount,
        getRetryDelay,
        getRetryCost
    };
};
}),
"./node_modules/.pnpm/@smithy+util-retry@2.1.1/node_modules/@smithy/util-retry/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  AdaptiveRetryStrategy: function() { return /* reexport safe */ _AdaptiveRetryStrategy__WEBPACK_IMPORTED_MODULE_0__.AdaptiveRetryStrategy; },
  DEFAULT_MAX_ATTEMPTS: function() { return /* reexport safe */ _config__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_MAX_ATTEMPTS; },
  DEFAULT_RETRY_MODE: function() { return /* reexport safe */ _config__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_RETRY_MODE; },
  INVOCATION_ID_HEADER: function() { return /* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_5__.INVOCATION_ID_HEADER; },
  REQUEST_HEADER: function() { return /* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_5__.REQUEST_HEADER; },
  RETRY_MODES: function() { return /* reexport safe */ _config__WEBPACK_IMPORTED_MODULE_4__.RETRY_MODES; },
  StandardRetryStrategy: function() { return /* reexport safe */ _StandardRetryStrategy__WEBPACK_IMPORTED_MODULE_3__.StandardRetryStrategy; }
});
/* harmony import */var _AdaptiveRetryStrategy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AdaptiveRetryStrategy */"./node_modules/.pnpm/@smithy+util-retry@2.1.1/node_modules/@smithy/util-retry/dist-es/AdaptiveRetryStrategy.js");
/* harmony import */var _ConfiguredRetryStrategy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ConfiguredRetryStrategy */"./node_modules/.pnpm/@smithy+util-retry@2.1.1/node_modules/@smithy/util-retry/dist-es/ConfiguredRetryStrategy.js");
/* harmony import */var _StandardRetryStrategy__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./StandardRetryStrategy */"./node_modules/.pnpm/@smithy+util-retry@2.1.1/node_modules/@smithy/util-retry/dist-es/StandardRetryStrategy.js");
/* harmony import */var _config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./config */"./node_modules/.pnpm/@smithy+util-retry@2.1.1/node_modules/@smithy/util-retry/dist-es/config.js");
/* harmony import */var _constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./constants */"./node_modules/.pnpm/@smithy+util-retry@2.1.1/node_modules/@smithy/util-retry/dist-es/constants.js");







}),
"./node_modules/.pnpm/@smithy+util-stream@2.1.1/node_modules/@smithy/util-stream/dist-es/blob/Uint8ArrayBlobAdapter.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  Uint8ArrayBlobAdapter: function() { return Uint8ArrayBlobAdapter; }
});
/* harmony import */var _transforms__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transforms */"./node_modules/.pnpm/@smithy+util-stream@2.1.1/node_modules/@smithy/util-stream/dist-es/blob/transforms.js");

class Uint8ArrayBlobAdapter extends Uint8Array {
    static fromString(source, encoding = "utf-8") {
        switch(typeof source){
            case "string":
                return (0, _transforms__WEBPACK_IMPORTED_MODULE_0__.transformFromString)(source, encoding);
            default:
                throw new Error(`Unsupported conversion from ${typeof source} to Uint8ArrayBlobAdapter.`);
        }
    }
    static mutate(source) {
        Object.setPrototypeOf(source, Uint8ArrayBlobAdapter.prototype);
        return source;
    }
    transformToString(encoding = "utf-8") {
        return (0, _transforms__WEBPACK_IMPORTED_MODULE_0__.transformToString)(this, encoding);
    }
}
}),
"./node_modules/.pnpm/@smithy+util-stream@2.1.1/node_modules/@smithy/util-stream/dist-es/blob/transforms.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  transformFromString: function() { return transformFromString; },
  transformToString: function() { return transformToString; }
});
/* harmony import */var _smithy_util_base64__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/util-base64 */"./node_modules/.pnpm/@smithy+util-base64@2.1.1/node_modules/@smithy/util-base64/dist-es/index.js");
/* harmony import */var _smithy_util_utf8__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/util-utf8 */"./node_modules/.pnpm/@smithy+util-utf8@2.1.1/node_modules/@smithy/util-utf8/dist-es/index.js");
/* harmony import */var _Uint8ArrayBlobAdapter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Uint8ArrayBlobAdapter */"./node_modules/.pnpm/@smithy+util-stream@2.1.1/node_modules/@smithy/util-stream/dist-es/blob/Uint8ArrayBlobAdapter.js");



function transformToString(payload, encoding = "utf-8") {
    if (encoding === "base64") return (0, _smithy_util_base64__WEBPACK_IMPORTED_MODULE_0__.toBase64)(payload);
    return (0, _smithy_util_utf8__WEBPACK_IMPORTED_MODULE_1__.toUtf8)(payload);
}
function transformFromString(str, encoding) {
    if (encoding === "base64") return _Uint8ArrayBlobAdapter__WEBPACK_IMPORTED_MODULE_2__.Uint8ArrayBlobAdapter.mutate((0, _smithy_util_base64__WEBPACK_IMPORTED_MODULE_0__.fromBase64)(str));
    return _Uint8ArrayBlobAdapter__WEBPACK_IMPORTED_MODULE_2__.Uint8ArrayBlobAdapter.mutate((0, _smithy_util_utf8__WEBPACK_IMPORTED_MODULE_1__.fromUtf8)(str));
}
}),
"./node_modules/.pnpm/@smithy+util-stream@2.1.1/node_modules/@smithy/util-stream/dist-es/getAwsChunkedEncodingStream.js": (function (__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) {
"use strict";
/* harmony import */var stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! stream */"stream");
/* harmony import */var stream__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(stream__WEBPACK_IMPORTED_MODULE_0__);

const getAwsChunkedEncodingStream = (readableStream, options)=>{
    const { base64Encoder, bodyLengthChecker, checksumAlgorithmFn, checksumLocationName, streamHasher } = options;
    const checksumRequired = base64Encoder !== undefined && checksumAlgorithmFn !== undefined && checksumLocationName !== undefined && streamHasher !== undefined;
    const digest = checksumRequired ? streamHasher(checksumAlgorithmFn, readableStream) : undefined;
    const awsChunkedEncodingStream = new Readable({
        read: ()=>{}
    });
    readableStream.on("data", (data)=>{
        const length = bodyLengthChecker(data) || 0;
        awsChunkedEncodingStream.push(`${length.toString(16)}\r\n`);
        awsChunkedEncodingStream.push(data);
        awsChunkedEncodingStream.push("\r\n");
    });
    readableStream.on("end", async ()=>{
        awsChunkedEncodingStream.push(`0\r\n`);
        if (checksumRequired) {
            const checksum = base64Encoder(await digest);
            awsChunkedEncodingStream.push(`${checksumLocationName}:${checksum}\r\n`);
            awsChunkedEncodingStream.push(`\r\n`);
        }
        awsChunkedEncodingStream.push(null);
    });
    return awsChunkedEncodingStream;
};
}),
"./node_modules/.pnpm/@smithy+util-stream@2.1.1/node_modules/@smithy/util-stream/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  Uint8ArrayBlobAdapter: function() { return /* reexport safe */ _blob_Uint8ArrayBlobAdapter__WEBPACK_IMPORTED_MODULE_0__.Uint8ArrayBlobAdapter; }
});
/* harmony import */var _blob_Uint8ArrayBlobAdapter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./blob/Uint8ArrayBlobAdapter */"./node_modules/.pnpm/@smithy+util-stream@2.1.1/node_modules/@smithy/util-stream/dist-es/blob/Uint8ArrayBlobAdapter.js");
/* harmony import */var _getAwsChunkedEncodingStream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getAwsChunkedEncodingStream */"./node_modules/.pnpm/@smithy+util-stream@2.1.1/node_modules/@smithy/util-stream/dist-es/getAwsChunkedEncodingStream.js");
/* harmony import */var _sdk_stream_mixin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sdk-stream-mixin */"./node_modules/.pnpm/@smithy+util-stream@2.1.1/node_modules/@smithy/util-stream/dist-es/sdk-stream-mixin.js");



}),
"./node_modules/.pnpm/@smithy+util-stream@2.1.1/node_modules/@smithy/util-stream/dist-es/sdk-stream-mixin.js": (function (__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) {
"use strict";
/* harmony import */var _smithy_node_http_handler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/node-http-handler */"./node_modules/.pnpm/@smithy+node-http-handler@2.3.1/node_modules/@smithy/node-http-handler/dist-es/index.js");
/* harmony import */var _smithy_util_buffer_from__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @smithy/util-buffer-from */"./node_modules/.pnpm/@smithy+util-buffer-from@2.1.1/node_modules/@smithy/util-buffer-from/dist-es/index.js");
/* harmony import */var stream__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! stream */"stream");
/* harmony import */var stream__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(stream__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */var util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! util */"util");
/* harmony import */var util__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(util__WEBPACK_IMPORTED_MODULE_3__);




const ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = "The stream has already been transformed.";
const sdkStreamMixin = (stream)=>{
    if (!(stream instanceof Readable)) {
        const name = stream?.__proto__?.constructor?.name || stream;
        throw new Error(`Unexpected stream implementation, expect Stream.Readable instance, got ${name}`);
    }
    let transformed = false;
    const transformToByteArray = async ()=>{
        if (transformed) throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
        transformed = true;
        return await streamCollector(stream);
    };
    return Object.assign(stream, {
        transformToByteArray,
        transformToString: async (encoding)=>{
            const buf = await transformToByteArray();
            if (encoding === undefined || Buffer.isEncoding(encoding)) return fromArrayBuffer(buf.buffer, buf.byteOffset, buf.byteLength).toString(encoding);
            else {
                const decoder = new TextDecoder(encoding);
                return decoder.decode(buf);
            }
        },
        transformToWebStream: ()=>{
            if (transformed) throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
            if (stream.readableFlowing !== null) throw new Error("The stream has been consumed by other callbacks.");
            if (typeof Readable.toWeb !== "function") throw new Error("Readable.toWeb() is not supported. Please make sure you are using Node.js >= 17.0.0, or polyfill is available.");
            transformed = true;
            return Readable.toWeb(stream);
        }
    });
};
}),
"./node_modules/.pnpm/@smithy+util-uri-escape@2.1.1/node_modules/@smithy/util-uri-escape/dist-es/escape-uri.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  escapeUri: function() { return escapeUri; }
});
const escapeUri = (uri)=>encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
const hexEncode = (c)=>`%${c.charCodeAt(0).toString(16).toUpperCase()}`;
}),
"./node_modules/.pnpm/@smithy+util-utf8@2.1.1/node_modules/@smithy/util-utf8/dist-es/fromUtf8.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  fromUtf8: function() { return fromUtf8; }
});
/* harmony import */var _smithy_util_buffer_from__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/util-buffer-from */"./node_modules/.pnpm/@smithy+util-buffer-from@2.1.1/node_modules/@smithy/util-buffer-from/dist-es/index.js");

const fromUtf8 = (input)=>{
    const buf = (0, _smithy_util_buffer_from__WEBPACK_IMPORTED_MODULE_0__.fromString)(input, "utf8");
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
};
}),
"./node_modules/.pnpm/@smithy+util-utf8@2.1.1/node_modules/@smithy/util-utf8/dist-es/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  fromUtf8: function() { return /* reexport safe */ _fromUtf8__WEBPACK_IMPORTED_MODULE_0__.fromUtf8; },
  toUint8Array: function() { return /* reexport safe */ _toUint8Array__WEBPACK_IMPORTED_MODULE_1__.toUint8Array; },
  toUtf8: function() { return /* reexport safe */ _toUtf8__WEBPACK_IMPORTED_MODULE_2__.toUtf8; }
});
/* harmony import */var _fromUtf8__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fromUtf8 */"./node_modules/.pnpm/@smithy+util-utf8@2.1.1/node_modules/@smithy/util-utf8/dist-es/fromUtf8.js");
/* harmony import */var _toUint8Array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toUint8Array */"./node_modules/.pnpm/@smithy+util-utf8@2.1.1/node_modules/@smithy/util-utf8/dist-es/toUint8Array.js");
/* harmony import */var _toUtf8__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./toUtf8 */"./node_modules/.pnpm/@smithy+util-utf8@2.1.1/node_modules/@smithy/util-utf8/dist-es/toUtf8.js");



}),
"./node_modules/.pnpm/@smithy+util-utf8@2.1.1/node_modules/@smithy/util-utf8/dist-es/toUint8Array.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  toUint8Array: function() { return toUint8Array; }
});
/* harmony import */var _fromUtf8__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fromUtf8 */"./node_modules/.pnpm/@smithy+util-utf8@2.1.1/node_modules/@smithy/util-utf8/dist-es/fromUtf8.js");

const toUint8Array = (data)=>{
    if (typeof data === "string") return (0, _fromUtf8__WEBPACK_IMPORTED_MODULE_0__.fromUtf8)(data);
    if (ArrayBuffer.isView(data)) return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    return new Uint8Array(data);
};
}),
"./node_modules/.pnpm/@smithy+util-utf8@2.1.1/node_modules/@smithy/util-utf8/dist-es/toUtf8.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  toUtf8: function() { return toUtf8; }
});
/* harmony import */var _smithy_util_buffer_from__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @smithy/util-buffer-from */"./node_modules/.pnpm/@smithy+util-buffer-from@2.1.1/node_modules/@smithy/util-buffer-from/dist-es/index.js");

const toUtf8 = (input)=>(0, _smithy_util_buffer_from__WEBPACK_IMPORTED_MODULE_0__.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("utf8");
}),
"./node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/fxp.js": (function (module, __unused_webpack_exports, __webpack_require__) {
'use strict';
const validator = __webpack_require__(/*! ./validator */"./node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/validator.js");
const XMLParser = __webpack_require__(/*! ./xmlparser/XMLParser */"./node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/XMLParser.js");
const XMLBuilder = __webpack_require__(/*! ./xmlbuilder/json2xml */"./node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js");
module.exports = {
    XMLParser: XMLParser,
    XMLValidator: validator,
    XMLBuilder: XMLBuilder
};
}),
"./node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/util.js": (function (__unused_webpack_module, exports) {
'use strict';
const nameStartChar = ':A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
const nameChar = nameStartChar + '\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040';
const nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*';
const regexName = new RegExp('^' + nameRegexp + '$');
const getAllMatches = function(string, regex) {
    const matches = [];
    let match = regex.exec(string);
    while(match){
        const allmatches = [];
        allmatches.startIndex = regex.lastIndex - match[0].length;
        const len = match.length;
        for(let index = 0; index < len; index++)allmatches.push(match[index]);
        matches.push(allmatches);
        match = regex.exec(string);
    }
    return matches;
};
const isName = function(string) {
    const match = regexName.exec(string);
    return !(match === null || typeof match === 'undefined');
};
exports.isExist = function(v) {
    return typeof v !== 'undefined';
};
exports.isEmptyObject = function(obj) {
    return Object.keys(obj).length === 0;
};
/**
 * Copy all the properties of a into b.
 * @param {*} target
 * @param {*} a
 */ exports.merge = function(target, a, arrayMode) {
    if (a) {
        const keys = Object.keys(a); // will return an array of own properties
        const len = keys.length; //don't make it inline
        for(let i = 0; i < len; i++)if (arrayMode === 'strict') target[keys[i]] = [
            a[keys[i]]
        ];
        else target[keys[i]] = a[keys[i]];
    }
};
/* exports.merge =function (b,a){
  return Object.assign(b,a);
} */ exports.getValue = function(v) {
    if (exports.isExist(v)) return v;
    else return '';
};
// const fakeCall = function(a) {return a;};
// const fakeCallNoReturn = function() {};
exports.isName = isName;
exports.getAllMatches = getAllMatches;
exports.nameRegexp = nameRegexp;
}),
"./node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/validator.js": (function (__unused_webpack_module, exports, __webpack_require__) {
'use strict';
const util = __webpack_require__(/*! ./util */"./node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/util.js");
const defaultOptions = {
    allowBooleanAttributes: false,
    unpairedTags: []
};
//const tagsPattern = new RegExp("<\\/?([\\w:\\-_\.]+)\\s*\/?>","g");
exports.validate = function(xmlData, options) {
    options = Object.assign({}, defaultOptions, options);
    //xmlData = xmlData.replace(/(\r\n|\n|\r)/gm,"");//make it single line
    //xmlData = xmlData.replace(/(^\s*<\?xml.*?\?>)/g,"");//Remove XML starting tag
    //xmlData = xmlData.replace(/(<!DOCTYPE[\s\w\"\.\/\-\:]+(\[.*\])*\s*>)/g,"");//Remove DOCTYPE
    const tags = [];
    let tagFound = false;
    //indicates that the root tag has been closed (aka. depth 0 has been reached)
    let reachedRoot = false;
    if (xmlData[0] === '\ufeff') // check for byte order mark (BOM)
    xmlData = xmlData.substr(1);
    for(let i = 0; i < xmlData.length; i++){
        if (xmlData[i] === '<' && xmlData[i + 1] === '?') {
            i += 2;
            i = readPI(xmlData, i);
            if (i.err) return i;
        } else if (xmlData[i] === '<') {
            //starting of tag
            //read until you reach to '>' avoiding any '>' in attribute value
            let tagStartPos = i;
            i++;
            if (xmlData[i] === '!') {
                i = readCommentAndCDATA(xmlData, i);
                continue;
            } else {
                let closingTag = false;
                if (xmlData[i] === '/') {
                    //closing tag
                    closingTag = true;
                    i++;
                }
                //read tagname
                let tagName = '';
                for(; i < xmlData.length && xmlData[i] !== '>' && xmlData[i] !== ' ' && xmlData[i] !== '\t' && xmlData[i] !== '\n' && xmlData[i] !== '\r'; i++)tagName += xmlData[i];
                tagName = tagName.trim();
                //console.log(tagName);
                if (tagName[tagName.length - 1] === '/') {
                    //self closing tag without attributes
                    tagName = tagName.substring(0, tagName.length - 1);
                    //continue;
                    i--;
                }
                if (!validateTagName(tagName)) {
                    let msg;
                    if (tagName.trim().length === 0) msg = "Invalid space after '<'.";
                    else msg = "Tag '" + tagName + "' is an invalid name.";
                    return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));
                }
                const result = readAttributeStr(xmlData, i);
                if (result === false) return getErrorObject('InvalidAttr', "Attributes for '" + tagName + "' have open quote.", getLineNumberForPosition(xmlData, i));
                let attrStr = result.value;
                i = result.index;
                if (attrStr[attrStr.length - 1] === '/') {
                    //self closing tag
                    const attrStrStart = i - attrStr.length;
                    attrStr = attrStr.substring(0, attrStr.length - 1);
                    const isValid = validateAttributeString(attrStr, options);
                    if (isValid === true) tagFound = true;
                    else //the result from the nested function returns the position of the error within the attribute
                    //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute
                    //this gives us the absolute index in the entire xml, which we can use to find the line at last
                    return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));
                } else if (closingTag) {
                    if (!result.tagClosed) return getErrorObject('InvalidTag', "Closing tag '" + tagName + "' doesn't have proper closing.", getLineNumberForPosition(xmlData, i));
                    else if (attrStr.trim().length > 0) return getErrorObject('InvalidTag', "Closing tag '" + tagName + "' can't have attributes or invalid starting.", getLineNumberForPosition(xmlData, tagStartPos));
                    else {
                        const otg = tags.pop();
                        if (tagName !== otg.tagName) {
                            let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);
                            return getErrorObject('InvalidTag', "Expected closing tag '" + otg.tagName + "' (opened in line " + openPos.line + ", col " + openPos.col + ") instead of closing tag '" + tagName + "'.", getLineNumberForPosition(xmlData, tagStartPos));
                        }
                        //when there are no more tags, we reached the root level.
                        if (tags.length == 0) reachedRoot = true;
                    }
                } else {
                    const isValid = validateAttributeString(attrStr, options);
                    if (isValid !== true) //the result from the nested function returns the position of the error within the attribute
                    //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute
                    //this gives us the absolute index in the entire xml, which we can use to find the line at last
                    return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
                    //if the root level has been reached before ...
                    if (reachedRoot === true) return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));
                    else if (options.unpairedTags.indexOf(tagName) !== -1) ;
                    else tags.push({
                        tagName,
                        tagStartPos
                    });
                    tagFound = true;
                }
                //skip tag text value
                //It may include comments and CDATA value
                for(i++; i < xmlData.length; i++){
                    if (xmlData[i] === '<') {
                        if (xmlData[i + 1] === '!') {
                            //comment or CADATA
                            i++;
                            i = readCommentAndCDATA(xmlData, i);
                            continue;
                        } else if (xmlData[i + 1] === '?') {
                            i = readPI(xmlData, ++i);
                            if (i.err) return i;
                        } else break;
                    } else if (xmlData[i] === '&') {
                        const afterAmp = validateAmpersand(xmlData, i);
                        if (afterAmp == -1) return getErrorObject('InvalidChar', "char '&' is not expected.", getLineNumberForPosition(xmlData, i));
                        i = afterAmp;
                    } else {
                        if (reachedRoot === true && !isWhiteSpace(xmlData[i])) return getErrorObject('InvalidXml', "Extra text at the end", getLineNumberForPosition(xmlData, i));
                    }
                } //end of reading tag text value
                if (xmlData[i] === '<') i--;
            }
        } else {
            if (isWhiteSpace(xmlData[i])) continue;
            return getErrorObject('InvalidChar', "char '" + xmlData[i] + "' is not expected.", getLineNumberForPosition(xmlData, i));
        }
    }
    if (!tagFound) return getErrorObject('InvalidXml', 'Start tag expected.', 1);
    else if (tags.length == 1) return getErrorObject('InvalidTag', "Unclosed tag '" + tags[0].tagName + "'.", getLineNumberForPosition(xmlData, tags[0].tagStartPos));
    else if (tags.length > 0) return getErrorObject('InvalidXml', "Invalid '" + JSON.stringify(tags.map((t)=>t.tagName), null, 4).replace(/\r?\n/g, '') + "' found.", {
        line: 1,
        col: 1
    });
    return true;
};
function isWhiteSpace(char) {
    return char === ' ' || char === '\t' || char === '\n' || char === '\r';
}
/**
 * Read Processing insstructions and skip
 * @param {*} xmlData
 * @param {*} i
 */ function readPI(xmlData, i) {
    const start = i;
    for(; i < xmlData.length; i++)if (xmlData[i] == '?' || xmlData[i] == ' ') {
        //tagname
        const tagname = xmlData.substr(start, i - start);
        if (i > 5 && tagname === 'xml') return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));
        else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {
            //check if valid attribut string
            i++;
            break;
        } else continue;
    }
    return i;
}
function readCommentAndCDATA(xmlData, i) {
    if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {
        //comment
        for(i += 3; i < xmlData.length; i++)if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {
            i += 2;
            break;
        }
    } else if (xmlData.length > i + 8 && xmlData[i + 1] === 'D' && xmlData[i + 2] === 'O' && xmlData[i + 3] === 'C' && xmlData[i + 4] === 'T' && xmlData[i + 5] === 'Y' && xmlData[i + 6] === 'P' && xmlData[i + 7] === 'E') {
        let angleBracketsCount = 1;
        for(i += 8; i < xmlData.length; i++){
            if (xmlData[i] === '<') angleBracketsCount++;
            else if (xmlData[i] === '>') {
                angleBracketsCount--;
                if (angleBracketsCount === 0) break;
            }
        }
    } else if (xmlData.length > i + 9 && xmlData[i + 1] === '[' && xmlData[i + 2] === 'C' && xmlData[i + 3] === 'D' && xmlData[i + 4] === 'A' && xmlData[i + 5] === 'T' && xmlData[i + 6] === 'A' && xmlData[i + 7] === '[') {
        for(i += 8; i < xmlData.length; i++)if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {
            i += 2;
            break;
        }
    }
    return i;
}
const doubleQuote = '"';
const singleQuote = "'";
/**
 * Keep reading xmlData until '<' is found outside the attribute value.
 * @param {string} xmlData
 * @param {number} i
 */ function readAttributeStr(xmlData, i) {
    let attrStr = '';
    let startChar = '';
    let tagClosed = false;
    for(; i < xmlData.length; i++){
        if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {
            if (startChar === '') startChar = xmlData[i];
            else if (startChar !== xmlData[i]) ;
            else startChar = '';
        } else if (xmlData[i] === '>') {
            if (startChar === '') {
                tagClosed = true;
                break;
            }
        }
        attrStr += xmlData[i];
    }
    if (startChar !== '') return false;
    return {
        value: attrStr,
        index: i,
        tagClosed: tagClosed
    };
}
/**
 * Select all the attributes whether valid or invalid.
 */ const validAttrStrRegxp = new RegExp('(\\s*)([^\\s=]+)(\\s*=)?(\\s*([\'"])(([\\s\\S])*?)\\5)?', 'g');
//attr, ="sd", a="amit's", a="sd"b="saf", ab  cd=""
function validateAttributeString(attrStr, options) {
    //console.log("start:"+attrStr+":end");
    //if(attrStr.trim().length === 0) return true; //empty string
    const matches = util.getAllMatches(attrStr, validAttrStrRegxp);
    const attrNames = {};
    for(let i = 0; i < matches.length; i++){
        if (matches[i][1].length === 0) //nospace before attribute name: a="sd"b="saf"
        return getErrorObject('InvalidAttr', "Attribute '" + matches[i][2] + "' has no space in starting.", getPositionFromMatch(matches[i]));
        else if (matches[i][3] !== undefined && matches[i][4] === undefined) return getErrorObject('InvalidAttr', "Attribute '" + matches[i][2] + "' is without value.", getPositionFromMatch(matches[i]));
        else if (matches[i][3] === undefined && !options.allowBooleanAttributes) //independent attribute: ab
        return getErrorObject('InvalidAttr', "boolean attribute '" + matches[i][2] + "' is not allowed.", getPositionFromMatch(matches[i]));
        /* else if(matches[i][6] === undefined){//attribute without value: ab=
                    return { err: { code:"InvalidAttr",msg:"attribute " + matches[i][2] + " has no value assigned."}};
                } */ const attrName = matches[i][2];
        if (!validateAttrName(attrName)) return getErrorObject('InvalidAttr', "Attribute '" + attrName + "' is an invalid name.", getPositionFromMatch(matches[i]));
        if (!attrNames.hasOwnProperty(attrName)) //check for duplicate attribute.
        attrNames[attrName] = 1;
        else return getErrorObject('InvalidAttr', "Attribute '" + attrName + "' is repeated.", getPositionFromMatch(matches[i]));
    }
    return true;
}
function validateNumberAmpersand(xmlData, i) {
    let re = /\d/;
    if (xmlData[i] === 'x') {
        i++;
        re = /[\da-fA-F]/;
    }
    for(; i < xmlData.length; i++){
        if (xmlData[i] === ';') return i;
        if (!xmlData[i].match(re)) break;
    }
    return -1;
}
function validateAmpersand(xmlData, i) {
    // https://www.w3.org/TR/xml/#dt-charref
    i++;
    if (xmlData[i] === ';') return -1;
    if (xmlData[i] === '#') {
        i++;
        return validateNumberAmpersand(xmlData, i);
    }
    let count = 0;
    for(; i < xmlData.length; i++, count++){
        if (xmlData[i].match(/\w/) && count < 20) continue;
        if (xmlData[i] === ';') break;
        return -1;
    }
    return i;
}
function getErrorObject(code, message, lineNumber) {
    return {
        err: {
            code: code,
            msg: message,
            line: lineNumber.line || lineNumber,
            col: lineNumber.col
        }
    };
}
function validateAttrName(attrName) {
    return util.isName(attrName);
}
// const startsWithXML = /^xml/i;
function validateTagName(tagname) {
    return util.isName(tagname) /* && !tagname.match(startsWithXML) */ ;
}
//this function returns the line number for the character at the given index
function getLineNumberForPosition(xmlData, index) {
    const lines = xmlData.substring(0, index).split(/\r?\n/);
    return {
        line: lines.length,
        // column number is last line's length + 1, because column numbering starts at 1:
        col: lines[lines.length - 1].length + 1
    };
}
//this function returns the position of the first character of match within attrStr
function getPositionFromMatch(match) {
    return match.startIndex + match[1].length;
}
}),
"./node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js": (function (module, __unused_webpack_exports, __webpack_require__) {
'use strict';
//parse Empty Node as self closing node
const buildFromOrderedJs = __webpack_require__(/*! ./orderedJs2Xml */"./node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js");
const defaultOptions = {
    attributeNamePrefix: '@_',
    attributesGroupName: false,
    textNodeName: '#text',
    ignoreAttributes: true,
    cdataPropName: false,
    format: false,
    indentBy: '  ',
    suppressEmptyNode: false,
    suppressUnpairedNode: true,
    suppressBooleanAttributes: true,
    tagValueProcessor: function(key, a) {
        return a;
    },
    attributeValueProcessor: function(attrName, a) {
        return a;
    },
    preserveOrder: false,
    commentPropName: false,
    unpairedTags: [],
    entities: [
        {
            regex: new RegExp("&", "g"),
            val: "&amp;"
        },
        {
            regex: new RegExp(">", "g"),
            val: "&gt;"
        },
        {
            regex: new RegExp("<", "g"),
            val: "&lt;"
        },
        {
            regex: new RegExp("\'", "g"),
            val: "&apos;"
        },
        {
            regex: new RegExp("\"", "g"),
            val: "&quot;"
        }
    ],
    processEntities: true,
    stopNodes: [],
    // transformTagName: false,
    // transformAttributeName: false,
    oneListGroup: false
};
function Builder(options) {
    this.options = Object.assign({}, defaultOptions, options);
    if (this.options.ignoreAttributes || this.options.attributesGroupName) this.isAttribute = function() {
        return false;
    };
    else {
        this.attrPrefixLen = this.options.attributeNamePrefix.length;
        this.isAttribute = isAttribute;
    }
    this.processTextOrObjNode = processTextOrObjNode;
    if (this.options.format) {
        this.indentate = indentate;
        this.tagEndChar = '>\n';
        this.newLine = '\n';
    } else {
        this.indentate = function() {
            return '';
        };
        this.tagEndChar = '>';
        this.newLine = '';
    }
}
Builder.prototype.build = function(jObj) {
    if (this.options.preserveOrder) return buildFromOrderedJs(jObj, this.options);
    else {
        if (Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1) jObj = {
            [this.options.arrayNodeName]: jObj
        };
        return this.j2x(jObj, 0).val;
    }
};
Builder.prototype.j2x = function(jObj, level) {
    let attrStr = '';
    let val = '';
    for(let key in jObj){
        if (typeof jObj[key] === 'undefined') ;
        else if (jObj[key] === null) {
            if (key[0] === "?") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;
            else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;
        } else if (jObj[key] instanceof Date) val += this.buildTextValNode(jObj[key], key, '', level);
        else if (typeof jObj[key] !== 'object') {
            //premitive type
            const attr = this.isAttribute(key);
            if (attr) attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);
            else //tag value
            if (key === this.options.textNodeName) {
                let newval = this.options.tagValueProcessor(key, '' + jObj[key]);
                val += this.replaceEntitiesValue(newval);
            } else val += this.buildTextValNode(jObj[key], key, '', level);
        } else if (Array.isArray(jObj[key])) {
            //repeated nodes
            const arrLen = jObj[key].length;
            let listTagVal = "";
            for(let j = 0; j < arrLen; j++){
                const item = jObj[key][j];
                if (typeof item === 'undefined') ;
                else if (item === null) {
                    if (key[0] === "?") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;
                    else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;
                } else if (typeof item === 'object') {
                    if (this.options.oneListGroup) listTagVal += this.j2x(item, level + 1).val;
                    else listTagVal += this.processTextOrObjNode(item, key, level);
                } else listTagVal += this.buildTextValNode(item, key, '', level);
            }
            if (this.options.oneListGroup) listTagVal = this.buildObjectNode(listTagVal, key, '', level);
            val += listTagVal;
        } else //nested node
        if (this.options.attributesGroupName && key === this.options.attributesGroupName) {
            const Ks = Object.keys(jObj[key]);
            const L = Ks.length;
            for(let j = 0; j < L; j++)attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);
        } else val += this.processTextOrObjNode(jObj[key], key, level);
    }
    return {
        attrStr: attrStr,
        val: val
    };
};
Builder.prototype.buildAttrPairStr = function(attrName, val) {
    val = this.options.attributeValueProcessor(attrName, '' + val);
    val = this.replaceEntitiesValue(val);
    if (this.options.suppressBooleanAttributes && val === "true") return ' ' + attrName;
    else return ' ' + attrName + '="' + val + '"';
};
function processTextOrObjNode(object, key, level) {
    const result = this.j2x(object, level + 1);
    if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);
    else return this.buildObjectNode(result.val, key, result.attrStr, level);
}
Builder.prototype.buildObjectNode = function(val, key, attrStr, level) {
    if (val === "") {
        if (key[0] === "?") return this.indentate(level) + '<' + key + attrStr + '?' + this.tagEndChar;
        else return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;
    } else {
        let tagEndExp = '</' + key + this.tagEndChar;
        let piClosingChar = "";
        if (key[0] === "?") {
            piClosingChar = "?";
            tagEndExp = "";
        }
        if (attrStr && val.indexOf('<') === -1) return this.indentate(level) + '<' + key + attrStr + piClosingChar + '>' + val + tagEndExp;
        else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) return this.indentate(level) + `<!--${val}-->` + this.newLine;
        else return this.indentate(level) + '<' + key + attrStr + piClosingChar + this.tagEndChar + val + this.indentate(level) + tagEndExp;
    }
};
Builder.prototype.closeTag = function(key) {
    let closeTag = "";
    if (this.options.unpairedTags.indexOf(key) !== -1) {
        if (!this.options.suppressUnpairedNode) closeTag = "/";
    } else if (this.options.suppressEmptyNode) closeTag = "/";
    else closeTag = `></${key}`;
    return closeTag;
};
function buildEmptyObjNode(val, key, attrStr, level) {
    if (val !== '') return this.buildObjectNode(val, key, attrStr, level);
    else {
        if (key[0] === "?") return this.indentate(level) + '<' + key + attrStr + '?' + this.tagEndChar;
        else return this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;
    }
}
Builder.prototype.buildTextValNode = function(val, key, attrStr, level) {
    if (this.options.cdataPropName !== false && key === this.options.cdataPropName) return this.indentate(level) + `<![CDATA[${val}]]>` + this.newLine;
    else if (this.options.commentPropName !== false && key === this.options.commentPropName) return this.indentate(level) + `<!--${val}-->` + this.newLine;
    else if (key[0] === "?") return this.indentate(level) + '<' + key + attrStr + '?' + this.tagEndChar;
    else {
        let textValue = this.options.tagValueProcessor(key, val);
        textValue = this.replaceEntitiesValue(textValue);
        if (textValue === '') return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;
        else return this.indentate(level) + '<' + key + attrStr + '>' + textValue + '</' + key + this.tagEndChar;
    }
};
Builder.prototype.replaceEntitiesValue = function(textValue) {
    if (textValue && textValue.length > 0 && this.options.processEntities) for(let i = 0; i < this.options.entities.length; i++){
        const entity = this.options.entities[i];
        textValue = textValue.replace(entity.regex, entity.val);
    }
    return textValue;
};
function indentate(level) {
    return this.options.indentBy.repeat(level);
}
function isAttribute(name /*, options*/ ) {
    if (name.startsWith(this.options.attributeNamePrefix)) return name.substr(this.attrPrefixLen);
    else return false;
}
module.exports = Builder;
}),
"./node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js": (function (module) {
const EOL = "\n";
/**
 * 
 * @param {array} jArray 
 * @param {any} options 
 * @returns 
 */ function toXml(jArray, options) {
    let indentation = "";
    if (options.format && options.indentBy.length > 0) indentation = EOL;
    return arrToStr(jArray, options, "", indentation);
}
function arrToStr(arr, options, jPath, indentation) {
    let xmlStr = "";
    let isPreviousElementTag = false;
    for(let i = 0; i < arr.length; i++){
        const tagObj = arr[i];
        const tagName = propName(tagObj);
        let newJPath = "";
        if (jPath.length === 0) newJPath = tagName;
        else newJPath = `${jPath}.${tagName}`;
        if (tagName === options.textNodeName) {
            let tagText = tagObj[tagName];
            if (!isStopNode(newJPath, options)) {
                tagText = options.tagValueProcessor(tagName, tagText);
                tagText = replaceEntitiesValue(tagText, options);
            }
            if (isPreviousElementTag) xmlStr += indentation;
            xmlStr += tagText;
            isPreviousElementTag = false;
            continue;
        } else if (tagName === options.cdataPropName) {
            if (isPreviousElementTag) xmlStr += indentation;
            xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;
            isPreviousElementTag = false;
            continue;
        } else if (tagName === options.commentPropName) {
            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;
            isPreviousElementTag = true;
            continue;
        } else if (tagName[0] === "?") {
            const attStr = attr_to_str(tagObj[":@"], options);
            const tempInd = tagName === "?xml" ? "" : indentation;
            let piTextNodeName = tagObj[tagName][0][options.textNodeName];
            piTextNodeName = piTextNodeName.length !== 0 ? " " + piTextNodeName : ""; //remove extra spacing
            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;
            isPreviousElementTag = true;
            continue;
        }
        let newIdentation = indentation;
        if (newIdentation !== "") newIdentation += options.indentBy;
        const attStr = attr_to_str(tagObj[":@"], options);
        const tagStart = indentation + `<${tagName}${attStr}`;
        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);
        if (options.unpairedTags.indexOf(tagName) !== -1) {
            if (options.suppressUnpairedNode) xmlStr += tagStart + ">";
            else xmlStr += tagStart + "/>";
        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) xmlStr += tagStart + "/>";
        else if (tagValue && tagValue.endsWith(">")) xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;
        else {
            xmlStr += tagStart + ">";
            if (tagValue && indentation !== "" && (tagValue.includes("/>") || tagValue.includes("</"))) xmlStr += indentation + options.indentBy + tagValue + indentation;
            else xmlStr += tagValue;
            xmlStr += `</${tagName}>`;
        }
        isPreviousElementTag = true;
    }
    return xmlStr;
}
function propName(obj) {
    const keys = Object.keys(obj);
    for(let i = 0; i < keys.length; i++){
        const key = keys[i];
        if (key !== ":@") return key;
    }
}
function attr_to_str(attrMap, options) {
    let attrStr = "";
    if (attrMap && !options.ignoreAttributes) for(let attr in attrMap){
        let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);
        attrVal = replaceEntitiesValue(attrVal, options);
        if (attrVal === true && options.suppressBooleanAttributes) attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;
        else attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}="${attrVal}"`;
    }
    return attrStr;
}
function isStopNode(jPath, options) {
    jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);
    let tagName = jPath.substr(jPath.lastIndexOf(".") + 1);
    for(let index in options.stopNodes){
        if (options.stopNodes[index] === jPath || options.stopNodes[index] === "*." + tagName) return true;
    }
    return false;
}
function replaceEntitiesValue(textValue, options) {
    if (textValue && textValue.length > 0 && options.processEntities) for(let i = 0; i < options.entities.length; i++){
        const entity = options.entities[i];
        textValue = textValue.replace(entity.regex, entity.val);
    }
    return textValue;
}
module.exports = toXml;
}),
"./node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js": (function (module, __unused_webpack_exports, __webpack_require__) {
const util = __webpack_require__(/*! ../util */"./node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/util.js");
//TODO: handle comments
function readDocType(xmlData, i) {
    const entities = {};
    if (xmlData[i + 3] === 'O' && xmlData[i + 4] === 'C' && xmlData[i + 5] === 'T' && xmlData[i + 6] === 'Y' && xmlData[i + 7] === 'P' && xmlData[i + 8] === 'E') {
        i = i + 9;
        let angleBracketsCount = 1;
        let hasBody = false, comment = false;
        let exp = "";
        for(; i < xmlData.length; i++){
            if (xmlData[i] === '<' && !comment) {
                if (hasBody && isEntity(xmlData, i)) {
                    i += 7;
                    [entityName, val, i] = readEntityExp(xmlData, i + 1);
                    if (val.indexOf("&") === -1) entities[validateEntityName(entityName)] = {
                        regx: RegExp(`&${entityName};`, "g"),
                        val: val
                    };
                } else if (hasBody && isElement(xmlData, i)) i += 8; //Not supported
                else if (hasBody && isAttlist(xmlData, i)) i += 8; //Not supported
                else if (hasBody && isNotation(xmlData, i)) i += 9; //Not supported
                else if (isComment) comment = true;
                else throw new Error("Invalid DOCTYPE");
                angleBracketsCount++;
                exp = "";
            } else if (xmlData[i] === '>') {
                if (comment) {
                    if (xmlData[i - 1] === "-" && xmlData[i - 2] === "-") {
                        comment = false;
                        angleBracketsCount--;
                    }
                } else angleBracketsCount--;
                if (angleBracketsCount === 0) break;
            } else if (xmlData[i] === '[') hasBody = true;
            else exp += xmlData[i];
        }
        if (angleBracketsCount !== 0) throw new Error(`Unclosed DOCTYPE`);
    } else throw new Error(`Invalid Tag instead of DOCTYPE`);
    return {
        entities,
        i
    };
}
function readEntityExp(xmlData, i) {
    //External entities are not supported
    //    <!ENTITY ext SYSTEM "http://normal-website.com" >
    //Parameter entities are not supported
    //    <!ENTITY entityname "&anotherElement;">
    //Internal entities are supported
    //    <!ENTITY entityname "replacement text">
    //read EntityName
    let entityName1 = "";
    for(; i < xmlData.length && xmlData[i] !== "'" && xmlData[i] !== '"'; i++)// if(xmlData[i] === " ") continue;
    // else 
    entityName1 += xmlData[i];
    entityName1 = entityName1.trim();
    if (entityName1.indexOf(" ") !== -1) throw new Error("External entites are not supported");
    //read Entity Value
    const startChar = xmlData[i++];
    let val1 = "";
    for(; i < xmlData.length && xmlData[i] !== startChar; i++)val1 += xmlData[i];
    return [
        entityName1,
        val1,
        i
    ];
}
function isComment(xmlData, i) {
    if (xmlData[i + 1] === '!' && xmlData[i + 2] === '-' && xmlData[i + 3] === '-') return true;
    return false;
}
function isEntity(xmlData, i) {
    if (xmlData[i + 1] === '!' && xmlData[i + 2] === 'E' && xmlData[i + 3] === 'N' && xmlData[i + 4] === 'T' && xmlData[i + 5] === 'I' && xmlData[i + 6] === 'T' && xmlData[i + 7] === 'Y') return true;
    return false;
}
function isElement(xmlData, i) {
    if (xmlData[i + 1] === '!' && xmlData[i + 2] === 'E' && xmlData[i + 3] === 'L' && xmlData[i + 4] === 'E' && xmlData[i + 5] === 'M' && xmlData[i + 6] === 'E' && xmlData[i + 7] === 'N' && xmlData[i + 8] === 'T') return true;
    return false;
}
function isAttlist(xmlData, i) {
    if (xmlData[i + 1] === '!' && xmlData[i + 2] === 'A' && xmlData[i + 3] === 'T' && xmlData[i + 4] === 'T' && xmlData[i + 5] === 'L' && xmlData[i + 6] === 'I' && xmlData[i + 7] === 'S' && xmlData[i + 8] === 'T') return true;
    return false;
}
function isNotation(xmlData, i) {
    if (xmlData[i + 1] === '!' && xmlData[i + 2] === 'N' && xmlData[i + 3] === 'O' && xmlData[i + 4] === 'T' && xmlData[i + 5] === 'A' && xmlData[i + 6] === 'T' && xmlData[i + 7] === 'I' && xmlData[i + 8] === 'O' && xmlData[i + 9] === 'N') return true;
    return false;
}
function validateEntityName(name) {
    if (util.isName(name)) return name;
    else throw new Error(`Invalid entity name ${name}`);
}
module.exports = readDocType;
}),
"./node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js": (function (__unused_webpack_module, exports) {
const defaultOptions = {
    preserveOrder: false,
    attributeNamePrefix: '@_',
    attributesGroupName: false,
    textNodeName: '#text',
    ignoreAttributes: true,
    removeNSPrefix: false,
    allowBooleanAttributes: false,
    //ignoreRootElement : false,
    parseTagValue: true,
    parseAttributeValue: false,
    trimValues: true,
    cdataPropName: false,
    numberParseOptions: {
        hex: true,
        leadingZeros: true,
        eNotation: true
    },
    tagValueProcessor: function(tagName, val) {
        return val;
    },
    attributeValueProcessor: function(attrName, val) {
        return val;
    },
    stopNodes: [],
    alwaysCreateTextNode: false,
    isArray: ()=>false,
    commentPropName: false,
    unpairedTags: [],
    processEntities: true,
    htmlEntities: false,
    ignoreDeclaration: false,
    ignorePiTags: false,
    transformTagName: false,
    transformAttributeName: false,
    updateTag: function(tagName, jPath, attrs) {
        return tagName;
    }
};
const buildOptions = function(options) {
    return Object.assign({}, defaultOptions, options);
};
exports.buildOptions = buildOptions;
exports.defaultOptions = defaultOptions;
}),
"./node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js": (function (module, __unused_webpack_exports, __webpack_require__) {
'use strict';
///@ts-check
const util = __webpack_require__(/*! ../util */"./node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/util.js");
const xmlNode = __webpack_require__(/*! ./xmlNode */"./node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/xmlNode.js");
const readDocType = __webpack_require__(/*! ./DocTypeReader */"./node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js");
const toNumber = __webpack_require__(/*! strnum */"./node_modules/.pnpm/strnum@1.0.5/node_modules/strnum/strnum.js");
const regx = '<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)'.replace(/NAME/g, util.nameRegexp);
//const tagsRegx = new RegExp("<(\\/?[\\w:\\-\._]+)([^>]*)>(\\s*"+cdataRegx+")*([^<]+)?","g");
//const tagsRegx = new RegExp("<(\\/?)((\\w*:)?([\\w:\\-\._]+))([^>]*)>([^<]*)("+cdataRegx+"([^<]*))*([^<]+)?","g");
class OrderedObjParser {
    constructor(options){
        this.options = options;
        this.currentNode = null;
        this.tagsNodeStack = [];
        this.docTypeEntities = {};
        this.lastEntities = {
            "apos": {
                regex: /&(apos|#39|#x27);/g,
                val: "'"
            },
            "gt": {
                regex: /&(gt|#62|#x3E);/g,
                val: ">"
            },
            "lt": {
                regex: /&(lt|#60|#x3C);/g,
                val: "<"
            },
            "quot": {
                regex: /&(quot|#34|#x22);/g,
                val: "\""
            }
        };
        this.ampEntity = {
            regex: /&(amp|#38|#x26);/g,
            val: "&"
        };
        this.htmlEntities = {
            "space": {
                regex: /&(nbsp|#160);/g,
                val: " "
            },
            // "lt" : { regex: /&(lt|#60);/g, val: "<" },
            // "gt" : { regex: /&(gt|#62);/g, val: ">" },
            // "amp" : { regex: /&(amp|#38);/g, val: "&" },
            // "quot" : { regex: /&(quot|#34);/g, val: "\"" },
            // "apos" : { regex: /&(apos|#39);/g, val: "'" },
            "cent": {
                regex: /&(cent|#162);/g,
                val: "¢"
            },
            "pound": {
                regex: /&(pound|#163);/g,
                val: "£"
            },
            "yen": {
                regex: /&(yen|#165);/g,
                val: "¥"
            },
            "euro": {
                regex: /&(euro|#8364);/g,
                val: "€"
            },
            "copyright": {
                regex: /&(copy|#169);/g,
                val: "©"
            },
            "reg": {
                regex: /&(reg|#174);/g,
                val: "®"
            },
            "inr": {
                regex: /&(inr|#8377);/g,
                val: "₹"
            }
        };
        this.addExternalEntities = addExternalEntities;
        this.parseXml = parseXml;
        this.parseTextData = parseTextData;
        this.resolveNameSpace = resolveNameSpace;
        this.buildAttributesMap = buildAttributesMap;
        this.isItStopNode = isItStopNode;
        this.replaceEntitiesValue = replaceEntitiesValue;
        this.readStopNodeData = readStopNodeData;
        this.saveTextToParentTag = saveTextToParentTag;
        this.addChild = addChild;
    }
}
function addExternalEntities(externalEntities) {
    const entKeys = Object.keys(externalEntities);
    for(let i = 0; i < entKeys.length; i++){
        const ent = entKeys[i];
        this.lastEntities[ent] = {
            regex: new RegExp("&" + ent + ";", "g"),
            val: externalEntities[ent]
        };
    }
}
/**
 * @param {string} val
 * @param {string} tagName
 * @param {string} jPath
 * @param {boolean} dontTrim
 * @param {boolean} hasAttributes
 * @param {boolean} isLeafNode
 * @param {boolean} escapeEntities
 */ function parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {
    if (val !== undefined) {
        if (this.options.trimValues && !dontTrim) val = val.trim();
        if (val.length > 0) {
            if (!escapeEntities) val = this.replaceEntitiesValue(val);
            const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);
            if (newval === null || newval === undefined) //don't parse
            return val;
            else if (typeof newval !== typeof val || newval !== val) //overwrite
            return newval;
            else if (this.options.trimValues) return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);
            else {
                const trimmedVal = val.trim();
                if (trimmedVal === val) return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);
                else return val;
            }
        }
    }
}
function resolveNameSpace(tagname) {
    if (this.options.removeNSPrefix) {
        const tags = tagname.split(':');
        const prefix = tagname.charAt(0) === '/' ? '/' : '';
        if (tags[0] === 'xmlns') return '';
        if (tags.length === 2) tagname = prefix + tags[1];
    }
    return tagname;
}
//TODO: change regex to capture NS
//const attrsRegx = new RegExp("([\\w\\-\\.\\:]+)\\s*=\\s*(['\"])((.|\n)*?)\\2","gm");
const attrsRegx = new RegExp('([^\\s=]+)\\s*(=\\s*([\'"])([\\s\\S]*?)\\3)?', 'gm');
function buildAttributesMap(attrStr, jPath, tagName) {
    if (!this.options.ignoreAttributes && typeof attrStr === 'string') {
        // attrStr = attrStr.replace(/\r?\n/g, ' ');
        //attrStr = attrStr || attrStr.trim();
        const matches = util.getAllMatches(attrStr, attrsRegx);
        const len = matches.length; //don't make it inline
        const attrs = {};
        for(let i = 0; i < len; i++){
            const attrName = this.resolveNameSpace(matches[i][1]);
            let oldVal = matches[i][4];
            let aName = this.options.attributeNamePrefix + attrName;
            if (attrName.length) {
                if (this.options.transformAttributeName) aName = this.options.transformAttributeName(aName);
                if (aName === "__proto__") aName = "#__proto__";
                if (oldVal !== undefined) {
                    if (this.options.trimValues) oldVal = oldVal.trim();
                    oldVal = this.replaceEntitiesValue(oldVal);
                    const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);
                    if (newVal === null || newVal === undefined) //don't parse
                    attrs[aName] = oldVal;
                    else if (typeof newVal !== typeof oldVal || newVal !== oldVal) //overwrite
                    attrs[aName] = newVal;
                    else //parse
                    attrs[aName] = parseValue(oldVal, this.options.parseAttributeValue, this.options.numberParseOptions);
                } else if (this.options.allowBooleanAttributes) attrs[aName] = true;
            }
        }
        if (!Object.keys(attrs).length) return;
        if (this.options.attributesGroupName) {
            const attrCollection = {};
            attrCollection[this.options.attributesGroupName] = attrs;
            return attrCollection;
        }
        return attrs;
    }
}
const parseXml = function(xmlData) {
    xmlData = xmlData.replace(/\r\n?/g, "\n"); //TODO: remove this line
    const xmlObj = new xmlNode('!xml');
    let currentNode = xmlObj;
    let textData = "";
    let jPath = "";
    for(let i = 0; i < xmlData.length; i++){
        const ch = xmlData[i];
        if (ch === '<') {
            // const nextIndex = i+1;
            // const _2ndChar = xmlData[nextIndex];
            if (xmlData[i + 1] === '/') {
                const closeIndex = findClosingIndex(xmlData, ">", i, "Closing Tag is not closed.");
                let tagName = xmlData.substring(i + 2, closeIndex).trim();
                if (this.options.removeNSPrefix) {
                    const colonIndex = tagName.indexOf(":");
                    if (colonIndex !== -1) tagName = tagName.substr(colonIndex + 1);
                }
                if (this.options.transformTagName) tagName = this.options.transformTagName(tagName);
                if (currentNode) textData = this.saveTextToParentTag(textData, currentNode, jPath);
                //check if last tag of nested tag was unpaired tag
                const lastTagName = jPath.substring(jPath.lastIndexOf(".") + 1);
                if (tagName && this.options.unpairedTags.indexOf(tagName) !== -1) throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);
                let propIndex = 0;
                if (lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1) {
                    propIndex = jPath.lastIndexOf('.', jPath.lastIndexOf('.') - 1);
                    this.tagsNodeStack.pop();
                } else propIndex = jPath.lastIndexOf(".");
                jPath = jPath.substring(0, propIndex);
                currentNode = this.tagsNodeStack.pop(); //avoid recursion, set the parent tag scope
                textData = "";
                i = closeIndex;
            } else if (xmlData[i + 1] === '?') {
                let tagData = readTagExp(xmlData, i, false, "?>");
                if (!tagData) throw new Error("Pi Tag is not closed.");
                textData = this.saveTextToParentTag(textData, currentNode, jPath);
                if (this.options.ignoreDeclaration && tagData.tagName === "?xml" || this.options.ignorePiTags) ;
                else {
                    const childNode = new xmlNode(tagData.tagName);
                    childNode.add(this.options.textNodeName, "");
                    if (tagData.tagName !== tagData.tagExp && tagData.attrExpPresent) childNode[":@"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);
                    this.addChild(currentNode, childNode, jPath);
                }
                i = tagData.closeIndex + 1;
            } else if (xmlData.substr(i + 1, 3) === '!--') {
                const endIndex = findClosingIndex(xmlData, "-->", i + 4, "Comment is not closed.");
                if (this.options.commentPropName) {
                    const comment = xmlData.substring(i + 4, endIndex - 2);
                    textData = this.saveTextToParentTag(textData, currentNode, jPath);
                    currentNode.add(this.options.commentPropName, [
                        {
                            [this.options.textNodeName]: comment
                        }
                    ]);
                }
                i = endIndex;
            } else if (xmlData.substr(i + 1, 2) === '!D') {
                const result = readDocType(xmlData, i);
                this.docTypeEntities = result.entities;
                i = result.i;
            } else if (xmlData.substr(i + 1, 2) === '![') {
                const closeIndex = findClosingIndex(xmlData, "]]>", i, "CDATA is not closed.") - 2;
                const tagExp = xmlData.substring(i + 9, closeIndex);
                textData = this.saveTextToParentTag(textData, currentNode, jPath);
                //cdata should be set even if it is 0 length string
                if (this.options.cdataPropName) // let val = this.parseTextData(tagExp, this.options.cdataPropName, jPath + "." + this.options.cdataPropName, true, false, true);
                // if(!val) val = "";
                currentNode.add(this.options.cdataPropName, [
                    {
                        [this.options.textNodeName]: tagExp
                    }
                ]);
                else {
                    let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);
                    if (val == undefined) val = "";
                    currentNode.add(this.options.textNodeName, val);
                }
                i = closeIndex + 2;
            } else {
                let result = readTagExp(xmlData, i, this.options.removeNSPrefix);
                let tagName = result.tagName;
                let tagExp = result.tagExp;
                let attrExpPresent = result.attrExpPresent;
                let closeIndex = result.closeIndex;
                if (this.options.transformTagName) tagName = this.options.transformTagName(tagName);
                //save text as child node
                if (currentNode && textData) {
                    if (currentNode.tagname !== '!xml') //when nested tag is found
                    textData = this.saveTextToParentTag(textData, currentNode, jPath, false);
                }
                //check if last tag was unpaired tag
                const lastTag = currentNode;
                if (lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1) {
                    currentNode = this.tagsNodeStack.pop();
                    jPath = jPath.substring(0, jPath.lastIndexOf("."));
                }
                if (tagName !== xmlObj.tagname) jPath += jPath ? "." + tagName : tagName;
                if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {
                    let tagContent = "";
                    //self-closing tag
                    if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) i = result.closeIndex;
                    else if (this.options.unpairedTags.indexOf(tagName) !== -1) i = result.closeIndex;
                    else {
                        //read until closing tag is found
                        const result = this.readStopNodeData(xmlData, tagName, closeIndex + 1);
                        if (!result) throw new Error(`Unexpected end of ${tagName}`);
                        i = result.i;
                        tagContent = result.tagContent;
                    }
                    const childNode = new xmlNode(tagName);
                    if (tagName !== tagExp && attrExpPresent) childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
                    if (tagContent) tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);
                    jPath = jPath.substr(0, jPath.lastIndexOf("."));
                    childNode.add(this.options.textNodeName, tagContent);
                    this.addChild(currentNode, childNode, jPath);
                } else {
                    //selfClosing tag
                    if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                        if (tagName[tagName.length - 1] === "/") {
                            tagName = tagName.substr(0, tagName.length - 1);
                            tagExp = tagName;
                        } else tagExp = tagExp.substr(0, tagExp.length - 1);
                        if (this.options.transformTagName) tagName = this.options.transformTagName(tagName);
                        const childNode = new xmlNode(tagName);
                        if (tagName !== tagExp && attrExpPresent) childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
                        this.addChild(currentNode, childNode, jPath);
                        jPath = jPath.substr(0, jPath.lastIndexOf("."));
                    } else {
                        const childNode = new xmlNode(tagName);
                        this.tagsNodeStack.push(currentNode);
                        if (tagName !== tagExp && attrExpPresent) childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
                        this.addChild(currentNode, childNode, jPath);
                        currentNode = childNode;
                    }
                    textData = "";
                    i = closeIndex;
                }
            }
        } else textData += xmlData[i];
    }
    return xmlObj.child;
};
function addChild(currentNode, childNode, jPath) {
    const result = this.options.updateTag(childNode.tagname, jPath, childNode[":@"]);
    if (result === false) ;
    else if (typeof result === "string") {
        childNode.tagname = result;
        currentNode.addChild(childNode);
    } else currentNode.addChild(childNode);
}
const replaceEntitiesValue = function(val) {
    if (this.options.processEntities) {
        for(let entityName in this.docTypeEntities){
            const entity = this.docTypeEntities[entityName];
            val = val.replace(entity.regx, entity.val);
        }
        for(let entityName in this.lastEntities){
            const entity = this.lastEntities[entityName];
            val = val.replace(entity.regex, entity.val);
        }
        if (this.options.htmlEntities) for(let entityName in this.htmlEntities){
            const entity = this.htmlEntities[entityName];
            val = val.replace(entity.regex, entity.val);
        }
        val = val.replace(this.ampEntity.regex, this.ampEntity.val);
    }
    return val;
};
function saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {
    if (textData) {
        if (isLeafNode === undefined) isLeafNode = Object.keys(currentNode.child).length === 0;
        textData = this.parseTextData(textData, currentNode.tagname, jPath, false, currentNode[":@"] ? Object.keys(currentNode[":@"]).length !== 0 : false, isLeafNode);
        if (textData !== undefined && textData !== "") currentNode.add(this.options.textNodeName, textData);
        textData = "";
    }
    return textData;
}
//TODO: use jPath to simplify the logic
/**
 * 
 * @param {string[]} stopNodes 
 * @param {string} jPath
 * @param {string} currentTagName 
 */ function isItStopNode(stopNodes, jPath, currentTagName) {
    const allNodesExp = "*." + currentTagName;
    for(const stopNodePath in stopNodes){
        const stopNodeExp = stopNodes[stopNodePath];
        if (allNodesExp === stopNodeExp || jPath === stopNodeExp) return true;
    }
    return false;
}
/**
 * Returns the tag Expression and where it is ending handling single-double quotes situation
 * @param {string} xmlData 
 * @param {number} i starting index
 * @returns 
 */ function tagExpWithClosingIndex(xmlData, i, closingChar = ">") {
    let attrBoundary;
    let tagExp = "";
    for(let index = i; index < xmlData.length; index++){
        let ch = xmlData[index];
        if (attrBoundary) {
            if (ch === attrBoundary) attrBoundary = ""; //reset
        } else if (ch === '"' || ch === "'") attrBoundary = ch;
        else if (ch === closingChar[0]) {
            if (closingChar[1]) {
                if (xmlData[index + 1] === closingChar[1]) return {
                    data: tagExp,
                    index: index
                };
            } else return {
                data: tagExp,
                index: index
            };
        } else if (ch === '\t') ch = " ";
        tagExp += ch;
    }
}
function findClosingIndex(xmlData, str, i, errMsg) {
    const closingIndex = xmlData.indexOf(str, i);
    if (closingIndex === -1) throw new Error(errMsg);
    else return closingIndex + str.length - 1;
}
function readTagExp(xmlData, i, removeNSPrefix, closingChar = ">") {
    const result = tagExpWithClosingIndex(xmlData, i + 1, closingChar);
    if (!result) return;
    let tagExp = result.data;
    const closeIndex = result.index;
    const separatorIndex = tagExp.search(/\s/);
    let tagName = tagExp;
    let attrExpPresent = true;
    if (separatorIndex !== -1) {
        tagName = tagExp.substr(0, separatorIndex).replace(/\s\s*$/, '');
        tagExp = tagExp.substr(separatorIndex + 1);
    }
    if (removeNSPrefix) {
        const colonIndex = tagName.indexOf(":");
        if (colonIndex !== -1) {
            tagName = tagName.substr(colonIndex + 1);
            attrExpPresent = tagName !== result.data.substr(colonIndex + 1);
        }
    }
    return {
        tagName: tagName,
        tagExp: tagExp,
        closeIndex: closeIndex,
        attrExpPresent: attrExpPresent
    };
}
/**
 * find paired tag for a stop node
 * @param {string} xmlData 
 * @param {string} tagName 
 * @param {number} i 
 */ function readStopNodeData(xmlData, tagName, i) {
    const startIndex = i;
    // Starting at 1 since we already have an open tag
    let openTagCount = 1;
    for(; i < xmlData.length; i++)if (xmlData[i] === "<") {
        if (xmlData[i + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i, `${tagName} is not closed`);
            let closeTagName = xmlData.substring(i + 2, closeIndex).trim();
            if (closeTagName === tagName) {
                openTagCount--;
                if (openTagCount === 0) return {
                    tagContent: xmlData.substring(startIndex, i),
                    i: closeIndex
                };
            }
            i = closeIndex;
        } else if (xmlData[i + 1] === '?') {
            const closeIndex = findClosingIndex(xmlData, "?>", i + 1, "StopNode is not closed.");
            i = closeIndex;
        } else if (xmlData.substr(i + 1, 3) === '!--') {
            const closeIndex = findClosingIndex(xmlData, "-->", i + 3, "StopNode is not closed.");
            i = closeIndex;
        } else if (xmlData.substr(i + 1, 2) === '![') {
            const closeIndex = findClosingIndex(xmlData, "]]>", i, "StopNode is not closed.") - 2;
            i = closeIndex;
        } else {
            const tagData = readTagExp(xmlData, i, '>');
            if (tagData) {
                const openTagName = tagData && tagData.tagName;
                if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length - 1] !== "/") openTagCount++;
                i = tagData.closeIndex;
            }
        }
    }
     //end for loop
}
function parseValue(val, shouldParse, options) {
    if (shouldParse && typeof val === 'string') {
        //console.log(options)
        const newval = val.trim();
        if (newval === 'true') return true;
        else if (newval === 'false') return false;
        else return toNumber(val, options);
    } else {
        if (util.isExist(val)) return val;
        else return '';
    }
}
module.exports = OrderedObjParser;
}),
"./node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/XMLParser.js": (function (module, __unused_webpack_exports, __webpack_require__) {
const { buildOptions } = __webpack_require__(/*! ./OptionsBuilder */"./node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js");
const OrderedObjParser = __webpack_require__(/*! ./OrderedObjParser */"./node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js");
const { prettify } = __webpack_require__(/*! ./node2json */"./node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/node2json.js");
const validator = __webpack_require__(/*! ../validator */"./node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/validator.js");
class XMLParser {
    constructor(options){
        this.externalEntities = {};
        this.options = buildOptions(options);
    }
    /**
     * Parse XML dats to JS object 
     * @param {string|Buffer} xmlData 
     * @param {boolean|Object} validationOption 
     */ parse(xmlData, validationOption) {
        if (typeof xmlData === "string") ;
        else if (xmlData.toString) xmlData = xmlData.toString();
        else throw new Error("XML data is accepted in String or Bytes[] form.");
        if (validationOption) {
            if (validationOption === true) validationOption = {}; //validate with default options
            const result = validator.validate(xmlData, validationOption);
            if (result !== true) throw Error(`${result.err.msg}:${result.err.line}:${result.err.col}`);
        }
        const orderedObjParser = new OrderedObjParser(this.options);
        orderedObjParser.addExternalEntities(this.externalEntities);
        const orderedResult = orderedObjParser.parseXml(xmlData);
        if (this.options.preserveOrder || orderedResult === undefined) return orderedResult;
        else return prettify(orderedResult, this.options);
    }
    /**
     * Add Entity which is not by default supported by this library
     * @param {string} key 
     * @param {string} value 
     */ addEntity(key, value) {
        if (value.indexOf("&") !== -1) throw new Error("Entity value can't have '&'");
        else if (key.indexOf("&") !== -1 || key.indexOf(";") !== -1) throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'");
        else if (value === "&") throw new Error("An entity with value '&' is not permitted");
        else this.externalEntities[key] = value;
    }
}
module.exports = XMLParser;
}),
"./node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/node2json.js": (function (__unused_webpack_module, exports) {
'use strict';
/**
 * 
 * @param {array} node 
 * @param {any} options 
 * @returns 
 */ function prettify(node, options) {
    return compress(node, options);
}
/**
 * 
 * @param {array} arr 
 * @param {object} options 
 * @param {string} jPath 
 * @returns object
 */ function compress(arr, options, jPath) {
    let text;
    const compressedObj = {};
    for(let i = 0; i < arr.length; i++){
        const tagObj = arr[i];
        const property = propName(tagObj);
        let newJpath = "";
        if (jPath === undefined) newJpath = property;
        else newJpath = jPath + "." + property;
        if (property === options.textNodeName) {
            if (text === undefined) text = tagObj[property];
            else text += "" + tagObj[property];
        } else if (property === undefined) continue;
        else if (tagObj[property]) {
            let val = compress(tagObj[property], options, newJpath);
            const isLeaf = isLeafTag(val, options);
            if (tagObj[":@"]) assignAttributes(val, tagObj[":@"], newJpath, options);
            else if (Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode) val = val[options.textNodeName];
            else if (Object.keys(val).length === 0) {
                if (options.alwaysCreateTextNode) val[options.textNodeName] = "";
                else val = "";
            }
            if (compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {
                if (!Array.isArray(compressedObj[property])) compressedObj[property] = [
                    compressedObj[property]
                ];
                compressedObj[property].push(val);
            } else //TODO: if a node is not an array, then check if it should be an array
            //also determine if it is a leaf node
            if (options.isArray(property, newJpath, isLeaf)) compressedObj[property] = [
                val
            ];
            else compressedObj[property] = val;
        }
    }
    // if(text && text.length > 0) compressedObj[options.textNodeName] = text;
    if (typeof text === "string") {
        if (text.length > 0) compressedObj[options.textNodeName] = text;
    } else if (text !== undefined) compressedObj[options.textNodeName] = text;
    return compressedObj;
}
function propName(obj) {
    const keys = Object.keys(obj);
    for(let i = 0; i < keys.length; i++){
        const key = keys[i];
        if (key !== ":@") return key;
    }
}
function assignAttributes(obj, attrMap, jpath, options) {
    if (attrMap) {
        const keys = Object.keys(attrMap);
        const len = keys.length; //don't make it inline
        for(let i = 0; i < len; i++){
            const atrrName = keys[i];
            if (options.isArray(atrrName, jpath + "." + atrrName, true, true)) obj[atrrName] = [
                attrMap[atrrName]
            ];
            else obj[atrrName] = attrMap[atrrName];
        }
    }
}
function isLeafTag(obj, options) {
    const { textNodeName } = options;
    const propCount = Object.keys(obj).length;
    if (propCount === 0) return true;
    if (propCount === 1 && (obj[textNodeName] || typeof obj[textNodeName] === "boolean" || obj[textNodeName] === 0)) return true;
    return false;
}
exports.prettify = prettify;
}),
"./node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/xmlNode.js": (function (module) {
'use strict';
class XmlNode {
    constructor(tagname){
        this.tagname = tagname;
        this.child = []; //nested tags, text, cdata, comments in order
        this[":@"] = {}; //attributes map
    }
    add(key, val) {
        // this.child.push( {name : key, val: val, isCdata: isCdata });
        if (key === "__proto__") key = "#__proto__";
        this.child.push({
            [key]: val
        });
    }
    addChild(node) {
        if (node.tagname === "__proto__") node.tagname = "#__proto__";
        if (node[":@"] && Object.keys(node[":@"]).length > 0) this.child.push({
            [node.tagname]: node.child,
            [":@"]: node[":@"]
        });
        else this.child.push({
            [node.tagname]: node.child
        });
    }
}
module.exports = XmlNode;
}),
"./node_modules/.pnpm/strnum@1.0.5/node_modules/strnum/strnum.js": (function (module) {
const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;
const numRegex = /^([\-\+])?(0*)(\.[0-9]+([eE]\-?[0-9]+)?|[0-9]+(\.[0-9]+([eE]\-?[0-9]+)?)?)$/;
// const octRegex = /0x[a-z0-9]+/;
// const binRegex = /0x[a-z0-9]+/;
//polyfill
if (!Number.parseInt && window.parseInt) Number.parseInt = window.parseInt;
if (!Number.parseFloat && window.parseFloat) Number.parseFloat = window.parseFloat;
const consider = {
    hex: true,
    leadingZeros: true,
    decimalPoint: "\.",
    eNotation: true
};
function toNumber(str, options = {}) {
    // const options = Object.assign({}, consider);
    // if(opt.leadingZeros === false){
    //     options.leadingZeros = false;
    // }else if(opt.hex === false){
    //     options.hex = false;
    // }
    options = Object.assign({}, consider, options);
    if (!str || typeof str !== "string") return str;
    let trimmedStr = str.trim();
    // if(trimmedStr === "0.0") return 0;
    // else if(trimmedStr === "+0.0") return 0;
    // else if(trimmedStr === "-0.0") return -0;
    if (options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;
    else if (options.hex && hexRegex.test(trimmedStr)) return Number.parseInt(trimmedStr, 16);
    else {
        //separate negative sign, leading zeros, and rest number
        const match = numRegex.exec(trimmedStr);
        if (match) {
            const sign = match[1];
            const leadingZeros = match[2];
            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros
            //trim ending zeros for floating number
            const eNotation = match[4] || match[6];
            if (!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== ".") return str; //-0123
            else if (!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== ".") return str; //0123
            else {
                const num = Number(trimmedStr);
                const numStr = "" + num;
                if (numStr.search(/[eE]/) !== -1) {
                    if (options.eNotation) return num;
                    else return str;
                } else if (eNotation) {
                    if (options.eNotation) return num;
                    else return str;
                } else if (trimmedStr.indexOf(".") !== -1) {
                    // const decimalPart = match[5].substr(1);
                    // const intPart = trimmedStr.substr(0,trimmedStr.indexOf("."));
                    // const p = numStr.indexOf(".");
                    // const givenIntPart = numStr.substr(0,p);
                    // const givenDecPart = numStr.substr(p+1);
                    if (numStr === "0" && numTrimmedByZeros === "") return num; //0.0
                    else if (numStr === numTrimmedByZeros) return num; //0.456. 0.79000
                    else if (sign && numStr === "-" + numTrimmedByZeros) return num;
                    else return str;
                }
                if (leadingZeros) {
                    // if(numTrimmedByZeros === numStr){
                    //     if(options.leadingZeros) return num;
                    //     else return str;
                    // }else return str;
                    if (numTrimmedByZeros === numStr) return num;
                    else if (sign + numTrimmedByZeros === numStr) return num;
                    else return str;
                }
                if (trimmedStr === numStr) return num;
                else if (trimmedStr === sign + numStr) return num;
                // else{
                //     //number with +/- sign
                //     trimmedStr.test(/[-+][0-9]);
                // }
                return str;
            }
        // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;
        } else return str;
    }
}
/**
 * 
 * @param {string} numStr without leading zeros
 * @returns 
 */ function trimZeros(numStr) {
    if (numStr && numStr.indexOf(".") !== -1) {
        numStr = numStr.replace(/0+$/, ""); //remove ending zeros
        if (numStr === ".") numStr = "0";
        else if (numStr[0] === ".") numStr = "0" + numStr;
        else if (numStr[numStr.length - 1] === ".") numStr = numStr.substr(0, numStr.length - 1);
        return numStr;
    }
    return numStr;
}
module.exports = toNumber;
}),
"./node_modules/.pnpm/tslib@1.14.1/node_modules/tslib/tslib.es6.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  __assign: function() { return __assign; },
  __asyncDelegator: function() { return __asyncDelegator; },
  __asyncGenerator: function() { return __asyncGenerator; },
  __asyncValues: function() { return __asyncValues; },
  __await: function() { return __await; },
  __awaiter: function() { return __awaiter; },
  __classPrivateFieldGet: function() { return __classPrivateFieldGet; },
  __classPrivateFieldSet: function() { return __classPrivateFieldSet; },
  __createBinding: function() { return __createBinding; },
  __decorate: function() { return __decorate; },
  __exportStar: function() { return __exportStar; },
  __extends: function() { return __extends; },
  __generator: function() { return __generator; },
  __importDefault: function() { return __importDefault; },
  __importStar: function() { return __importStar; },
  __makeTemplateObject: function() { return __makeTemplateObject; },
  __metadata: function() { return __metadata; },
  __param: function() { return __param; },
  __read: function() { return __read; },
  __rest: function() { return __rest; },
  __spread: function() { return __spread; },
  __spreadArrays: function() { return __spreadArrays; },
  __values: function() { return __values; }
});
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}
}),
"./node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/regex.js": (function (__unused_webpack_module, __webpack_exports__) {
"use strict";
/* harmony default export */ __webpack_exports__["default"] = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);
}),
"./node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/rng.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.d(__webpack_exports__, {
  "default": function() { return rng; }
});
/* harmony import */var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */"crypto");
/* harmony import */var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);

const rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate
let poolPtr = rnds8Pool.length;
function rng() {
    if (poolPtr > rnds8Pool.length - 16) {
        crypto__WEBPACK_IMPORTED_MODULE_0___default().randomFillSync(rnds8Pool);
        poolPtr = 0;
    }
    return rnds8Pool.slice(poolPtr, poolPtr += 16);
}
}),
"./node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/stringify.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
/* harmony import */var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */"./node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/validate.js");

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */ const byteToHex = [];
for(let i = 0; i < 256; ++i)byteToHex.push((i + 0x100).toString(16).substr(1));
function stringify(arr, offset = 0) {
    // Note: Be careful editing this code!  It's been tuned for performance
    // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
    const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
    // of the following:
    // - One or more input array values don't map to a hex octet (leading to
    // "undefined" in the uuid)
    // - Invalid input values for the RFC `version` or `variant` fields
    if (!(0, _validate_js__WEBPACK_IMPORTED_MODULE_0__["default"])(uuid)) throw TypeError('Stringified UUID is invalid');
    return uuid;
}
/* harmony default export */ __webpack_exports__["default"] = (stringify);
}),
"./node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/v4.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
/* harmony import */var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */"./node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/rng.js");
/* harmony import */var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */"./node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/stringify.js");


function v4(options, buf, offset) {
    options = options || {};
    const rnds = options.random || (options.rng || (0, _rng_js__WEBPACK_IMPORTED_MODULE_0__["default"]))(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
    rnds[6] = rnds[6] & 0x0f | 0x40;
    rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided
    if (buf) {
        offset = offset || 0;
        for(let i = 0; i < 16; ++i)buf[offset + i] = rnds[i];
        return buf;
    }
    return (0, _stringify_js__WEBPACK_IMPORTED_MODULE_1__["default"])(rnds);
}
/* harmony default export */ __webpack_exports__["default"] = (v4);
}),
"./node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/validate.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
/* harmony import */var _regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.js */"./node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/regex.js");

function validate(uuid) {
    return typeof uuid === 'string' && _regex_js__WEBPACK_IMPORTED_MODULE_0__["default"].test(uuid);
}
/* harmony default export */ __webpack_exports__["default"] = (validate);
}),
"./src/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  paginateDescribeAlarmHistory: function() { return /* reexport safe */ _aws_sdk_client_cloudwatch_dist_es_pagination_index__WEBPACK_IMPORTED_MODULE_0__.paginateDescribeAlarmHistory; },
  paginateDescribeAlarms: function() { return /* reexport safe */ _aws_sdk_client_cloudwatch_dist_es_pagination_index__WEBPACK_IMPORTED_MODULE_0__.paginateDescribeAlarms; },
  paginateDescribeAnomalyDetectors: function() { return /* reexport safe */ _aws_sdk_client_cloudwatch_dist_es_pagination_index__WEBPACK_IMPORTED_MODULE_0__.paginateDescribeAnomalyDetectors; },
  paginateDescribeInsightRules: function() { return /* reexport safe */ _aws_sdk_client_cloudwatch_dist_es_pagination_index__WEBPACK_IMPORTED_MODULE_0__.paginateDescribeInsightRules; },
  paginateGetMetricData: function() { return /* reexport safe */ _aws_sdk_client_cloudwatch_dist_es_pagination_index__WEBPACK_IMPORTED_MODULE_0__.paginateGetMetricData; },
  paginateListDashboards: function() { return /* reexport safe */ _aws_sdk_client_cloudwatch_dist_es_pagination_index__WEBPACK_IMPORTED_MODULE_0__.paginateListDashboards; },
  paginateListManagedInsightRules: function() { return /* reexport safe */ _aws_sdk_client_cloudwatch_dist_es_pagination_index__WEBPACK_IMPORTED_MODULE_0__.paginateListManagedInsightRules; },
  paginateListMetricStreams: function() { return /* reexport safe */ _aws_sdk_client_cloudwatch_dist_es_pagination_index__WEBPACK_IMPORTED_MODULE_0__.paginateListMetricStreams; },
  paginateListMetrics: function() { return /* reexport safe */ _aws_sdk_client_cloudwatch_dist_es_pagination_index__WEBPACK_IMPORTED_MODULE_0__.paginateListMetrics; }
});
/* harmony import */var _aws_sdk_client_cloudwatch_dist_es_pagination_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/client-cloudwatch/dist-es/pagination/index */"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/dist-es/pagination/index.js");

}),
"buffer": (function (module) {
module.exports = require('buffer')}),
"child_process": (function (module) {
module.exports = require('child_process')}),
"crypto": (function (module) {
module.exports = require('crypto')}),
"fs": (function (module) {
module.exports = require('fs')}),
"http": (function (module) {
module.exports = require('http')}),
"http2": (function (module) {
module.exports = require('http2')}),
"https": (function (module) {
module.exports = require('https')}),
"os": (function (module) {
module.exports = require('os')}),
"path": (function (module) {
module.exports = require('path')}),
"process": (function (module) {
module.exports = require('process')}),
"stream": (function (module) {
module.exports = require('stream')}),
"url": (function (module) {
module.exports = require('url')}),
"util": (function (module) {
module.exports = require('util')}),
"./node_modules/.pnpm/@aws-sdk+client-cloudwatch@3.490.0/node_modules/@aws-sdk/client-cloudwatch/package.json": (function (module) {
"use strict";
module.exports = JSON.parse('{"version":"3.490.0"}')}),
"./node_modules/.pnpm/@aws-sdk+client-sso@3.490.0/node_modules/@aws-sdk/client-sso/package.json": (function (module) {
"use strict";
module.exports = JSON.parse('{"version":"3.490.0"}')}),
"./node_modules/.pnpm/@aws-sdk+client-sts@3.490.0/node_modules/@aws-sdk/client-sts/package.json": (function (module) {
"use strict";
module.exports = JSON.parse('{"version":"3.490.0"}')}),
"./node_modules/.pnpm/@aws-sdk+util-endpoints@3.489.0/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partitions.json": (function (module) {
"use strict";
module.exports = JSON.parse('{"partitions":[{"id":"aws","outputs":{"dnsSuffix":"amazonaws.com","dualStackDnsSuffix":"api.aws","implicitGlobalRegion":"us-east-1","name":"aws","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^(us|eu|ap|sa|ca|me|af|il)\\\\-\\\\w+\\\\-\\\\d+$","regions":{"af-south-1":{"description":"Africa (Cape Town)"},"ap-east-1":{"description":"Asia Pacific (Hong Kong)"},"ap-northeast-1":{"description":"Asia Pacific (Tokyo)"},"ap-northeast-2":{"description":"Asia Pacific (Seoul)"},"ap-northeast-3":{"description":"Asia Pacific (Osaka)"},"ap-south-1":{"description":"Asia Pacific (Mumbai)"},"ap-south-2":{"description":"Asia Pacific (Hyderabad)"},"ap-southeast-1":{"description":"Asia Pacific (Singapore)"},"ap-southeast-2":{"description":"Asia Pacific (Sydney)"},"ap-southeast-3":{"description":"Asia Pacific (Jakarta)"},"ap-southeast-4":{"description":"Asia Pacific (Melbourne)"},"aws-global":{"description":"AWS Standard global region"},"ca-central-1":{"description":"Canada (Central)"},"ca-west-1":{"description":"Canada West (Calgary)"},"eu-central-1":{"description":"Europe (Frankfurt)"},"eu-central-2":{"description":"Europe (Zurich)"},"eu-north-1":{"description":"Europe (Stockholm)"},"eu-south-1":{"description":"Europe (Milan)"},"eu-south-2":{"description":"Europe (Spain)"},"eu-west-1":{"description":"Europe (Ireland)"},"eu-west-2":{"description":"Europe (London)"},"eu-west-3":{"description":"Europe (Paris)"},"il-central-1":{"description":"Israel (Tel Aviv)"},"me-central-1":{"description":"Middle East (UAE)"},"me-south-1":{"description":"Middle East (Bahrain)"},"sa-east-1":{"description":"South America (Sao Paulo)"},"us-east-1":{"description":"US East (N. Virginia)"},"us-east-2":{"description":"US East (Ohio)"},"us-west-1":{"description":"US West (N. California)"},"us-west-2":{"description":"US West (Oregon)"}}},{"id":"aws-cn","outputs":{"dnsSuffix":"amazonaws.com.cn","dualStackDnsSuffix":"api.amazonwebservices.com.cn","implicitGlobalRegion":"cn-northwest-1","name":"aws-cn","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^cn\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-cn-global":{"description":"AWS China global region"},"cn-north-1":{"description":"China (Beijing)"},"cn-northwest-1":{"description":"China (Ningxia)"}}},{"id":"aws-us-gov","outputs":{"dnsSuffix":"amazonaws.com","dualStackDnsSuffix":"api.aws","implicitGlobalRegion":"us-gov-west-1","name":"aws-us-gov","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^us\\\\-gov\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-us-gov-global":{"description":"AWS GovCloud (US) global region"},"us-gov-east-1":{"description":"AWS GovCloud (US-East)"},"us-gov-west-1":{"description":"AWS GovCloud (US-West)"}}},{"id":"aws-iso","outputs":{"dnsSuffix":"c2s.ic.gov","dualStackDnsSuffix":"c2s.ic.gov","implicitGlobalRegion":"us-iso-east-1","name":"aws-iso","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^us\\\\-iso\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-iso-global":{"description":"AWS ISO (US) global region"},"us-iso-east-1":{"description":"US ISO East"},"us-iso-west-1":{"description":"US ISO WEST"}}},{"id":"aws-iso-b","outputs":{"dnsSuffix":"sc2s.sgov.gov","dualStackDnsSuffix":"sc2s.sgov.gov","implicitGlobalRegion":"us-isob-east-1","name":"aws-iso-b","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^us\\\\-isob\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-iso-b-global":{"description":"AWS ISOB (US) global region"},"us-isob-east-1":{"description":"US ISOB East (Ohio)"}}},{"id":"aws-iso-e","outputs":{"dnsSuffix":"cloud.adc-e.uk","dualStackDnsSuffix":"cloud.adc-e.uk","implicitGlobalRegion":"eu-isoe-west-1","name":"aws-iso-e","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^eu\\\\-isoe\\\\-\\\\w+\\\\-\\\\d+$","regions":{}},{"id":"aws-iso-f","outputs":{"dnsSuffix":"csp.hci.ic.gov","dualStackDnsSuffix":"csp.hci.ic.gov","implicitGlobalRegion":"us-isof-south-1","name":"aws-iso-f","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^us\\\\-isof\\\\-\\\\w+\\\\-\\\\d+$","regions":{}}],"version":"1.1"}')}),

}
// The module cache
 var __webpack_module_cache__ = {};
function __webpack_require__(moduleId) {
// Check if module is in cache
        var cachedModule = __webpack_module_cache__[moduleId];
        if (cachedModule !== undefined) {
      return cachedModule.exports;
      }
      // Create a new module (and put it into the cache)
      var module = (__webpack_module_cache__[moduleId] = {
       exports: {}
      });
      // Execute the module function
      __webpack_modules__[moduleId](module, module.exports, __webpack_require__);
// Return the exports of the module
 return module.exports;

}
// webpack/runtime/define_property_getters
!function() {
__webpack_require__.d = function(exports, definition) {
	for(var key in definition) {
        if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
            Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
        }
    }
};
}();
// webpack/runtime/make_namespace_object
!function() {
// define __esModule on exports
__webpack_require__.r = function(exports) {
	if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
		Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
	}
	Object.defineProperty(exports, '__esModule', { value: true });
};

}();
// webpack/runtime/compat_get_default_export
!function() {
// getDefaultExport function for compatibility with non-harmony modules
__webpack_require__.n = function (module) {
	var getter = module && module.__esModule ?
		function () { return module['default']; } :
		function () { return module; };
	__webpack_require__.d(getter, { a: getter });
	return getter;
};




}();
// webpack/runtime/has_own_property
!function() {
__webpack_require__.o = function (obj, prop) {
	return Object.prototype.hasOwnProperty.call(obj, prop);
};

}();
var __webpack_exports__ = __webpack_require__("./src/index.js");module.exports = __webpack_exports__;
